package com.nouros.hrms.model;

import java.util.Date;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "BREAKDETAILS")
@Filters(value = { @Filter(name = "breakdetailsAvailableShiftsNInFilter", condition = "AVAILABLE_SHIFTS not in (:availableShifts)"), @Filter(name = "breakdetailsAvailableShiftsEqFilter", condition = "AVAILABLE_SHIFTS = :availableShifts"), @Filter(name = "breakdetailsAvailableShiftsNEqFilter", condition = "AVAILABLE_SHIFTS != :availableShifts"), @Filter(name = "breakdetailsAvailableShiftsInFilter", condition = "AVAILABLE_SHIFTS in (:availableShifts)"), @Filter(name = "breakdetailsBreakIconNInFilter", condition = "BREAK_ICON not in (:breakIcon)"), @Filter(name = "breakdetailsBreakIconEqFilter", condition = "BREAK_ICON = :breakIcon"), @Filter(name = "breakdetailsBreakIconNEqFilter", condition = "BREAK_ICON != :breakIcon"), @Filter(name = "breakdetailsBreakIconInFilter", condition = "BREAK_ICON in (:breakIcon)"), @Filter(name = "breakdetailsBreakModeEqFilter", condition = "BREAK_MODE = :breakMode"), @Filter(name = "breakdetailsBreakModeNEqFilter", condition = "BREAK_MODE != :breakMode"), @Filter(name = "breakdetailsBreakNameNInFilter", condition = "BREAK_NAME not in (:breakName)"), @Filter(name = "breakdetailsBreakNameEqFilter", condition = "BREAK_NAME = :breakName"), @Filter(name = "breakdetailsBreakNameNEqFilter", condition = "BREAK_NAME != :breakName"), @Filter(name = "breakdetailsBreakNameInFilter", condition = "BREAK_NAME in (:breakName)"), @Filter(name = "breakdetailsEndTimeGtFilter", condition = "END_TIME > (SELECT DATE_FORMAT(:endTime, '%Y-%m-%d'))"), @Filter(name = "breakdetailsEndTimeLtFilter", condition = "END_TIME < (SELECT DATE_FORMAT(:endTime, '%Y-%m-%d'))"), @Filter(name = "breakdetailsEndTimeBwFilter", condition = "END_TIME >(SELECT DATE_FORMAT(:endTime_MIN, '%Y-%m-%d')) AND END_TIME <(SELECT DATE_FORMAT(:endTime_MAX, '%Y-%m-%d'))"), @Filter(name = "breakdetailsIdGtFilter", condition = "ID > :id"), @Filter(name = "breakdetailsIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "breakdetailsIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "breakdetailsIdLtFilter", condition = "ID < :id"), @Filter(name = "breakdetailsIdEqFilter", condition = "ID = :id"), @Filter(name = "breakdetailsIdNEqFilter", condition = "ID != :id"), @Filter(name = "breakdetailsIdInFilter", condition = "ID in (:id)"), @Filter(name = "breakdetailsIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "breakdetailsIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "breakdetailsIdEqFilter", condition = "ID = :id"), @Filter(name = "breakdetailsPayTypeEqFilter", condition = "PAY_TYPE = :payType"), @Filter(name = "breakdetailsPayTypeNEqFilter", condition = "PAY_TYPE != :payType"), @Filter(name = "breakdetailsStartTimeGtFilter", condition = "START_TIME > (SELECT DATE_FORMAT(:startTime, '%Y-%m-%d'))"), @Filter(name = "breakdetailsStartTimeLtFilter", condition = "START_TIME < (SELECT DATE_FORMAT(:startTime, '%Y-%m-%d'))"), @Filter(name = "breakdetailsStartTimeBwFilter", condition = "START_TIME >(SELECT DATE_FORMAT(:startTime_MIN, '%Y-%m-%d')) AND START_TIME <(SELECT DATE_FORMAT(:startTime_MAX, '%Y-%m-%d'))"), @Filter(name = "breakdetailsWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "breakdetailsWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "breakdetailsWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "breakdetailsWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "breakdetailsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "breakdetailsWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "breakdetailsWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "breakdetailsWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "breakdetailsWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "breakdetailsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "breakdetailsAvailableShiftsNInFilter", parameters = { @ParamDef(name = "availableShifts", type = String.class) }), @FilterDef(name = "breakdetailsAvailableShiftsEqFilter", parameters = { @ParamDef(name = "availableShifts", type = String.class) }), @FilterDef(name = "breakdetailsAvailableShiftsNEqFilter", parameters = { @ParamDef(name = "availableShifts", type = String.class) }), @FilterDef(name = "breakdetailsAvailableShiftsInFilter", parameters = { @ParamDef(name = "availableShifts", type = String.class) }), @FilterDef(name = "breakdetailsBreakIconNInFilter", parameters = { @ParamDef(name = "breakIcon", type = String.class) }), @FilterDef(name = "breakdetailsBreakIconEqFilter", parameters = { @ParamDef(name = "breakIcon", type = String.class) }), @FilterDef(name = "breakdetailsBreakIconNEqFilter", parameters = { @ParamDef(name = "breakIcon", type = String.class) }), @FilterDef(name = "breakdetailsBreakIconInFilter", parameters = { @ParamDef(name = "breakIcon", type = String.class) }), @FilterDef(name = "breakdetailsBreakModeEqFilter", parameters = { @ParamDef(name = "breakMode", type = Boolean.class) }), @FilterDef(name = "breakdetailsBreakModeNEqFilter", parameters = { @ParamDef(name = "breakMode", type = Boolean.class) }), @FilterDef(name = "breakdetailsBreakNameNInFilter", parameters = { @ParamDef(name = "breakName", type = String.class) }), @FilterDef(name = "breakdetailsBreakNameEqFilter", parameters = { @ParamDef(name = "breakName", type = String.class) }), @FilterDef(name = "breakdetailsBreakNameNEqFilter", parameters = { @ParamDef(name = "breakName", type = String.class) }), @FilterDef(name = "breakdetailsBreakNameInFilter", parameters = { @ParamDef(name = "breakName", type = String.class) }), @FilterDef(name = "breakdetailsEndTimeGtFilter", parameters = { @ParamDef(name = "endTime", type = String.class) }), @FilterDef(name = "breakdetailsEndTimeLtFilter", parameters = { @ParamDef(name = "endTime", type = String.class) }), @FilterDef(name = "breakdetailsEndTimeBwFilter", parameters = { @ParamDef(name = "endTime_MIN", type = String.class), @ParamDef(name = "endTime_MAX", type = String.class) }), @FilterDef(name = "breakdetailsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "breakdetailsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "breakdetailsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "breakdetailsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "breakdetailsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "breakdetailsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "breakdetailsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "breakdetailsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "breakdetailsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "breakdetailsPayTypeEqFilter", parameters = { @ParamDef(name = "payType", type = Boolean.class) }), @FilterDef(name = "breakdetailsPayTypeNEqFilter", parameters = { @ParamDef(name = "payType", type = Boolean.class) }), @FilterDef(name = "breakdetailsStartTimeGtFilter", parameters = { @ParamDef(name = "startTime", type = String.class) }), @FilterDef(name = "breakdetailsStartTimeLtFilter", parameters = { @ParamDef(name = "startTime", type = String.class) }), @FilterDef(name = "breakdetailsStartTimeBwFilter", parameters = { @ParamDef(name = "startTime_MIN", type = String.class), @ParamDef(name = "startTime_MAX", type = String.class) }), @FilterDef(name = "breakdetailsWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "breakdetailsWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "breakdetailsWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "breakdetailsWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "breakdetailsWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "breakdetailsWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "breakdetailsWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "breakdetailsWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "breakdetailsWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Breakdetails extends BaseEntitySaaS{

    @Size(max = 255)
    @Basic
    @Column(name = "AVAILABLE_SHIFTS")
    private String availableShifts;

    @Size(max = 255)
    @Basic
    @Column(name = "BREAK_ICON")
    private String breakIcon;

    @Basic
    @Column(name = "BREAK_MODE", columnDefinition = "ENUM('Automatic','Manual')", length = 2)
    private String breakMode;

    @Size(max = 30)
    @Basic
    @Column(name = "BREAK_NAME", length = 30)
    private String breakName;

    @Basic
    @Column(name = "END_TIME", length = 19)
    private Date endTime;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(name = "PAY_TYPE", columnDefinition = "ENUM('Paid','Unpaid')", length = 2)
    private String payType;
    
    @Basic
    @Column(name = "START_TIME", length = 19)
    private Date startTime;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public Breakdetails() {
    }

    public Breakdetails(Integer id) {
        this.id = id;
    }

    public String getAvailableShifts() {
        return availableShifts;
    }

    public void setAvailableShifts(String availableShifts) {
        this.availableShifts = availableShifts;
    }

    public String getBreakIcon() {
        return breakIcon;
    }

    public void setBreakIcon(String breakIcon) {
        this.breakIcon = breakIcon;
    }

    public String getBreakName() {
        return breakName;
    }

    public void setBreakName(String breakName) {
        this.breakName = breakName;
    }

    public Date getEndTime() {
        return endTime;
    }

    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Date getStartTime() {
        return startTime;
    }

    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    public String getBreakMode() {
		return breakMode;
	}

	public void setBreakMode(String breakMode) {
		this.breakMode = breakMode;
	}

	public String getPayType() {
		return payType;
	}

	public void setPayType(String payType) {
		this.payType = payType;
	}

	public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

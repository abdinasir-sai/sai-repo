package com.nouros.hrms.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;
import org.hibernate.envers.Audited;
import org.hibernate.envers.NotAudited;
import org.hibernate.envers.RelationTargetAuditMode;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.enttribe.product.pii.listners.PrePersistListener;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Audited
@Table(name = "APPLICANT")
@Filters(value = {
		@Filter(name = "applicantapplicantSourceNInFilter", condition = "APPLICANT_SOURCE not in (:applicantSource)"),
		@Filter(name = "applicantapplicantSourceEqFilter", condition = "APPLICANT_SOURCE = :applicantSource"),
		@Filter(name = "applicantapplicantSourceNEqFilter", condition = "APPLICANT_SOURCE != :applicantSource"),
		@Filter(name = "applicantapplicantSourceInFilter", condition = "APPLICANT_SOURCE in (:applicantSource)"),
		@Filter(name = "applicantCandidateOwnerNInFilter", condition = "CANDIDATE_OWNER not in (:candidateOwner)"),
		@Filter(name = "applicantCandidateOwnerEqFilter", condition = "CANDIDATE_OWNER = :candidateOwner"),
		@Filter(name = "applicantCandidateOwnerNEqFilter", condition = "CANDIDATE_OWNER != :candidateOwner"),
		@Filter(name = "applicantCandidateOwnerInFilter", condition = "CANDIDATE_OWNER in (:candidateOwner)"),
		@Filter(name = "applicantCandidateSourceNInFilter", condition = "CANDIDATE_SOURCE not in (:candidateSource)"),
		@Filter(name = "applicantCandidateSourceEqFilter", condition = "CANDIDATE_SOURCE = :candidateSource"),
		@Filter(name = "applicantCandidateSourceNEqFilter", condition = "CANDIDATE_SOURCE != :candidateSource"),
		@Filter(name = "applicantCandidateSourceInFilter", condition = "CANDIDATE_SOURCE in (:candidateSource)"),
		@Filter(name = "applicantCandidateStatusNInFilter", condition = "CANDIDATE_STATUS not in (:candidateStatus)"),
		@Filter(name = "applicantCandidateStatusEqFilter", condition = "CANDIDATE_STATUS = :candidateStatus"),
		@Filter(name = "applicantCandidateStatusNEqFilter", condition = "CANDIDATE_STATUS != :candidateStatus"),
		@Filter(name = "applicantCandidateStatusInFilter", condition = "CANDIDATE_STATUS in (:candidateStatus)"),
		@Filter(name = "applicantCityNInFilter", condition = "CITY not in (:city)"),
		@Filter(name = "applicantCityEqFilter", condition = "CITY = :city"),
		@Filter(name = "applicantCityNEqFilter", condition = "CITY != :city"),
		@Filter(name = "applicantCityInFilter", condition = "CITY in (:city)"),
		@Filter(name = "applicantCountryNInFilter", condition = "COUNTRY not in (:country)"),
		@Filter(name = "applicantCountryEqFilter", condition = "COUNTRY = :country"),
		@Filter(name = "applicantCountryNEqFilter", condition = "COUNTRY != :country"),
		@Filter(name = "applicantCountryInFilter", condition = "COUNTRY in (:country)"),
		@Filter(name = "applicantCurrentEmployerNInFilter", condition = "CURRENT_EMPLOYER not in (:currentEmployer)"),
		@Filter(name = "applicantCurrentEmployerEqFilter", condition = "CURRENT_EMPLOYER = :currentEmployer"),
		@Filter(name = "applicantCurrentEmployerNEqFilter", condition = "CURRENT_EMPLOYER != :currentEmployer"),
		@Filter(name = "applicantCurrentEmployerInFilter", condition = "CURRENT_EMPLOYER in (:currentEmployer)"),
		@Filter(name = "applicantCurrentJobTitleNInFilter", condition = "CURRENT_JOB_TITLE not in (:currentJobTitle)"),
		@Filter(name = "applicantCurrentJobTitleEqFilter", condition = "CURRENT_JOB_TITLE = :currentJobTitle"),
		@Filter(name = "applicantCurrentJobTitleNEqFilter", condition = "CURRENT_JOB_TITLE != :currentJobTitle"),
		@Filter(name = "applicantCurrentJobTitleInFilter", condition = "CURRENT_JOB_TITLE in (:currentJobTitle)"),
		@Filter(name = "applicantCurrentSalaryGtFilter", condition = "CURRENT_SALARY > :currentSalary"),
		@Filter(name = "applicantCurrentSalaryNInFilter", condition = "CURRENT_SALARY not in (:currentSalary)"),
		@Filter(name = "applicantCurrentSalaryLtEqFilter", condition = "CURRENT_SALARY <= :currentSalary"),
		@Filter(name = "applicantCurrentSalaryLtFilter", condition = "CURRENT_SALARY < :currentSalary"),
		@Filter(name = "applicantCurrentSalaryEqFilter", condition = "CURRENT_SALARY = :currentSalary"),
		@Filter(name = "applicantCurrentSalaryNEqFilter", condition = "CURRENT_SALARY != :currentSalary"),
		@Filter(name = "applicantCurrentSalaryInFilter", condition = "CURRENT_SALARY in (:currentSalary)"),
		@Filter(name = "applicantCurrentSalaryBwFilter", condition = "CURRENT_SALARY > :currentSalary_MIN  AND CURRENT_SALARY < :currentSalary_MAX"),
		@Filter(name = "applicantCurrentSalaryGtEqFilter", condition = "CURRENT_SALARY >= :currentSalary"),
		@Filter(name = "applicantCurrentSalaryEqFilter", condition = "CURRENT_SALARY = :currentSalary"),
		@Filter(name = "applicantEmailIdNInFilter", condition = "EMAIL_ID not in (:emailId)"),
		@Filter(name = "applicantEmailIdEqFilter", condition = "EMAIL_ID = :emailId"),
		@Filter(name = "applicantEmailIdNEqFilter", condition = "EMAIL_ID != :emailId"),
		@Filter(name = "applicantEmailIdInFilter", condition = "EMAIL_ID in (:emailId)"),
		@Filter(name = "applicantExpectedSalaryGtFilter", condition = "EXPECTED_SALARY > :expectedSalary"),
		@Filter(name = "applicantExpectedSalaryNInFilter", condition = "EXPECTED_SALARY not in (:expectedSalary)"),
		@Filter(name = "applicantExpectedSalaryLtEqFilter", condition = "EXPECTED_SALARY <= :expectedSalary"),
		@Filter(name = "applicantExpectedSalaryLtFilter", condition = "EXPECTED_SALARY < :expectedSalary"),
		@Filter(name = "applicantExpectedSalaryEqFilter", condition = "EXPECTED_SALARY = :expectedSalary"),
		@Filter(name = "applicantExpectedSalaryNEqFilter", condition = "EXPECTED_SALARY != :expectedSalary"),
		@Filter(name = "applicantExpectedSalaryInFilter", condition = "EXPECTED_SALARY in (:expectedSalary)"),
		@Filter(name = "applicantExpectedSalaryBwFilter", condition = "EXPECTED_SALARY > :expectedSalary_MIN  AND EXPECTED_SALARY < :expectedSalary_MAX"),
		@Filter(name = "applicantExpectedSalaryGtEqFilter", condition = "EXPECTED_SALARY >= :expectedSalary"),
		@Filter(name = "applicantExpectedSalaryEqFilter", condition = "EXPECTED_SALARY = :expectedSalary"),
		@Filter(name = "applicantExperienceInYearsGtFilter", condition = "EXPERIENCE_IN_YEARS > :experienceInYears"),
		@Filter(name = "applicantExperienceInYearsNInFilter", condition = "EXPERIENCE_IN_YEARS not in (:experienceInYears)"),
		@Filter(name = "applicantExperienceInYearsLtEqFilter", condition = "EXPERIENCE_IN_YEARS <= :experienceInYears"),
		@Filter(name = "applicantExperienceInYearsLtFilter", condition = "EXPERIENCE_IN_YEARS < :experienceInYears"),
		@Filter(name = "applicantExperienceInYearsEqFilter", condition = "EXPERIENCE_IN_YEARS = :experienceInYears"),
		@Filter(name = "applicantExperienceInYearsNEqFilter", condition = "EXPERIENCE_IN_YEARS != :experienceInYears"),
		@Filter(name = "applicantExperienceInYearsInFilter", condition = "EXPERIENCE_IN_YEARS in (:experienceInYears)"),
		@Filter(name = "applicantExperienceInYearsBwFilter", condition = "EXPERIENCE_IN_YEARS > :experienceInYears_MIN  AND EXPERIENCE_IN_YEARS < :experienceInYears_MAX"),
		@Filter(name = "applicantExperienceInYearsGtEqFilter", condition = "EXPERIENCE_IN_YEARS >= :experienceInYears"),
		@Filter(name = "applicantExperienceInYearsEqFilter", condition = "EXPERIENCE_IN_YEARS = :experienceInYears"),
		@Filter(name = "applicantFaxNInFilter", condition = "FAX not in (:fax)"),
		@Filter(name = "applicantFaxEqFilter", condition = "FAX = :fax"),
		@Filter(name = "applicantFaxNEqFilter", condition = "FAX != :fax"),
		@Filter(name = "applicantFaxInFilter", condition = "FAX in (:fax)"),
		@Filter(name = "applicantFirstNameNInFilter", condition = "FIRST_NAME not in (:firstName)"),
		@Filter(name = "applicantFirstNameEqFilter", condition = "FIRST_NAME = :firstName"),
		@Filter(name = "applicantFirstNameNEqFilter", condition = "FIRST_NAME != :firstName"),
		@Filter(name = "applicantFirstNameInFilter", condition = "FIRST_NAME in (:firstName)"),
		@Filter(name = "applicantHighestQualificationNInFilter", condition = "HIGHEST_QUALIFICATION not in (:highestQualification)"),
		@Filter(name = "applicantHighestQualificationEqFilter", condition = "HIGHEST_QUALIFICATION = :highestQualification"),
		@Filter(name = "applicantHighestQualificationNEqFilter", condition = "HIGHEST_QUALIFICATION != :highestQualification"),
		@Filter(name = "applicantHighestQualificationInFilter", condition = "HIGHEST_QUALIFICATION in (:highestQualification)"),
		@Filter(name = "applicantIdGtFilter", condition = "ID > :id"),
		@Filter(name = "applicantIdNInFilter", condition = "ID not in (:id)"),
		@Filter(name = "applicantIdLtEqFilter", condition = "ID <= :id"),
		@Filter(name = "applicantIdLtFilter", condition = "ID < :id"),
		@Filter(name = "applicantIdEqFilter", condition = "ID = :id"),
		@Filter(name = "applicantIdNEqFilter", condition = "ID != :id"),
		@Filter(name = "applicantIdInFilter", condition = "ID in (:id)"),
		@Filter(name = "applicantIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"),
		@Filter(name = "applicantIdGtEqFilter", condition = "ID >= :id"),
		@Filter(name = "applicantIdEqFilter", condition = "ID = :id"),
		@Filter(name = "applicantLastNameNInFilter", condition = "LAST_NAME not in (:lastName)"),
		@Filter(name = "applicantLastNameEqFilter", condition = "LAST_NAME = :lastName"),
		@Filter(name = "applicantLastNameNEqFilter", condition = "LAST_NAME != :lastName"),
		@Filter(name = "applicantLastNameInFilter", condition = "LAST_NAME in (:lastName)"),
		@Filter(name = "applicantMobileNInFilter", condition = "MOBILE not in (:mobile)"),
		@Filter(name = "applicantMobileEqFilter", condition = "MOBILE = :mobile"),
		@Filter(name = "applicantMobileNEqFilter", condition = "MOBILE != :mobile"),
		@Filter(name = "applicantMobileInFilter", condition = "MOBILE in (:mobile)"),
		@Filter(name = "applicantPhoneNInFilter", condition = "PHONE not in (:phone)"),
		@Filter(name = "applicantPhoneEqFilter", condition = "PHONE = :phone"),
		@Filter(name = "applicantPhoneNEqFilter", condition = "PHONE != :phone"),
		@Filter(name = "applicantPhoneInFilter", condition = "PHONE in (:phone)"),
		@Filter(name = "applicantPostalCodeNInFilter", condition = "POSTAL_CODE not in (:postalCode)"),
		@Filter(name = "applicantPostalCodeEqFilter", condition = "POSTAL_CODE = :postalCode"),
		@Filter(name = "applicantPostalCodeNEqFilter", condition = "POSTAL_CODE != :postalCode"),
		@Filter(name = "applicantPostalCodeInFilter", condition = "POSTAL_CODE in (:postalCode)"),
		@Filter(name = "applicantPresentAddressNInFilter", condition = "PRESENT_ADDRESS not in (:presentAddress)"),
		@Filter(name = "applicantPresentAddressEqFilter", condition = "PRESENT_ADDRESS = :presentAddress"),
		@Filter(name = "applicantPresentAddressNEqFilter", condition = "PRESENT_ADDRESS != :presentAddress"),
		@Filter(name = "applicantPresentAddressInFilter", condition = "PRESENT_ADDRESS in (:presentAddress)"),
		@Filter(name = "applicantProvinceNInFilter", condition = "PROVINCE not in (:province)"),
		@Filter(name = "applicantProvinceEqFilter", condition = "PROVINCE = :province"),
		@Filter(name = "applicantProvinceNEqFilter", condition = "PROVINCE != :province"),
		@Filter(name = "applicantProvinceInFilter", condition = "PROVINCE in (:province)"),
		@Filter(name = "applicantSecondaryEmailNInFilter", condition = "SECONDARY_EMAIL not in (:secondaryEmail)"),
		@Filter(name = "applicantSecondaryEmailEqFilter", condition = "SECONDARY_EMAIL = :secondaryEmail"),
		@Filter(name = "applicantSecondaryEmailNEqFilter", condition = "SECONDARY_EMAIL != :secondaryEmail"),
		@Filter(name = "applicantSecondaryEmailInFilter", condition = "SECONDARY_EMAIL in (:secondaryEmail)"),
		@Filter(name = "applicantSkillSetNInFilter", condition = "SKILL_SET not in (:skillSet)"),
		@Filter(name = "applicantSkillSetEqFilter", condition = "SKILL_SET = :skillSet"),
		@Filter(name = "applicantSkillSetNEqFilter", condition = "SKILL_SET != :skillSet"),
		@Filter(name = "applicantSkillSetInFilter", condition = "SKILL_SET in (:skillSet)"),
		@Filter(name = "applicantStreetNInFilter", condition = "STREET not in (:street)"),
		@Filter(name = "applicantStreetEqFilter", condition = "STREET = :street"),
		@Filter(name = "applicantStreetNEqFilter", condition = "STREET != :street"),
		@Filter(name = "applicantStreetInFilter", condition = "STREET in (:street)"),
		@Filter(name = "applicantUniqueIdCandidateNInFilter", condition = "UNIQUE_ID_CANDIDATE not in (:uniqueIdCandidate)"),
		@Filter(name = "applicantUniqueIdCandidateEqFilter", condition = "UNIQUE_ID_CANDIDATE = :uniqueIdCandidate"),
		@Filter(name = "applicantUniqueIdCandidateNEqFilter", condition = "UNIQUE_ID_CANDIDATE != :uniqueIdCandidate"),
		@Filter(name = "applicantUniqueIdCandidateInFilter", condition = "UNIQUE_ID_CANDIDATE in (:uniqueIdCandidate)"),
		@Filter(name = "applicantWebsiteNInFilter", condition = "WEBSITE not in (:website)"),
		@Filter(name = "applicantWebsiteEqFilter", condition = "WEBSITE = :website"),
		@Filter(name = "applicantWebsiteNEqFilter", condition = "WEBSITE != :website"),
		@Filter(name = "applicantWebsiteInFilter", condition = "WEBSITE in (:website)"),
		@Filter(name = "applicantWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"),
		@Filter(name = "applicantWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"),
		@Filter(name = "applicantWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"),
		@Filter(name = "applicantWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"),
		@Filter(name = "applicantWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"),
		@Filter(name = "applicantWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"),
		@Filter(name = "applicantWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"),
		@Filter(name = "applicantWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"),
		@Filter(name = "applicantWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"),
		@Filter(name = "applicantWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"),
		@Filter(name = "applicantProcessInstanceIdNInFilter", condition = "PROCESS_INSTANCE_ID not in (:processInstanceId)"),
		@Filter(name = "applicantProcessInstanceIdEqFilter", condition = "PROCESS_INSTANCE_ID = :processInstanceId"),
		@Filter(name = "applicantProcessInstanceIdNEqFilter", condition = "PROCESS_INSTANCE_ID != :processInstanceId"),
		@Filter(name = "applicantProcessInstanceIdInFilter", condition = "PROCESS_INSTANCE_ID in (:processInstanceId)"),
		@Filter(name = "applicantWorkflowStageNInFilter", condition = "WORKFLOW_STAGE not in (:workflowStage)"),
		@Filter(name = "applicantWorkflowStageEqFilter", condition = "WORKFLOW_STAGE = :workflowStage"),
		@Filter(name = "applicantWorkflowStageNEqFilter", condition = "WORKFLOW_STAGE != :workflowStage"),
		@Filter(name = "applicantWorkflowStageInFilter", condition = "WORKFLOW_STAGE in (:workflowStage)"),
		@Filter(name = "applicantAssignedToMeFilterAll", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in(:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName or WORKFLOW_ACTION.ROLE_NAME =:roleName)"),
		@Filter(name = "applicantAssignedToMeFilterAgUn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"),
		@Filter(name = "applicantAssignedToMeFilterAgRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName)  or WORKFLOW_ACTION.ROLE_NAME =:roleName)"),
		@Filter(name = "applicantAssignedToMeFilterUnRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME in (:assigneeGroupName) or  WORKFLOW_ACTION.ROLE_NAME =:roleName)"),
		@Filter(name = "applicantAssignedToMeFilterAg", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName))"),
		@Filter(name = "applicantAssignedToMeFilterAu", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"),
		@Filter(name = "applicantAssignedToMeFilterRn", condition = "ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ROLE_NAME =:roleName)") })
@FilterDefs(value = { @FilterDef(name = "applicantAssignedToMeFilterAll", parameters = {
		@ParamDef(name = "assigneeGroupName", type = String.class),
		@ParamDef(name = "assigneeUserName", type = String.class), @ParamDef(name = "roleName", type = String.class) }),
		@FilterDef(name = "applicantAssignedToMeFilterAgUn", parameters = {
				@ParamDef(name = "assigneeGroupName", type = String.class),
				@ParamDef(name = "assigneeUserName", type = String.class) }),
		@FilterDef(name = "applicantAssignedToMeFilterAgRn", parameters = {
				@ParamDef(name = "assigneeGroupName", type = String.class),
				@ParamDef(name = "roleName", type = String.class) }),
		@FilterDef(name = "applicantAssignedToMeFilterUnRn", parameters = {
				@ParamDef(name = "assigneeUserName", type = String.class),
				@ParamDef(name = "roleName", type = String.class) }),
		@FilterDef(name = "applicantAssignedToMeFilterAg", parameters = {
				@ParamDef(name = "assigneeGroupName", type = String.class) }),
		@FilterDef(name = "applicantAssignedToMeFilterAu", parameters = {
				@ParamDef(name = "assigneeUserName", type = String.class) }),
		@FilterDef(name = "applicantAssignedToMeFilterRn", parameters = {
				@ParamDef(name = "roleName", type = String.class) }),
		@FilterDef(name = "applicantapplicantSourceNInFilter", parameters = {
				@ParamDef(name = "applicantSource", type = String.class) }),
		@FilterDef(name = "applicantapplicantSourceEqFilter", parameters = {
				@ParamDef(name = "applicantSource", type = String.class) }),
		@FilterDef(name = "applicantapplicantSourceNEqFilter", parameters = {
				@ParamDef(name = "applicantSource", type = String.class) }),
		@FilterDef(name = "applicantapplicantSourceInFilter", parameters = {
				@ParamDef(name = "applicantSource", type = String.class) }),
		@FilterDef(name = "applicantCandidateOwnerNInFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "applicantCandidateOwnerEqFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "applicantCandidateOwnerNEqFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "applicantCandidateOwnerInFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "applicantCandidateSourceNInFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "applicantCandidateSourceEqFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "applicantCandidateSourceNEqFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "applicantCandidateSourceInFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "applicantCandidateStatusNInFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "applicantCandidateStatusEqFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "applicantCandidateStatusNEqFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "applicantCandidateStatusInFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "applicantCityNInFilter", parameters = { @ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "applicantCityEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "applicantCityNEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "applicantCityInFilter", parameters = { @ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "applicantCountryNInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "applicantCountryEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "applicantCountryNEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "applicantCountryInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "applicantCurrentEmployerNInFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "applicantCurrentEmployerEqFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "applicantCurrentEmployerNEqFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "applicantCurrentEmployerInFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "applicantCurrentJobTitleNInFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "applicantCurrentJobTitleEqFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "applicantCurrentJobTitleNEqFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "applicantCurrentJobTitleInFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "applicantCurrentSalaryGtFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "applicantCurrentSalaryNInFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "applicantCurrentSalaryLtEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "applicantCurrentSalaryLtFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "applicantCurrentSalaryEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "applicantCurrentSalaryNEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "applicantCurrentSalaryInFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "applicantCurrentSalaryBwFilter", parameters = {
				@ParamDef(name = "currentSalary_MIN", type = Integer.class),
				@ParamDef(name = "currentSalary_MAX", type = Integer.class) }),
		@FilterDef(name = "applicantCurrentSalaryGtEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "applicantEmailIdNInFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "applicantEmailIdEqFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "applicantEmailIdNEqFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "applicantEmailIdInFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "applicantExpectedSalaryGtFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "applicantExpectedSalaryNInFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "applicantExpectedSalaryLtEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "applicantExpectedSalaryLtFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "applicantExpectedSalaryEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "applicantExpectedSalaryNEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "applicantExpectedSalaryInFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "applicantExpectedSalaryBwFilter", parameters = {
				@ParamDef(name = "expectedSalary_MIN", type = Integer.class),
				@ParamDef(name = "expectedSalary_MAX", type = Integer.class) }),
		@FilterDef(name = "applicantExpectedSalaryGtEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "applicantExperienceInYearsGtFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "applicantExperienceInYearsNInFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "applicantExperienceInYearsLtEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "applicantExperienceInYearsLtFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "applicantExperienceInYearsEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "applicantExperienceInYearsNEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "applicantExperienceInYearsInFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "applicantExperienceInYearsBwFilter", parameters = {
				@ParamDef(name = "experienceInYears_MIN", type = Integer.class),
				@ParamDef(name = "experienceInYears_MAX", type = Integer.class) }),
		@FilterDef(name = "applicantExperienceInYearsGtEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "applicantFaxNInFilter", parameters = { @ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "applicantFaxEqFilter", parameters = { @ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "applicantFaxNEqFilter", parameters = { @ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "applicantFaxInFilter", parameters = { @ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "applicantFirstNameNInFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "applicantFirstNameEqFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "applicantFirstNameNEqFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "applicantFirstNameInFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "applicantHighestQualificationNInFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "applicantHighestQualificationEqFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "applicantHighestQualificationNEqFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "applicantHighestQualificationInFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "applicantIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "applicantIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "applicantIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "applicantIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "applicantIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "applicantIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "applicantIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "applicantIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class),
				@ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "applicantIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "applicantLastNameNInFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "applicantLastNameEqFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "applicantLastNameNEqFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "applicantLastNameInFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "applicantMobileNInFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "applicantMobileEqFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "applicantMobileNEqFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "applicantMobileInFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "applicantPhoneNInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "applicantPhoneEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "applicantPhoneNEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "applicantPhoneInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "applicantPostalCodeNInFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "applicantPostalCodeEqFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "applicantPostalCodeNEqFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "applicantPostalCodeInFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "applicantPresentAddressNInFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "applicantPresentAddressEqFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "applicantPresentAddressNEqFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "applicantPresentAddressInFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "applicantProvinceNInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "applicantProvinceEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "applicantProvinceNEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "applicantProvinceInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "applicantSecondaryEmailNInFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "applicantSecondaryEmailEqFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "applicantSecondaryEmailNEqFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "applicantSecondaryEmailInFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "applicantSkillSetNInFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "applicantSkillSetEqFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "applicantSkillSetNEqFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "applicantSkillSetInFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "applicantStreetNInFilter", parameters = { @ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "applicantStreetEqFilter", parameters = { @ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "applicantStreetNEqFilter", parameters = { @ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "applicantStreetInFilter", parameters = { @ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "applicantUniqueIdCandidateNInFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "applicantUniqueIdCandidateEqFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "applicantUniqueIdCandidateNEqFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "applicantUniqueIdCandidateInFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "applicantWebsiteNInFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "applicantWebsiteEqFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "applicantWebsiteNEqFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "applicantWebsiteInFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "applicantWorkspaceIdGtFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "applicantWorkspaceIdNInFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "applicantWorkspaceIdLtEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "applicantWorkspaceIdLtFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "applicantWorkspaceIdEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "applicantWorkspaceIdNEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "applicantWorkspaceIdInFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "applicantWorkspaceIdBwFilter", parameters = {
				@ParamDef(name = "workspaceId_MIN", type = Integer.class),
				@ParamDef(name = "workspaceId_MAX", type = Integer.class) }),
		@FilterDef(name = "applicantWorkspaceIdGtEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "applicantProcessInstanceIdNInFilter", parameters = {
				@ParamDef(name = "processInstanceId", type = String.class) }),
		@FilterDef(name = "applicantProcessInstanceIdEqFilter", parameters = {
				@ParamDef(name = "processInstanceId", type = String.class) }),
		@FilterDef(name = "applicantProcessInstanceIdNEqFilter", parameters = {
				@ParamDef(name = "processInstanceId", type = String.class) }),
		@FilterDef(name = "applicantProcessInstanceIdInFilter", parameters = {
				@ParamDef(name = "processInstanceId", type = String.class) }),
		@FilterDef(name = "applicantWorkflowStageNInFilter", parameters = {
				@ParamDef(name = "workflowStage", type = String.class) }),
		@FilterDef(name = "applicantWorkflowStageEqFilter", parameters = {
				@ParamDef(name = "workflowStage", type = String.class) }),
		@FilterDef(name = "applicantWorkflowStageNEqFilter", parameters = {
				@ParamDef(name = "workflowStage", type = String.class) }),
		@FilterDef(name = "applicantWorkflowStageInFilter", parameters = {
				@ParamDef(name = "workflowStage", type = String.class) }) })
public class Applicant extends BaseEntitySaaS {

	@Basic
	@Column(name = "APPLICANT_SOURCE", columnDefinition = "ENUM('Internal-Referral', 'Job-Boards','Career-Sites','Recruitment-Agencies','Social-Media','Direct-Applications', 'Campus-Recruitment','Employee-Referral-Programs','Head-Hunted')", length = 26)
	private String applicantSource;

	@Size(max = 255)
	@Basic
	@Column(name = "RECRUITER")
	private String recruiter;

	@Size(max = 255)
	@Basic
	@Column(name = "REFERED_BY")
	private String referedBy;

	@Size(max = 50)
	@Basic
	@Column(name = "CITIZENSHIP")
	private String citizenship;

	@Size(max = 100)
	@Basic
	@Column(name = "APPLICANT_PHOTO")
	private String applicantPhoto;

	@Size(max = 100)
	@Basic
	@Column(name = "APPLICANT_RESUME")
	private String applicantResume;

	@Basic
	@Column(name = "APPLICANT_STATUS", columnDefinition = "ENUM('Applied', 'Interview to be scheduled', 'Interview scheduled', 'Interview in progress', 'Interview completed', 'Offer planned', 'BGC initiated', 'BGC approved', 'BGC rejected', 'Offer made', 'Offer accepted', 'Offer rejected', 'Hired', 'Rejected in interview','Rejected','NEW','1st Interview Cleared' , '1st Interview Rejected' , '2nd Interview Cleared' , '2nd Interview Rejected')", length = 21)
	private String applicantStatus;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "CITY", columnDefinition = "INT")
	private City city;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "COUNTRY", columnDefinition = "INT")
	private Country country;

	@Size(max = 255)
	@Basic
	@Column(name = "CURRENT_EMPLOYER")
	private String currentEmployer;

	@Size(max = 255)
	@Basic
	@Column(name = "CURRENT_JOB_TITLE")
	private String currentJobTitle;

	@Basic
	@Column(name = "CURRENT_SALARY", columnDefinition = "INT")
	private Integer currentSalary;

	@Basic
	@Column(columnDefinition = "ENUM", length = 3)
	private String gender;

	@Basic
	private boolean deleted;

	@Size(max = 50)
	@Basic
	@Column(name = "EMAIL_ID", length = 50, unique = true)
	private String emailId;

	@Basic
	@Column(name = "EXPECTED_SALARY", columnDefinition = "INT")
	private Integer expectedSalary;

	@Basic
	@Column(name = "EXPERIENCE_IN_YEARS", columnDefinition = "DOUBLE")
	private Double experienceInYears;

	@Size(max = 20)
	@Basic
	@Column(length = 20)
	private String fax;

	@Size(max = 255)
	@Basic
	@Column(name = "FIRST_NAME")
	private String firstName;

	@Size(max = 200)
	@Basic
	@Column(name = "FULL_NAME")
	private String fullName;

	@Size(max = 255)
	@Basic
	@Column(name = "HIGHEST_QUALIFICATION")
	private String highestQualification;

	@GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
	@Id
	@Column(columnDefinition = "INT")
	private Integer id;

	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@OneToMany(targetEntity = com.nouros.hrms.model.Interview.class, mappedBy = "applicant", cascade = CascadeType.MERGE)
	private Set<Interview> interviews = new HashSet<>();

	@Size(max = 255)
	@Basic
	@Column(name = "LAST_NAME")
	private String lastName;

	@Size(max = 20)
	@Basic
	@Column(length = 20)
	private String mobile;

//	@NotAudited
//	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
//	@JoinTable(name = "APPLICANT_SKILL_MAPPING", joinColumns = {
//			@JoinColumn(name = "APPLICANT_ID_FK") }, inverseJoinColumns = {
//					@JoinColumn(name = "SKILLS_ID_FK", referencedColumnName = "ID") })
//	private List<Skill> skills = new ArrayList<Skill>();

	@NotAudited
	@OneToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "APPLICANT_SKILL_MAPPING", joinColumns = @JoinColumn(name = "APPLICANT_ID_FK"), inverseJoinColumns = @JoinColumn(name = "SKILLS_ID_FK", referencedColumnName = "ID"))
	private List<Skill> skills = new ArrayList<>();

	@Size(max = 20)
	@Basic
	@Column(length = 20)
	private String phone;

	@Size(max = 20)
	@Basic
	@Column(name = "POSTAL_CODE", length = 20)
	private String postalCode;

	@Size(max = 255)
	@Basic
	@Column(name = "PRESENT_ADDRESS")
	private String presentAddress;

	@Size(max = 255)
	@Basic
	@Column(name = "STATE")
	private String state;

	@Size(max = 255)
	@Basic
	@Column(name = "SECONDARY_EMAIL")
	private String secondaryEmail;

	@Size(max = 1000)
	@Basic
	@Column(name = "SKILL_SET")
	private String skillSet;

	@Size(max = 255)
	@Basic
	private String street;

	@Size(max = 255)
	@Basic
	@Column(name = "APPLICANT_UNIQUE_ID")
	private String applicantUniqueId;

	@Size(max = 255)
	@Basic
	private String website;

	@Basic
	@Column(name = "WORKSPACE_ID", columnDefinition = "INT")
	private Integer workspaceId;

	@Basic
	@Column(name = "TEXT1", columnDefinition = "LONGTEXT")
	private String text1;

	@Size(max = 250)
	@Column(name = "TEXT2", length = 250)
	private String text2;

	@Size(max = 250)
	@Column(name = "TEXT3", length = 250)
	private String text3;

	@Size(max = 250)
	@Column(name = "TEXT4", length = 250)
	private String text4;

	@Size(max = 250)
	@Column(name = "TEXT5", length = 250)
	private String text5;

	@Size(max = 250)
	@Column(name = "TEXT6", length = 250)
	private String text6;

	@Size(max = 250)
	@Column(name = "TEXT7", length = 250)
	private String text7;

	@Size(max = 250)
	@Column(name = "TEXT8", length = 250)
	private String text8;

	@Size(max = 250)
	@Column(name = "TEXT9", length = 250)
	private String text9;

	@Size(max = 250)
	@Column(name = "TEXT10", length = 250)
	private String text10;

	@Size(max = 255)
	@Basic
	@Column(name = "MIDDLE_NAME", length = 255)
	private String middleName;

	@Size(max = 50)
	@Basic
	@Column(name = "ARABIC_FIRST_NAME", length = 50)
	private String arabicFirstName;

	@Size(max = 50)
	@Basic
	@Column(name = "ARABIC_LAST_NAME", length = 50)
	private String arabicLastName;

	@Size(max = 50)
	@Basic
	@Column(name = "ARABIC_MIDDLE_NAME", length = 50)
	private String arabicMiddleName;

	@Size(max = 255)
	@Basic
	@Column(name = "ARABIC_FULL_NAME", length = 255)
	private String arabicFullName;

	@Size(max = 255)
	@Basic
	@Column(name = "PREFERRED_NAME", length = 255)
	private String preferredName;

	@Basic
	@Column(name = "DATE_OF_BIRTH", length = 19)
	private Date dateOfBirth;

	@Size(max = 50)
	@Basic
	@Column(name = "COUNTRY_OF_RESIDENCE", length = 50)
	private String countryOfResidence;

	@Size(max = 100)
	@Basic
	@Column(name = "WORK_EMAIL_ADDRESS", length = 100)
	private String workEmailAddress;

	@Size(max = 100)
	@Basic
	@Column(name = "PRIMARY_SHORT_ADDRESS", length = 100)
	private String primaryShortAddress;

	@Size(max = 30)
	@Basic
	@Column(name = "PRIMARY_ADDRESS_BUILDING_NUMBER", length = 30)
	private String primaryAddressBuildingNumber;

	@Size(max = 100)
	@Basic
	@Column(name = "PRIMARY_ADDRESS_POSTAL_CODE", length = 100)
	private String primaryAddressPostalCode;

	@Basic
	@Column(name = "INTERNAL_REFERENCE")
	private boolean internalReference;

	@Size(max = 100)
	@Basic
	@Column(name = "REFERENCE_RELATION", length = 100)
	private String referenceRelation;

	@Basic
	@Column(name = "MARITAL_STATUS", columnDefinition = "ENUM('Single','Married','Divorced','Widowed','Other')")
	private String maritalStatus;

	@Basic
	@Column(name = "FIELD_OF_STUDY", length = 255)
	private String fieldOfStudy;

	@Size(max = 255)
	@Basic
	@Column(name = "UNIVERSITY", length = 255)
	private String university;

	@Size(max = 255)
	@Basic
	@Column(name = "GRADUATION_YEAR", length = 255)
	private String graduationYear;

	@Size(max = 255)
	@Basic
	@Column(name = "ATTACHMENT", length = 255)
	private String attachment;

	@Basic
	@Column(name = "FIRST_JOB")
	private boolean firstJob;

	@Basic
	@Column(name = "PROFILE_SUMMARY", columnDefinition = "LONGTEXT")
	private String profileSummary;

	@Size(max = 100)
	@Basic
	@Column(name = "PREFERRED_LOCATION", columnDefinition = "ENUM('Dammam Office')")
	private String preferredLocation;

	@Basic
	@Column(name = "CITIZENSHIP_STATUS", columnDefinition = "ENUM('Saudi citizen','Saudi permanent resident/Iqama holder','GCC','Others')")
	private String citizenshipStatus;

	@Basic
	@Column(name = "ELIGIBLE_TO_WORK_IN_SAUDI")
	private boolean eligibleToWorkInSaudi;

	@Basic
	@Column(name = "NEED_SPONSOR")
	private boolean needSponsor;

	@Size(max = 255)
	@Basic
	@Column(name = "DISABILITY_STATUS", length = 255)
	private String disabilityStatus;

	@Size(max = 300)
	@Basic
	@Column(name = "LINKEDIN_PROFILE", length = 300)
	private String linkedinProfile;

	@Basic
	@Column(name = "PUBLICATION", columnDefinition = "LONGTEXT")
	private String publication;

	@Basic
	@Column(name = "ADDITIONAL_INFORMATION", columnDefinition = "LONGTEXT")
	private String additionalInformation;

	@Basic
	@Column(name = "WILLING_TO_RELOCATE")
	private boolean willingToRelocate;

	@Basic
	@Column(columnDefinition = "INT", name = "NOTICE_PERIOD")
	private Integer noticePeriod;

	@Basic
	@Column(name = "EARLIEST_DATE_TO_JOIN", length = 19)
	private Date earliestDateToJoin;

	@Size(max = 50)
	@Basic
	@Column(name = "JOB_OPENING_ID", length = 50)
	private String jobOpeningId;

	@Basic
	@Column(name = "USER_ID", columnDefinition = "INT")
	private Integer userId;

	@Basic
	@Column(name = "PREVIOUSLY_WORKED_WITH_ARAMCO")
	private boolean previouslyWorkedWithAramco;

	@Basic
	@Column(name = "APPLICANT_TYPE", columnDefinition = "ENUM('Regular','Referred','Head-Hunted')")
	private String applicantType;

	public boolean isPreviouslyWorkedWithAramco() {
		return previouslyWorkedWithAramco;
	}

	public void setPreviouslyWorkedWithAramco(boolean previouslyWorkedWithAramco) {
		this.previouslyWorkedWithAramco = previouslyWorkedWithAramco;
	}

	public Integer getUserId() {
		return userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@Size(max = 100)
	@Basic
	@Column(name = "REFERED_BY_EMAIL_ID", length = 100)
	private String referedByEmailId;

	public String getReferedByEmailId() {
		return referedByEmailId;
	}

	public void setReferedByEmailId(String referedByEmailId) {
		this.referedByEmailId = referedByEmailId;
	}

	public String getLinkedinProfile() {
		return linkedinProfile;
	}

	public void setLinkedinProfile(String linkedinProfile) {
		this.linkedinProfile = linkedinProfile;
	}

	public String getPublication() {
		return publication;
	}

	public void setPublication(String publication) {
		this.publication = publication;
	}

	public String getAdditionalInformation() {
		return additionalInformation;
	}

	public String getJobOpeningId() {
		return jobOpeningId;
	}

	public void setJobOpeningId(String jobOpeningId) {
		this.jobOpeningId = jobOpeningId;
	}

	public void setAdditionalInformation(String additionalInformation) {
		this.additionalInformation = additionalInformation;
	}

	public boolean isWillingToRelocate() {
		return willingToRelocate;
	}

	public void setWillingToRelocate(boolean willingToRelocate) {
		this.willingToRelocate = willingToRelocate;
	}

	public Integer getNoticePeriod() {
		return noticePeriod;
	}

	public void setNoticePeriod(Integer noticePeriod) {
		this.noticePeriod = noticePeriod;
	}

	public Date getEarliestDateToJoin() {
		return earliestDateToJoin;
	}

	public void setEarliestDateToJoin(Date earliestDateToJoin) {
		this.earliestDateToJoin = earliestDateToJoin;
	}

	public String getMiddleName() {
		return middleName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}

	public String getArabicFirstName() {
		return arabicFirstName;
	}

	public void setArabicFirstName(String arabicFirstName) {
		this.arabicFirstName = arabicFirstName;
	}

	public String getArabicLastName() {
		return arabicLastName;
	}

	public void setArabicLastName(String arabicLastName) {
		this.arabicLastName = arabicLastName;
	}

	public String getArabicMiddleName() {
		return arabicMiddleName;
	}

	public void setArabicMiddleName(String arabicMiddleName) {
		this.arabicMiddleName = arabicMiddleName;
	}

	public String getArabicFullName() {
		return arabicFullName;
	}

	public void setArabicFullName(String arabicFullName) {
		this.arabicFullName = arabicFullName;
	}

	public String getPreferredName() {
		return preferredName;
	}

	public void setPreferredName(String preferredName) {
		this.preferredName = preferredName;
	}

	public Date getDateOfBirth() {
		return dateOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	public String getCountryOfResidence() {
		return countryOfResidence;
	}

	public void setCountryOfResidence(String countryOfResidence) {
		this.countryOfResidence = countryOfResidence;
	}

	public String getWorkEmailAddress() {
		return workEmailAddress;
	}

	public void setWorkEmailAddress(String workEmailAddress) {
		this.workEmailAddress = workEmailAddress;
	}

	public String getPrimaryShortAddress() {
		return primaryShortAddress;
	}

	public void setPrimaryShortAddress(String primaryShortAddress) {
		this.primaryShortAddress = primaryShortAddress;
	}

	public String getPrimaryAddressBuildingNumber() {
		return primaryAddressBuildingNumber;
	}

	public void setPrimaryAddressBuildingNumber(String primaryAddressBuildingNumber) {
		this.primaryAddressBuildingNumber = primaryAddressBuildingNumber;
	}

	public String getPrimaryAddressPostalCode() {
		return primaryAddressPostalCode;
	}

	public void setPrimaryAddressPostalCode(String primaryAddressPostalCode) {
		this.primaryAddressPostalCode = primaryAddressPostalCode;
	}

	public boolean isInternalReference() {
		return internalReference;
	}

	public String getFullName() {
		return fullName;
	}

	public void setFullName(String fullName) {
		this.fullName = fullName;
	}

	public void setInternalReference(boolean internalReference) {
		this.internalReference = internalReference;
	}

	public String getReferenceRelation() {
		return referenceRelation;
	}

	public void setReferenceRelation(String referenceRelation) {
		this.referenceRelation = referenceRelation;
	}

	public String getMaritalStatus() {
		return maritalStatus;
	}

	public void setMaritalStatus(String maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	public String getFieldOfStudy() {
		return fieldOfStudy;
	}

	public void setFieldOfStudy(String fieldOfStudy) {
		this.fieldOfStudy = fieldOfStudy;
	}

	public String getUniversity() {
		return university;
	}

	public void setUniversity(String university) {
		this.university = university;
	}

	public String getGraduationYear() {
		return graduationYear;
	}

	public void setGraduationYear(String graduationYear) {
		this.graduationYear = graduationYear;
	}

	public String getAttachment() {
		return attachment;
	}

	public void setAttachment(String attachment) {
		this.attachment = attachment;
	}

	public boolean isFirstJob() {
		return firstJob;
	}

	public void setFirstJob(boolean firstJob) {
		this.firstJob = firstJob;
	}

	public String getPreferredLocation() {
		return preferredLocation;
	}

	public void setPreferredLocation(String preferredLocation) {
		this.preferredLocation = preferredLocation;
	}

	public String getCitizenshipStatus() {
		return citizenshipStatus;
	}

	public void setCitizenshipStatus(String citizenshipStatus) {
		this.citizenshipStatus = citizenshipStatus;
	}

	public boolean isEligibleToWorkInSaudi() {
		return eligibleToWorkInSaudi;
	}

	public void setEligibleToWorkInSaudi(boolean eligibleToWorkInSaudi) {
		this.eligibleToWorkInSaudi = eligibleToWorkInSaudi;
	}

	public boolean isNeedSponsor() {
		return needSponsor;
	}

	public void setNeedSponsor(boolean needSponsor) {
		this.needSponsor = needSponsor;
	}

	public String getDisabilityStatus() {
		return disabilityStatus;
	}

	public void setDisabilityStatus(String disabilityStatus) {
		this.disabilityStatus = disabilityStatus;
	}

	public String getText1() {
		return text1;
	}

	public void setText1(String text1) {
		this.text1 = text1;
	}

	public String getText2() {
		return text2;
	}

	public void setText2(String text2) {
		this.text2 = text2;
	}

	public String getText3() {
		return text3;
	}

	public void setText3(String text3) {
		this.text3 = text3;
	}

	public String getText4() {
		return text4;
	}

	public void setText4(String text4) {
		this.text4 = text4;
	}

	public String getText5() {
		return text5;
	}

	public void setText5(String text5) {
		this.text5 = text5;
	}

	public String getText6() {
		return text6;
	}

	public void setText6(String text6) {
		this.text6 = text6;
	}

	public String getText7() {
		return text7;
	}

	public void setText7(String text7) {
		this.text7 = text7;
	}

	public String getText8() {
		return text8;
	}

	public void setText8(String text8) {
		this.text8 = text8;
	}

	public String getText9() {
		return text9;
	}

	public void setText9(String text9) {
		this.text9 = text9;
	}

	public String getText10() {
		return text10;
	}

	public void setText10(String text10) {
		this.text10 = text10;
	}

//	public List<Skill> getSkills() {
//		return skills;
//	}
//
//	public void setSkills(List<Skill> skills) {
//		this.skills = skills;
//		if (skills == null) {
//
//			this.skills = new ArrayList<>(); // Prevent null issues
//		} else {
//
//			this.skills = new ArrayList<>(skills); // Modifiable copy
//		}
//	}
	
    public List<Skill> getSkills() {
        if (skills == null) {
            skills = new ArrayList<>();
        }
        return skills;
    }
 
    public void setSkills(List<Skill> skills) {
        if (skills == null) {
            this.skills = new ArrayList<>();
        } else {
            this.skills = skills;
        }
    }

	public String getRecruiter() {
		return recruiter;
	}

	public void setRecruiter(String recruiter) {
		this.recruiter = recruiter;
	}

	public String getReferedBy() {
		return referedBy;
	}

	public void setReferedBy(String referedBy) {
		this.referedBy = referedBy;
	}

	public String getApplicantStatus() {
		return applicantStatus;
	}

	public void setApplicantStatus(String applicantStatus) {
		this.applicantStatus = applicantStatus;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public String getApplicantUniqueId() {
		return applicantUniqueId;
	}

	public void setApplicantUniqueId(String applicantUniqueId) {
		this.applicantUniqueId = applicantUniqueId;
	}

	public Applicant() {
	}

	public City getCity() {
		return city;
	}

	public void setCity(City city) {
		this.city = city;
	}

	public Country getCountry() {
		return country;
	}

	public void setCountry(Country country) {
		this.country = country;
	}

	public Applicant(Integer id) {
		this.id = id;
	}

	public String getApplicantSource() {
		return applicantSource;
	}

	public void setApplicantSource(String applicantSource) {
		this.applicantSource = applicantSource;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public String getCurrentEmployer() {
		return currentEmployer;
	}

	public void setCurrentEmployer(String currentEmployer) {
		this.currentEmployer = currentEmployer;
	}

	public String getCurrentJobTitle() {
		return currentJobTitle;
	}

	public void setCurrentJobTitle(String currentJobTitle) {
		this.currentJobTitle = currentJobTitle;
	}

	public Integer getCurrentSalary() {
		return currentSalary;
	}

	public void setCurrentSalary(Integer currentSalary) {
		this.currentSalary = currentSalary;
	}

	public boolean isDeleted() {
		return deleted;
	}

	public String getApplicantPhoto() {
		return applicantPhoto;
	}

	public void setApplicantPhoto(String applicantPhoto) {
		this.applicantPhoto = applicantPhoto;
	}

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	public String getEmailId() {
		return emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	public Integer getExpectedSalary() {
		return expectedSalary;
	}

	public void setExpectedSalary(Integer expectedSalary) {
		this.expectedSalary = expectedSalary;
	}

	public Double getExperienceInYears() {
		return experienceInYears;
	}

	public void setExperienceInYears(Double experienceInYears) {
		this.experienceInYears = experienceInYears;
	}

	public String getFax() {
		return fax;
	}

	public void setFax(String fax) {
		this.fax = fax;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getHighestQualification() {
		return highestQualification;
	}

	public void setHighestQualification(String highestQualification) {
		this.highestQualification = highestQualification;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Set<Interview> getInterviews() {
		return interviews;
	}

	public void setInterviews(Set<Interview> interviews) {
		this.interviews = interviews;
	}

	public String getCitizenship() {
		return citizenship;
	}

	public void setCitizenship(String citizenship) {
		this.citizenship = citizenship;
	}

//	public Set<JobApplication> getJobApplications() {
//        return jobApplications;
//    }
//
//    public void setJobApplications(Set<JobApplication> jobApplications) {
//        this.jobApplications = jobApplications;
//    }

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getMobile() {
		return mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

//    public Set<Offers> getOffers() {
//        return offers;
//    }
//
//    public void setOffers(Set<Offers> offers) {
//        this.offers = offers;
//    }

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getPostalCode() {
		return postalCode;
	}

	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}

	public String getPresentAddress() {
		return presentAddress;
	}

	public void setPresentAddress(String presentAddress) {
		this.presentAddress = presentAddress;
	}

	public String getSecondaryEmail() {
		return secondaryEmail;
	}

	public void setSecondaryEmail(String secondaryEmail) {
		this.secondaryEmail = secondaryEmail;
	}

	public String getSkillSet() {
		return skillSet;
	}

	public void setSkillSet(String skillSet) {
		this.skillSet = skillSet;
	}

	public String getStreet() {
		return street;
	}

	public void setStreet(String street) {
		this.street = street;
	}

	public String getWebsite() {
		return website;
	}

	public void setWebsite(String website) {
		this.website = website;
	}

	public Integer getWorkspaceId() {
		return workspaceId;
	}

	public void setWorkspaceId(Integer workspaceId) {
		this.workspaceId = workspaceId;
	}

	public String getApplicantResume() {
		return applicantResume;
	}

	public void setApplicantResume(String applicantResume) {
		this.applicantResume = applicantResume;
	}

	@Column(name = "PROCESS_INSTANCE_ID")
	private String processInstanceId;

	@Column(name = "WORKFLOW_STAGE")
	private String workflowStage;

	public String getProcessInstanceId() {
		return processInstanceId;
	}

	public void setProcessInstanceId(String processInstanceId) {
		this.processInstanceId = processInstanceId;
	}

	public String getWorkflowStage() {
		return workflowStage;
	}

	public void setWorkflowStage(String workflowStage) {
		this.workflowStage = workflowStage;
	}

	public List<WorkflowActions> getActions() {
		return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class)
				.getWorkflowActions(id, "Applicant");
	}

	public String getProfileSummary() {
		return profileSummary;
	}

	public void setProfileSummary(String profileSummary) {
		this.profileSummary = profileSummary;
	}

	public String getApplicantType() {
		return applicantType;
	}

	public void setApplicantType(String applicantType) {
		this.applicantType = applicantType;
	}

}

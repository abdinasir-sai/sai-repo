package com.nouros.hrms.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "APPRAISAL_CYCLES")
@Filters(value = { @Filter(name = "appraisalCyclesCommentsNInFilter", condition = "COMMENTS not in (:comments)"), @Filter(name = "appraisalCyclesCommentsEqFilter", condition = "COMMENTS = :comments"), @Filter(name = "appraisalCyclesCommentsNEqFilter", condition = "COMMENTS != :comments"), @Filter(name = "appraisalCyclesCommentsInFilter", condition = "COMMENTS in (:comments)"), @Filter(name = "appraisalCyclesEmployeeIdGtFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id)"), @Filter(name = "appraisalCyclesEmployeeIdNInFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID not in (:id)"), @Filter(name = "appraisalCyclesEmployeeIdLtEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID <= :id)"), @Filter(name = "appraisalCyclesEmployeeIdLtFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID < :id)"), @Filter(name = "appraisalCyclesEmployeeIdEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID = :id)"), @Filter(name = "appraisalCyclesEmployeeIdNEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID != :id)"), @Filter(name = "appraisalCyclesEmployeeIdInFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID in (:id)"), @Filter(name = "appraisalCyclesEmployeeIdBwFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id_MIN  AND EMPLOYEE.ID < :id_MAX )"), @Filter(name = "appraisalCyclesEmployeeIdGtEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID >= :id)"), @Filter(name = "appraisalCyclesEmployeeName2NInFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 not in (:name2)"), @Filter(name = "appraisalCyclesEmployeeName2EqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 = :name2)"), @Filter(name = "appraisalCyclesEmployeeName2NEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 != :name2)"), @Filter(name = "appraisalCyclesEmployeeName2InFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 in (:name2)"), @Filter(name = "appraisalCyclesEmployeeName1NInFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 not in (:name1)"), @Filter(name = "appraisalCyclesEmployeeName1EqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 = :name1)"), @Filter(name = "appraisalCyclesEmployeeName1NEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 != :name1)"), @Filter(name = "appraisalCyclesEmployeeName1InFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 in (:name1)"), @Filter(name = "appraisalCyclesEndDateGtFilter", condition = "END_DATE > (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesEndDateLtFilter", condition = "END_DATE < (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesEndDateBwFilter", condition = "END_DATE >(SELECT DATE_FORMAT(:endDate_MIN, '%Y-%m-%d')) AND END_DATE <(SELECT DATE_FORMAT(:endDate_MAX, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesIdGtFilter", condition = "ID > :id"), @Filter(name = "appraisalCyclesIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "appraisalCyclesIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "appraisalCyclesIdLtFilter", condition = "ID < :id"), @Filter(name = "appraisalCyclesIdEqFilter", condition = "ID = :id"), @Filter(name = "appraisalCyclesIdNEqFilter", condition = "ID != :id"), @Filter(name = "appraisalCyclesIdInFilter", condition = "ID in (:id)"), @Filter(name = "appraisalCyclesIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "appraisalCyclesIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "appraisalCyclesIdEqFilter", condition = "ID = :id"), @Filter(name = "appraisalCyclesRatingNInFilter", condition = "RATING not in (:rating)"), @Filter(name = "appraisalCyclesRatingEqFilter", condition = "RATING = :rating"), @Filter(name = "appraisalCyclesRatingNEqFilter", condition = "RATING != :rating"), @Filter(name = "appraisalCyclesRatingInFilter", condition = "RATING in (:rating)"), @Filter(name = "appraisalCyclesReviewPeriodEndDateGtFilter", condition = "REVIEW_PERIOD_END_DATE > (SELECT DATE_FORMAT(:reviewPeriodEndDate, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesReviewPeriodEndDateLtFilter", condition = "REVIEW_PERIOD_END_DATE < (SELECT DATE_FORMAT(:reviewPeriodEndDate, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesReviewPeriodEndDateBwFilter", condition = "REVIEW_PERIOD_END_DATE >(SELECT DATE_FORMAT(:reviewPeriodEndDate_MIN, '%Y-%m-%d')) AND REVIEW_PERIOD_END_DATE <(SELECT DATE_FORMAT(:reviewPeriodEndDate_MAX, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesReviewPeriodStartDateGtFilter", condition = "REVIEW_PERIOD_START_DATE > (SELECT DATE_FORMAT(:reviewPeriodStartDate, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesReviewPeriodStartDateLtFilter", condition = "REVIEW_PERIOD_START_DATE < (SELECT DATE_FORMAT(:reviewPeriodStartDate, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesReviewPeriodStartDateBwFilter", condition = "REVIEW_PERIOD_START_DATE >(SELECT DATE_FORMAT(:reviewPeriodStartDate_MIN, '%Y-%m-%d')) AND REVIEW_PERIOD_START_DATE <(SELECT DATE_FORMAT(:reviewPeriodStartDate_MAX, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesReviewPeriodTypeNInFilter", condition = "REVIEW_PERIOD_TYPE not in (:reviewPeriodType)"), @Filter(name = "appraisalCyclesReviewPeriodTypeEqFilter", condition = "REVIEW_PERIOD_TYPE = :reviewPeriodType"), @Filter(name = "appraisalCyclesReviewPeriodTypeNEqFilter", condition = "REVIEW_PERIOD_TYPE != :reviewPeriodType"), @Filter(name = "appraisalCyclesReviewPeriodTypeInFilter", condition = "REVIEW_PERIOD_TYPE in (:reviewPeriodType)"), @Filter(name = "appraisalCyclesStartDateGtFilter", condition = "START_DATE > (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesStartDateLtFilter", condition = "START_DATE < (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesStartDateBwFilter", condition = "START_DATE >(SELECT DATE_FORMAT(:startDate_MIN, '%Y-%m-%d')) AND START_DATE <(SELECT DATE_FORMAT(:startDate_MAX, '%Y-%m-%d'))"), @Filter(name = "appraisalCyclesStatusNInFilter", condition = "STATUS not in (:status)"), @Filter(name = "appraisalCyclesStatusEqFilter", condition = "STATUS = :status"), @Filter(name = "appraisalCyclesStatusNEqFilter", condition = "STATUS != :status"), @Filter(name = "appraisalCyclesStatusInFilter", condition = "STATUS in (:status)"), @Filter(name = "appraisalCyclesWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "appraisalCyclesWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "appraisalCyclesWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "appraisalCyclesWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "appraisalCyclesWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "appraisalCyclesWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "appraisalCyclesWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "appraisalCyclesWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "appraisalCyclesWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "appraisalCyclesWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "appraisalCyclesCommentsNInFilter", parameters = { @ParamDef(name = "comments", type = String.class) }), @FilterDef(name = "appraisalCyclesCommentsEqFilter", parameters = { @ParamDef(name = "comments", type = String.class) }), @FilterDef(name = "appraisalCyclesCommentsNEqFilter", parameters = { @ParamDef(name = "comments", type = String.class) }), @FilterDef(name = "appraisalCyclesCommentsInFilter", parameters = { @ParamDef(name = "comments", type = String.class) }), @FilterDef(name = "appraisalCyclesEmployeeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesEmployeeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesEmployeeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesEmployeeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesEmployeeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesEmployeeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesEmployeeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesEmployeeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "appraisalCyclesEmployeeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesEmployeeName2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "appraisalCyclesEmployeeName2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "appraisalCyclesEmployeeName2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "appraisalCyclesEmployeeName2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "appraisalCyclesEmployeeName1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "appraisalCyclesEmployeeName1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "appraisalCyclesEmployeeName1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "appraisalCyclesEmployeeName1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "appraisalCyclesEndDateGtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "appraisalCyclesEndDateLtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "appraisalCyclesEndDateBwFilter", parameters = { @ParamDef(name = "endDate_MIN", type = String.class), @ParamDef(name = "endDate_MAX", type = String.class) }), @FilterDef(name = "appraisalCyclesIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "appraisalCyclesIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "appraisalCyclesRatingNInFilter", parameters = { @ParamDef(name = "rating", type = String.class) }), @FilterDef(name = "appraisalCyclesRatingEqFilter", parameters = { @ParamDef(name = "rating", type = String.class) }), @FilterDef(name = "appraisalCyclesRatingNEqFilter", parameters = { @ParamDef(name = "rating", type = String.class) }), @FilterDef(name = "appraisalCyclesRatingInFilter", parameters = { @ParamDef(name = "rating", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodEndDateGtFilter", parameters = { @ParamDef(name = "reviewPeriodEndDate", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodEndDateLtFilter", parameters = { @ParamDef(name = "reviewPeriodEndDate", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodEndDateBwFilter", parameters = { @ParamDef(name = "reviewPeriodEndDate_MIN", type = String.class), @ParamDef(name = "reviewPeriodEndDate_MAX", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodStartDateGtFilter", parameters = { @ParamDef(name = "reviewPeriodStartDate", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodStartDateLtFilter", parameters = { @ParamDef(name = "reviewPeriodStartDate", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodStartDateBwFilter", parameters = { @ParamDef(name = "reviewPeriodStartDate_MIN", type = String.class), @ParamDef(name = "reviewPeriodStartDate_MAX", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodTypeNInFilter", parameters = { @ParamDef(name = "reviewPeriodType", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodTypeEqFilter", parameters = { @ParamDef(name = "reviewPeriodType", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodTypeNEqFilter", parameters = { @ParamDef(name = "reviewPeriodType", type = String.class) }), @FilterDef(name = "appraisalCyclesReviewPeriodTypeInFilter", parameters = { @ParamDef(name = "reviewPeriodType", type = String.class) }), @FilterDef(name = "appraisalCyclesStartDateGtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "appraisalCyclesStartDateLtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "appraisalCyclesStartDateBwFilter", parameters = { @ParamDef(name = "startDate_MIN", type = String.class), @ParamDef(name = "startDate_MAX", type = String.class) }), @FilterDef(name = "appraisalCyclesStatusNInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "appraisalCyclesStatusEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "appraisalCyclesStatusNEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "appraisalCyclesStatusInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "appraisalCyclesWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "appraisalCyclesWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "appraisalCyclesWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "appraisalCyclesWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "appraisalCyclesWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "appraisalCyclesWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "appraisalCyclesWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "appraisalCyclesWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "appraisalCyclesWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class AppraisalCycles extends BaseEntitySaaS{

    @Size(max = 200)
    @Basic
    @Column(length = 200)
    private String comments;
    
    @Size(max = 100)
    @Basic
    @Column(name = "NAME",length = 100)
    private String name;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "EMPLOYEE_ID", columnDefinition = "INT")
    private Employee employee;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.EmployeeReview.class, mappedBy = "appraisalCycles", cascade = CascadeType.MERGE)
    private Set<EmployeeReview> employeeReviews = new HashSet<>();

    @Basic
    @Column(name = "END_DATE", length = 19)
    private Date endDate;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(columnDefinition = "ENUM('Needs Improvement','Outstanding','Excellent','Satisfactory','Unsatisfactory')", length = 17)
    private String rating;

    @Basic
    @Column(name = "REVIEW_PERIOD_END_DATE", length = 19)
    private Date reviewPeriodEndDate;

    @Basic
    @Column(name = "REVIEW_PERIOD_START_DATE", length = 19)
    private Date reviewPeriodStartDate;

    @Basic
    @Column(name = "REVIEW_PERIOD_TYPE", columnDefinition = "ENUM('Monthly','Quarterly','Half-Yearly','Yearly')", length = 11)
    private String reviewPeriodType;

    @Basic
    @Column(name = "START_DATE", length = 19)
    private Date startDate;

    @Basic
    @Column(columnDefinition = "ENUM('Start','Started')", length = 7)
    private String status;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public AppraisalCycles() {
    }

    public AppraisalCycles(Integer id) {
        this.id = id;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public Employee getEmployee() {
        return employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    public Set<EmployeeReview> getEmployeeReviews() {
        return employeeReviews;
    }

    public void setEmployeeReviews(Set<EmployeeReview> employeeReviews) {
        this.employeeReviews = employeeReviews;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getRating() {
        return rating;
    }

    public void setRating(String rating) {
        this.rating = rating;
    }

    public Date getReviewPeriodEndDate() {
        return reviewPeriodEndDate;
    }

    public void setReviewPeriodEndDate(Date reviewPeriodEndDate) {
        this.reviewPeriodEndDate = reviewPeriodEndDate;
    }

    public Date getReviewPeriodStartDate() {
        return reviewPeriodStartDate;
    }

    public void setReviewPeriodStartDate(Date reviewPeriodStartDate) {
        this.reviewPeriodStartDate = reviewPeriodStartDate;
    }

    public String getReviewPeriodType() {
        return reviewPeriodType;
    }

    public void setReviewPeriodType(String reviewPeriodType) {
        this.reviewPeriodType = reviewPeriodType;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
    
    
}

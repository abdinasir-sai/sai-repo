package com.nouros.hrms.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "GOALS")
@Filters(value = { @Filter(name = "goalsAllignmentNInFilter", condition = "ALLIGNMENT not in (:allignment)"), @Filter(name = "goalsAllignmentEqFilter", condition = "ALLIGNMENT = :allignment"), @Filter(name = "goalsAllignmentNEqFilter", condition = "ALLIGNMENT != :allignment"), @Filter(name = "goalsAllignmentInFilter", condition = "ALLIGNMENT in (:allignment)"), @Filter(name = "goalsDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "goalsDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "goalsDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "goalsDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "goalsEndDateGtFilter", condition = "END_DATE > (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "goalsEndDateLtFilter", condition = "END_DATE < (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "goalsEndDateBwFilter", condition = "END_DATE >(SELECT DATE_FORMAT(:endDate_MIN, '%Y-%m-%d')) AND END_DATE <(SELECT DATE_FORMAT(:endDate_MAX, '%Y-%m-%d'))"), @Filter(name = "goalsGoalsPriorityNInFilter", condition = "GOALS_PRIORITY not in (:goalsPriority)"), @Filter(name = "goalsGoalsPriorityEqFilter", condition = "GOALS_PRIORITY = :goalsPriority"), @Filter(name = "goalsGoalsPriorityNEqFilter", condition = "GOALS_PRIORITY != :goalsPriority"), @Filter(name = "goalsGoalsPriorityInFilter", condition = "GOALS_PRIORITY in (:goalsPriority)"), @Filter(name = "goalsIdGtFilter", condition = "ID > :id"), @Filter(name = "goalsIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "goalsIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "goalsIdLtFilter", condition = "ID < :id"), @Filter(name = "goalsIdEqFilter", condition = "ID = :id"), @Filter(name = "goalsIdNEqFilter", condition = "ID != :id"), @Filter(name = "goalsIdInFilter", condition = "ID in (:id)"), @Filter(name = "goalsIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "goalsIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "goalsIdEqFilter", condition = "ID = :id"), @Filter(name = "goalsProgressGtFilter", condition = "PROGRESS > :progress"), @Filter(name = "goalsProgressNInFilter", condition = "PROGRESS not in (:progress)"), @Filter(name = "goalsProgressLtEqFilter", condition = "PROGRESS <= :progress"), @Filter(name = "goalsProgressLtFilter", condition = "PROGRESS < :progress"), @Filter(name = "goalsProgressEqFilter", condition = "PROGRESS = :progress"), @Filter(name = "goalsProgressNEqFilter", condition = "PROGRESS != :progress"), @Filter(name = "goalsProgressInFilter", condition = "PROGRESS in (:progress)"), @Filter(name = "goalsProgressBwFilter", condition = "PROGRESS > :progress_MIN  AND PROGRESS < :progress_MAX"), @Filter(name = "goalsProgressGtEqFilter", condition = "PROGRESS >= :progress"), @Filter(name = "goalsProgressEqFilter", condition = "PROGRESS = :progress"), @Filter(name = "goalsStartDateGtFilter", condition = "START_DATE > (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "goalsStartDateLtFilter", condition = "START_DATE < (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "goalsStartDateBwFilter", condition = "START_DATE >(SELECT DATE_FORMAT(:startDate_MIN, '%Y-%m-%d')) AND START_DATE <(SELECT DATE_FORMAT(:startDate_MAX, '%Y-%m-%d'))"), @Filter(name = "goalsStatusNInFilter", condition = "STATUS not in (:status)"), @Filter(name = "goalsStatusEqFilter", condition = "STATUS = :status"), @Filter(name = "goalsStatusNEqFilter", condition = "STATUS != :status"), @Filter(name = "goalsStatusInFilter", condition = "STATUS in (:status)"), @Filter(name = "goalsWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "goalsWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "goalsWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "goalsWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "goalsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "goalsWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "goalsWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "goalsWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "goalsWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "goalsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "goalsAllignmentNInFilter", parameters = { @ParamDef(name = "allignment", type = String.class) }), @FilterDef(name = "goalsAllignmentEqFilter", parameters = { @ParamDef(name = "allignment", type = String.class) }), @FilterDef(name = "goalsAllignmentNEqFilter", parameters = { @ParamDef(name = "allignment", type = String.class) }), @FilterDef(name = "goalsAllignmentInFilter", parameters = { @ParamDef(name = "allignment", type = String.class) }), @FilterDef(name = "goalsDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "goalsDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "goalsDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "goalsDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "goalsEndDateGtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "goalsEndDateLtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "goalsEndDateBwFilter", parameters = { @ParamDef(name = "endDate_MIN", type = String.class), @ParamDef(name = "endDate_MAX", type = String.class) }), @FilterDef(name = "goalsGoalsPriorityNInFilter", parameters = { @ParamDef(name = "goalsPriority", type = String.class) }), @FilterDef(name = "goalsGoalsPriorityEqFilter", parameters = { @ParamDef(name = "goalsPriority", type = String.class) }), @FilterDef(name = "goalsGoalsPriorityNEqFilter", parameters = { @ParamDef(name = "goalsPriority", type = String.class) }), @FilterDef(name = "goalsGoalsPriorityInFilter", parameters = { @ParamDef(name = "goalsPriority", type = String.class) }), @FilterDef(name = "goalsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "goalsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "goalsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "goalsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "goalsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "goalsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "goalsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "goalsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "goalsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "goalsProgressGtFilter", parameters = { @ParamDef(name = "progress", type = Double.class) }), @FilterDef(name = "goalsProgressNInFilter", parameters = { @ParamDef(name = "progress", type = Double.class) }), @FilterDef(name = "goalsProgressLtEqFilter", parameters = { @ParamDef(name = "progress", type = Double.class) }), @FilterDef(name = "goalsProgressLtFilter", parameters = { @ParamDef(name = "progress", type = Double.class) }), @FilterDef(name = "goalsProgressEqFilter", parameters = { @ParamDef(name = "progress", type = Double.class) }), @FilterDef(name = "goalsProgressNEqFilter", parameters = { @ParamDef(name = "progress", type = Double.class) }), @FilterDef(name = "goalsProgressInFilter", parameters = { @ParamDef(name = "progress", type = Double.class) }), @FilterDef(name = "goalsProgressBwFilter", parameters = { @ParamDef(name = "progress_MIN", type = Double.class), @ParamDef(name = "progress_MAX", type = Double.class) }), @FilterDef(name = "goalsProgressGtEqFilter", parameters = { @ParamDef(name = "progress", type = Double.class) }), @FilterDef(name = "goalsStartDateGtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "goalsStartDateLtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "goalsStartDateBwFilter", parameters = { @ParamDef(name = "startDate_MIN", type = String.class), @ParamDef(name = "startDate_MAX", type = String.class) }), @FilterDef(name = "goalsStatusNInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "goalsStatusEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "goalsStatusNEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "goalsStatusInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "goalsWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "goalsWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "goalsWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "goalsWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "goalsWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "goalsWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "goalsWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "goalsWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "goalsWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Goals extends BaseEntitySaaS{

    @Size(max = 200)
    @Basic
    @Column(length = 200)
    private String allignment;
    
    @Size(max = 100)
    @Basic
    @Column(name = "NAME",length = 100)
    private String name;

    @Basic
    @Column(columnDefinition = "LONGTEXT")
    private String description;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.EmployeeGoalsDetails.class, mappedBy = "goals", cascade = CascadeType.MERGE)
    private Set<EmployeeGoalsDetails> employeeGoalsMappings = new HashSet<>();

    @Basic
    @Column(name = "END_DATE", length = 19)
    private Date endDate;

    @Basic
    @Column(name = "GOALS_PRIORITY", columnDefinition = "ENUM", length = 7)
    private String goalsPriority;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    private Double progress;

    @Basic
    @Column(name = "START_DATE", length = 19)
    private Date startDate;

    @Basic
    @Column(columnDefinition = "ENUM", length = 15)
    private String status;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public Goals() {
    }

    public Goals(Integer id) {
        this.id = id;
    }

    public String getAllignment() {
        return allignment;
    }

    public void setAllignment(String allignment) {
        this.allignment = allignment;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Set<EmployeeGoalsDetails> getEmployeeGoalsMappings() {
        return employeeGoalsMappings;
    }

    public void setEmployeeGoalsMappings(Set<EmployeeGoalsDetails> employeeGoalsMappings) {
        this.employeeGoalsMappings = employeeGoalsMappings;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public String getGoalsPriority() {
        return goalsPriority;
    }

    public void setGoalsPriority(String goalsPriority) {
        this.goalsPriority = goalsPriority;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Double getProgress() {
        return progress;
    }

    public void setProgress(Double progress) {
        this.progress = progress;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
    
}

package com.nouros.hrms.model;

import java.util.Date;
import java.util.List;

import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Audited
@Table(name = "INTERVIEW")
//@Filters(value = { @Filter(name = "interviewApplicantCountryNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY not in (:country)"), @Filter(name = "interviewApplicantCountryEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY = :country)"), @Filter(name = "interviewApplicantCountryNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY != :country)"), @Filter(name = "interviewApplicantCountryInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY in (:country)"), @Filter(name = "interviewApplicantCurrentSalaryGtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY > :currentSalary)"), @Filter(name = "interviewApplicantCurrentSalaryNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY not in (:currentSalary)"), @Filter(name = "interviewApplicantCurrentSalaryLtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY <= :currentSalary)"), @Filter(name = "interviewApplicantCurrentSalaryLtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY < :currentSalary)"), @Filter(name = "interviewApplicantCurrentSalaryEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY = :currentSalary)"), @Filter(name = "interviewApplicantCurrentSalaryNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY != :currentSalary)"), @Filter(name = "interviewApplicantCurrentSalaryInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY in (:currentSalary)"), @Filter(name = "interviewApplicantCurrentSalaryBwFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY > :currentSalary_MIN  AND APPLICANT.CURRENT_SALARY < :currentSalary_MAX )"), @Filter(name = "interviewApplicantCurrentSalaryGtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY >= :currentSalary)"), @Filter(name = "interviewApplicantPostalCodeNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE not in (:postalCode)"), @Filter(name = "interviewApplicantPostalCodeEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE = :postalCode)"), @Filter(name = "interviewApplicantPostalCodeNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE != :postalCode)"), @Filter(name = "interviewApplicantPostalCodeInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE in (:postalCode)"), @Filter(name = "interviewApplicantApplciantSourceNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE not in (:applciantSource)"), @Filter(name = "interviewApplicantApplciantSourceEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE = :applciantSource)"), @Filter(name = "interviewApplicantApplciantSourceNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE != :applciantSource)"), @Filter(name = "interviewApplicantApplciantSourceInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE in (:applciantSource)"), @Filter(name = "interviewApplicantEmailIdNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID not in (:emailId)"), @Filter(name = "interviewApplicantEmailIdEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID = :emailId)"), @Filter(name = "interviewApplicantEmailIdNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID != :emailId)"), @Filter(name = "interviewApplicantEmailIdInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID in (:emailId)"), @Filter(name = "interviewApplicantCandidateOwnerNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER not in (:candidateOwner)"), @Filter(name = "interviewApplicantCandidateOwnerEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER = :candidateOwner)"), @Filter(name = "interviewApplicantCandidateOwnerNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER != :candidateOwner)"), @Filter(name = "interviewApplicantCandidateOwnerInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER in (:candidateOwner)"), @Filter(name = "interviewApplicantProvinceNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE not in (:province)"), @Filter(name = "interviewApplicantProvinceEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE = :province)"), @Filter(name = "interviewApplicantProvinceNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE != :province)"), @Filter(name = "interviewApplicantProvinceInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE in (:province)"), @Filter(name = "interviewApplicantExpectedSalaryGtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY > :expectedSalary)"), @Filter(name = "interviewApplicantExpectedSalaryNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY not in (:expectedSalary)"), @Filter(name = "interviewApplicantExpectedSalaryLtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY <= :expectedSalary)"), @Filter(name = "interviewApplicantExpectedSalaryLtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY < :expectedSalary)"), @Filter(name = "interviewApplicantExpectedSalaryEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY = :expectedSalary)"), @Filter(name = "interviewApplicantExpectedSalaryNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY != :expectedSalary)"), @Filter(name = "interviewApplicantExpectedSalaryInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY in (:expectedSalary)"), @Filter(name = "interviewApplicantExpectedSalaryBwFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY > :expectedSalary_MIN  AND APPLICANT.EXPECTED_SALARY < :expectedSalary_MAX )"), @Filter(name = "interviewApplicantExpectedSalaryGtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY >= :expectedSalary)"), @Filter(name = "interviewApplicantIdGtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID > :id)"), @Filter(name = "interviewApplicantIdNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID not in (:id)"), @Filter(name = "interviewApplicantIdLtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID <= :id)"), @Filter(name = "interviewApplicantIdLtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID < :id)"), @Filter(name = "interviewApplicantIdEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID = :id)"), @Filter(name = "interviewApplicantIdNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID != :id)"), @Filter(name = "interviewApplicantIdInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID in (:id)"), @Filter(name = "interviewApplicantIdBwFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID > :id_MIN  AND APPLICANT.ID < :id_MAX )"), @Filter(name = "interviewApplicantIdGtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID >= :id)"), @Filter(name = "interviewApplicantFaxNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX not in (:fax)"), @Filter(name = "interviewApplicantFaxEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX = :fax)"), @Filter(name = "interviewApplicantFaxNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX != :fax)"), @Filter(name = "interviewApplicantFaxInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX in (:fax)"), @Filter(name = "interviewApplicantCurrentEmployerNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER not in (:currentEmployer)"), @Filter(name = "interviewApplicantCurrentEmployerEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER = :currentEmployer)"), @Filter(name = "interviewApplicantCurrentEmployerNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER != :currentEmployer)"), @Filter(name = "interviewApplicantCurrentEmployerInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER in (:currentEmployer)"), @Filter(name = "interviewApplicantCandidateSourceNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE not in (:candidateSource)"), @Filter(name = "interviewApplicantCandidateSourceEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE = :candidateSource)"), @Filter(name = "interviewApplicantCandidateSourceNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE != :candidateSource)"), @Filter(name = "interviewApplicantCandidateSourceInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE in (:candidateSource)"), @Filter(name = "interviewApplicantFirstNameNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME not in (:firstName)"), @Filter(name = "interviewApplicantFirstNameEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME = :firstName)"), @Filter(name = "interviewApplicantFirstNameNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME != :firstName)"), @Filter(name = "interviewApplicantFirstNameInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME in (:firstName)"), @Filter(name = "interviewApplicantPhoneNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE not in (:phone)"), @Filter(name = "interviewApplicantPhoneEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE = :phone)"), @Filter(name = "interviewApplicantPhoneNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE != :phone)"), @Filter(name = "interviewApplicantPhoneInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE in (:phone)"), @Filter(name = "interviewApplicantUniqueIdCandidateNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE not in (:uniqueIdCandidate)"), @Filter(name = "interviewApplicantUniqueIdCandidateEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE = :uniqueIdCandidate)"), @Filter(name = "interviewApplicantUniqueIdCandidateNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE != :uniqueIdCandidate)"), @Filter(name = "interviewApplicantUniqueIdCandidateInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE in (:uniqueIdCandidate)"), @Filter(name = "interviewApplicantLastNameNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME not in (:lastName)"), @Filter(name = "interviewApplicantLastNameEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME = :lastName)"), @Filter(name = "interviewApplicantLastNameNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME != :lastName)"), @Filter(name = "interviewApplicantLastNameInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME in (:lastName)"), @Filter(name = "interviewApplicantSecondaryEmailNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL not in (:secondaryEmail)"), @Filter(name = "interviewApplicantSecondaryEmailEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL = :secondaryEmail)"), @Filter(name = "interviewApplicantSecondaryEmailNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL != :secondaryEmail)"), @Filter(name = "interviewApplicantSecondaryEmailInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL in (:secondaryEmail)"), @Filter(name = "interviewApplicantHighestQualificationNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION not in (:highestQualification)"), @Filter(name = "interviewApplicantHighestQualificationEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION = :highestQualification)"), @Filter(name = "interviewApplicantHighestQualificationNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION != :highestQualification)"), @Filter(name = "interviewApplicantHighestQualificationInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION in (:highestQualification)"), @Filter(name = "interviewApplicantCityNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY not in (:city)"), @Filter(name = "interviewApplicantCityEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY = :city)"), @Filter(name = "interviewApplicantCityNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY != :city)"), @Filter(name = "interviewApplicantCityInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY in (:city)"), @Filter(name = "interviewApplicantCandidateStatusNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS not in (:candidateStatus)"), @Filter(name = "interviewApplicantCandidateStatusEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS = :candidateStatus)"), @Filter(name = "interviewApplicantCandidateStatusNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS != :candidateStatus)"), @Filter(name = "interviewApplicantCandidateStatusInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS in (:candidateStatus)"), @Filter(name = "interviewApplicantExperienceInYearsGtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS > :experienceInYears)"), @Filter(name = "interviewApplicantExperienceInYearsNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS not in (:experienceInYears)"), @Filter(name = "interviewApplicantExperienceInYearsLtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS <= :experienceInYears)"), @Filter(name = "interviewApplicantExperienceInYearsLtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS < :experienceInYears)"), @Filter(name = "interviewApplicantExperienceInYearsEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS = :experienceInYears)"), @Filter(name = "interviewApplicantExperienceInYearsNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS != :experienceInYears)"), @Filter(name = "interviewApplicantExperienceInYearsInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS in (:experienceInYears)"), @Filter(name = "interviewApplicantExperienceInYearsBwFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS > :experienceInYears_MIN  AND APPLICANT.EXPERIENCE_IN_YEARS < :experienceInYears_MAX )"), @Filter(name = "interviewApplicantExperienceInYearsGtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS >= :experienceInYears)"), @Filter(name = "interviewApplicantPresentAddressNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS not in (:presentAddress)"), @Filter(name = "interviewApplicantPresentAddressEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS = :presentAddress)"), @Filter(name = "interviewApplicantPresentAddressNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS != :presentAddress)"), @Filter(name = "interviewApplicantPresentAddressInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS in (:presentAddress)"), @Filter(name = "interviewApplicantStreetNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET not in (:street)"), @Filter(name = "interviewApplicantStreetEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET = :street)"), @Filter(name = "interviewApplicantStreetNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET != :street)"), @Filter(name = "interviewApplicantStreetInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET in (:street)"), @Filter(name = "interviewApplicantCurrentJobTitleNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE not in (:currentJobTitle)"), @Filter(name = "interviewApplicantCurrentJobTitleEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE = :currentJobTitle)"), @Filter(name = "interviewApplicantCurrentJobTitleNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE != :currentJobTitle)"), @Filter(name = "interviewApplicantCurrentJobTitleInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE in (:currentJobTitle)"), @Filter(name = "interviewApplicantWebsiteNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE not in (:website)"), @Filter(name = "interviewApplicantWebsiteEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE = :website)"), @Filter(name = "interviewApplicantWebsiteNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE != :website)"), @Filter(name = "interviewApplicantWebsiteInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE in (:website)"), @Filter(name = "interviewApplicantSkillSetNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET not in (:skillSet)"), @Filter(name = "interviewApplicantSkillSetEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET = :skillSet)"), @Filter(name = "interviewApplicantSkillSetNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET != :skillSet)"), @Filter(name = "interviewApplicantSkillSetInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET in (:skillSet)"), @Filter(name = "interviewApplicantMobileNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE not in (:mobile)"), @Filter(name = "interviewApplicantMobileEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE = :mobile)"), @Filter(name = "interviewApplicantMobileNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE != :mobile)"), @Filter(name = "interviewApplicantMobileInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE in (:mobile)"), @Filter(name = "interviewCommentsForInterviewersNInFilter", condition = "COMMENTS_FOR_INTERVIEWERS not in (:commentsForInterviewers)"), @Filter(name = "interviewCommentsForInterviewersEqFilter", condition = "COMMENTS_FOR_INTERVIEWERS = :commentsForInterviewers"), @Filter(name = "interviewCommentsForInterviewersNEqFilter", condition = "COMMENTS_FOR_INTERVIEWERS != :commentsForInterviewers"), @Filter(name = "interviewCommentsForInterviewersInFilter", condition = "COMMENTS_FOR_INTERVIEWERS in (:commentsForInterviewers)"), @Filter(name = "interviewDepartmentDepartmentCodeNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE not in (:departmentCode)"), @Filter(name = "interviewDepartmentDepartmentCodeEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE = :departmentCode)"), @Filter(name = "interviewDepartmentDepartmentCodeNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE != :departmentCode)"), @Filter(name = "interviewDepartmentDepartmentCodeInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE in (:departmentCode)"), @Filter(name = "interviewDepartmentDepartmentLeadGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD > :departmentLead)"), @Filter(name = "interviewDepartmentDepartmentLeadNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD not in (:departmentLead)"), @Filter(name = "interviewDepartmentDepartmentLeadLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD <= :departmentLead)"), @Filter(name = "interviewDepartmentDepartmentLeadLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD < :departmentLead)"), @Filter(name = "interviewDepartmentDepartmentLeadEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD = :departmentLead)"), @Filter(name = "interviewDepartmentDepartmentLeadNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD != :departmentLead)"), @Filter(name = "interviewDepartmentDepartmentLeadInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD in (:departmentLead)"), @Filter(name = "interviewDepartmentDepartmentLeadBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD > :departmentLead_MIN  AND DEPARTMENT.DEPARTMENT_LEAD < :departmentLead_MAX )"), @Filter(name = "interviewDepartmentDepartmentLeadGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD >= :departmentLead)"), @Filter(name = "interviewDepartmentIdGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id)"), @Filter(name = "interviewDepartmentIdNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID not in (:id)"), @Filter(name = "interviewDepartmentIdLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID <= :id)"), @Filter(name = "interviewDepartmentIdLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID < :id)"), @Filter(name = "interviewDepartmentIdEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID = :id)"), @Filter(name = "interviewDepartmentIdNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID != :id)"), @Filter(name = "interviewDepartmentIdInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID in (:id)"), @Filter(name = "interviewDepartmentIdBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id_MIN  AND DEPARTMENT.ID < :id_MAX )"), @Filter(name = "interviewDepartmentIdGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID >= :id)"), @Filter(name = "interviewDepartmentParentDepartmentGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT > :parentDepartment)"), @Filter(name = "interviewDepartmentParentDepartmentNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT not in (:parentDepartment)"), @Filter(name = "interviewDepartmentParentDepartmentLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT <= :parentDepartment)"), @Filter(name = "interviewDepartmentParentDepartmentLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT < :parentDepartment)"), @Filter(name = "interviewDepartmentParentDepartmentEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT = :parentDepartment)"), @Filter(name = "interviewDepartmentParentDepartmentNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT != :parentDepartment)"), @Filter(name = "interviewDepartmentParentDepartmentInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT in (:parentDepartment)"), @Filter(name = "interviewDepartmentParentDepartmentBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT > :parentDepartment_MIN  AND DEPARTMENT.PARENT_DEPARTMENT < :parentDepartment_MAX )"), @Filter(name = "interviewDepartmentParentDepartmentGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT >= :parentDepartment)"), @Filter(name = "interviewDepartmentMailAliasNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS not in (:mailAlias)"), @Filter(name = "interviewDepartmentMailAliasEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS = :mailAlias)"), @Filter(name = "interviewDepartmentMailAliasNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS != :mailAlias)"), @Filter(name = "interviewDepartmentMailAliasInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS in (:mailAlias)"), @Filter(name = "interviewDepartmentNameNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME not in (:name)"), @Filter(name = "interviewDepartmentNameEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME = :name)"), @Filter(name = "interviewDepartmentNameNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME != :name)"), @Filter(name = "interviewDepartmentNameInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME in (:name)"), @Filter(name = "interviewDepartmentApprovalStatusNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "interviewDepartmentApprovalStatusEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS = :approvalStatus)"), @Filter(name = "interviewDepartmentApprovalStatusNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS != :approvalStatus)"), @Filter(name = "interviewDepartmentApprovalStatusInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "interviewDepartmentNameNInFilter", condition = "DEPARTMENT_NAME not in (:departmentName)"), @Filter(name = "interviewDepartmentNameEqFilter", condition = "DEPARTMENT_NAME = :departmentName"), @Filter(name = "interviewDepartmentNameNEqFilter", condition = "DEPARTMENT_NAME != :departmentName"), @Filter(name = "interviewDepartmentNameInFilter", condition = "DEPARTMENT_NAME in (:departmentName)"), @Filter(name = "interviewEmployeePersonalEmailAddressNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_EMAIL_ADDRESS not in (:personalEmailAddress)"), @Filter(name = "interviewEmployeePersonalEmailAddressEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_EMAIL_ADDRESS = :personalEmailAddress)"), @Filter(name = "interviewEmployeePersonalEmailAddressNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_EMAIL_ADDRESS != :personalEmailAddress)"), @Filter(name = "interviewEmployeePersonalEmailAddressInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_EMAIL_ADDRESS in (:personalEmailAddress)"), @Filter(name = "interviewEmployeeCountryNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY not in (:country)"), @Filter(name = "interviewEmployeeCountryEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY = :country)"), @Filter(name = "interviewEmployeeCountryNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY != :country)"), @Filter(name = "interviewEmployeeCountryInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY in (:country)"), @Filter(name = "interviewEmployeeAnnualSalaryGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ANNUAL_SALARY > :annualSalary)"), @Filter(name = "interviewEmployeeAnnualSalaryNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ANNUAL_SALARY not in (:annualSalary)"), @Filter(name = "interviewEmployeeAnnualSalaryLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ANNUAL_SALARY <= :annualSalary)"), @Filter(name = "interviewEmployeeAnnualSalaryLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ANNUAL_SALARY < :annualSalary)"), @Filter(name = "interviewEmployeeAnnualSalaryEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ANNUAL_SALARY = :annualSalary)"), @Filter(name = "interviewEmployeeAnnualSalaryNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ANNUAL_SALARY != :annualSalary)"), @Filter(name = "interviewEmployeeAnnualSalaryInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ANNUAL_SALARY in (:annualSalary)"), @Filter(name = "interviewEmployeeAnnualSalaryBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ANNUAL_SALARY > :annualSalary_MIN  AND EMPLOYEE.ANNUAL_SALARY < :annualSalary_MAX )"), @Filter(name = "interviewEmployeeAnnualSalaryGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ANNUAL_SALARY >= :annualSalary)"), @Filter(name = "interviewEmployeeCity1NInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITY1 not in (:city1)"), @Filter(name = "interviewEmployeeCity1EqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITY1 = :city1)"), @Filter(name = "interviewEmployeeCity1NEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITY1 != :city1)"), @Filter(name = "interviewEmployeeCity1InFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITY1 in (:city1)"), @Filter(name = "interviewEmployeeMaritialStatusNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MARITIAL_STATUS not in (:maritialStatus)"), @Filter(name = "interviewEmployeeMaritialStatusEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MARITIAL_STATUS = :maritialStatus)"), @Filter(name = "interviewEmployeeMaritialStatusNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MARITIAL_STATUS != :maritialStatus)"), @Filter(name = "interviewEmployeeMaritialStatusInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MARITIAL_STATUS in (:maritialStatus)"), @Filter(name = "interviewEmployeePostalCodeGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE > :postalCode)"), @Filter(name = "interviewEmployeePostalCodeNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE not in (:postalCode)"), @Filter(name = "interviewEmployeePostalCodeLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE <= :postalCode)"), @Filter(name = "interviewEmployeePostalCodeLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE < :postalCode)"), @Filter(name = "interviewEmployeePostalCodeEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE = :postalCode)"), @Filter(name = "interviewEmployeePostalCodeNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE != :postalCode)"), @Filter(name = "interviewEmployeePostalCodeInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE in (:postalCode)"), @Filter(name = "interviewEmployeePostalCodeBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE > :postalCode_MIN  AND EMPLOYEE.POSTAL_CODE < :postalCode_MAX )"), @Filter(name = "interviewEmployeePostalCodeGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE >= :postalCode)"), @Filter(name = "interviewEmployeeCountry1NInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY1 not in (:country1)"), @Filter(name = "interviewEmployeeCountry1EqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY1 = :country1)"), @Filter(name = "interviewEmployeeCountry1NEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY1 != :country1)"), @Filter(name = "interviewEmployeeCountry1InFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY1 in (:country1)"), @Filter(name = "interviewEmployeeTaxesNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TAXES not in (:taxes)"), @Filter(name = "interviewEmployeeTaxesEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TAXES = :taxes)"), @Filter(name = "interviewEmployeeTaxesNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TAXES != :taxes)"), @Filter(name = "interviewEmployeeTaxesInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TAXES in (:taxes)"), @Filter(name = "interviewEmployeeExpertiseNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EXPERTISE not in (:expertise)"), @Filter(name = "interviewEmployeeExpertiseEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EXPERTISE = :expertise)"), @Filter(name = "interviewEmployeeExpertiseNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EXPERTISE != :expertise)"), @Filter(name = "interviewEmployeeExpertiseInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EXPERTISE in (:expertise)"), @Filter(name = "interviewEmployeeState1NInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.STATE1 not in (:state1)"), @Filter(name = "interviewEmployeeState1EqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.STATE1 = :state1)"), @Filter(name = "interviewEmployeeState1NEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.STATE1 != :state1)"), @Filter(name = "interviewEmployeeState1InFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.STATE1 in (:state1)"), @Filter(name = "interviewEmployeePersonalMobileNumberNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_MOBILE_NUMBER not in (:personalMobileNumber)"), @Filter(name = "interviewEmployeePersonalMobileNumberEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_MOBILE_NUMBER = :personalMobileNumber)"), @Filter(name = "interviewEmployeePersonalMobileNumberNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_MOBILE_NUMBER != :personalMobileNumber)"), @Filter(name = "interviewEmployeePersonalMobileNumberInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_MOBILE_NUMBER in (:personalMobileNumber)"), @Filter(name = "interviewEmployeeAddressLine21NInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE21 not in (:addressLine21)"), @Filter(name = "interviewEmployeeAddressLine21EqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE21 = :addressLine21)"), @Filter(name = "interviewEmployeeAddressLine21NEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE21 != :addressLine21)"), @Filter(name = "interviewEmployeeAddressLine21InFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE21 in (:addressLine21)"), @Filter(name = "interviewEmployeeSourceHireNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.SOURCE_HIRE not in (:sourceHire)"), @Filter(name = "interviewEmployeeSourceHireEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.SOURCE_HIRE = :sourceHire)"), @Filter(name = "interviewEmployeeSourceHireNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.SOURCE_HIRE != :sourceHire)"), @Filter(name = "interviewEmployeeSourceHireInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.SOURCE_HIRE in (:sourceHire)"), @Filter(name = "interviewEmployeeWorkPhoneNumberNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_PHONE_NUMBER not in (:workPhoneNumber)"), @Filter(name = "interviewEmployeeWorkPhoneNumberEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_PHONE_NUMBER = :workPhoneNumber)"), @Filter(name = "interviewEmployeeWorkPhoneNumberNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_PHONE_NUMBER != :workPhoneNumber)"), @Filter(name = "interviewEmployeeWorkPhoneNumberInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_PHONE_NUMBER in (:workPhoneNumber)"), @Filter(name = "interviewEmployeeRecruitmentCostGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RECRUITMENT_COST > :recruitmentCost)"), @Filter(name = "interviewEmployeeRecruitmentCostNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RECRUITMENT_COST not in (:recruitmentCost)"), @Filter(name = "interviewEmployeeRecruitmentCostLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RECRUITMENT_COST <= :recruitmentCost)"), @Filter(name = "interviewEmployeeRecruitmentCostLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RECRUITMENT_COST < :recruitmentCost)"), @Filter(name = "interviewEmployeeRecruitmentCostEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RECRUITMENT_COST = :recruitmentCost)"), @Filter(name = "interviewEmployeeRecruitmentCostNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RECRUITMENT_COST != :recruitmentCost)"), @Filter(name = "interviewEmployeeRecruitmentCostInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RECRUITMENT_COST in (:recruitmentCost)"), @Filter(name = "interviewEmployeeRecruitmentCostBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RECRUITMENT_COST > :recruitmentCost_MIN  AND EMPLOYEE.RECRUITMENT_COST < :recruitmentCost_MAX )"), @Filter(name = "interviewEmployeeRecruitmentCostGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RECRUITMENT_COST >= :recruitmentCost)"), @Filter(name = "interviewEmployeeAddressLine1NInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE1 not in (:addressLine1)"), @Filter(name = "interviewEmployeeAddressLine1EqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE1 = :addressLine1)"), @Filter(name = "interviewEmployeeAddressLine1NEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE1 != :addressLine1)"), @Filter(name = "interviewEmployeeAddressLine1InFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE1 in (:addressLine1)"), @Filter(name = "interviewEmployeeAddressLine2NInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE2 not in (:addressLine2)"), @Filter(name = "interviewEmployeeAddressLine2EqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE2 = :addressLine2)"), @Filter(name = "interviewEmployeeAddressLine2NEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE2 != :addressLine2)"), @Filter(name = "interviewEmployeeAddressLine2InFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE2 in (:addressLine2)"), @Filter(name = "interviewEmployeeStateNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.STATE not in (:state)"), @Filter(name = "interviewEmployeeStateEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.STATE = :state)"), @Filter(name = "interviewEmployeeStateNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.STATE != :state)"), @Filter(name = "interviewEmployeeStateInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.STATE in (:state)"), @Filter(name = "interviewEmployeeIdGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id)"), @Filter(name = "interviewEmployeeIdNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID not in (:id)"), @Filter(name = "interviewEmployeeIdLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID <= :id)"), @Filter(name = "interviewEmployeeIdLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID < :id)"), @Filter(name = "interviewEmployeeIdEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID = :id)"), @Filter(name = "interviewEmployeeIdNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID != :id)"), @Filter(name = "interviewEmployeeIdInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID in (:id)"), @Filter(name = "interviewEmployeeIdBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id_MIN  AND EMPLOYEE.ID < :id_MAX )"), @Filter(name = "interviewEmployeeIdGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID >= :id)"), @Filter(name = "interviewEmployeeReportingManagerNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER not in (:reportingManager)"), @Filter(name = "interviewEmployeeReportingManagerEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER = :reportingManager)"), @Filter(name = "interviewEmployeeReportingManagerNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER != :reportingManager)"), @Filter(name = "interviewEmployeeReportingManagerInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER in (:reportingManager)"), @Filter(name = "interviewEmployeeNickNameNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NICK_NAME not in (:nickName)"), @Filter(name = "interviewEmployeeNickNameEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NICK_NAME = :nickName)"), @Filter(name = "interviewEmployeeNickNameNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NICK_NAME != :nickName)"), @Filter(name = "interviewEmployeeNickNameInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NICK_NAME in (:nickName)"), @Filter(name = "interviewEmployeeAadharCardNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AADHAR_CARD not in (:aadharCard)"), @Filter(name = "interviewEmployeeAadharCardEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AADHAR_CARD = :aadharCard)"), @Filter(name = "interviewEmployeeAadharCardNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AADHAR_CARD != :aadharCard)"), @Filter(name = "interviewEmployeeAadharCardInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AADHAR_CARD in (:aadharCard)"), @Filter(name = "interviewEmployeeTrainingCostGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TRAINING_COST > :trainingCost)"), @Filter(name = "interviewEmployeeTrainingCostNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TRAINING_COST not in (:trainingCost)"), @Filter(name = "interviewEmployeeTrainingCostLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TRAINING_COST <= :trainingCost)"), @Filter(name = "interviewEmployeeTrainingCostLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TRAINING_COST < :trainingCost)"), @Filter(name = "interviewEmployeeTrainingCostEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TRAINING_COST = :trainingCost)"), @Filter(name = "interviewEmployeeTrainingCostNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TRAINING_COST != :trainingCost)"), @Filter(name = "interviewEmployeeTrainingCostInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TRAINING_COST in (:trainingCost)"), @Filter(name = "interviewEmployeeTrainingCostBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TRAINING_COST > :trainingCost_MIN  AND EMPLOYEE.TRAINING_COST < :trainingCost_MAX )"), @Filter(name = "interviewEmployeeTrainingCostGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TRAINING_COST >= :trainingCost)"), @Filter(name = "interviewEmployeeTagsNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TAGS not in (:tags)"), @Filter(name = "interviewEmployeeTagsEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TAGS = :tags)"), @Filter(name = "interviewEmployeeTagsNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TAGS != :tags)"), @Filter(name = "interviewEmployeeTagsInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TAGS in (:tags)"), @Filter(name = "interviewEmployeeFirstNameNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FIRST_NAME not in (:firstName)"), @Filter(name = "interviewEmployeeFirstNameEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FIRST_NAME = :firstName)"), @Filter(name = "interviewEmployeeFirstNameNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FIRST_NAME != :firstName)"), @Filter(name = "interviewEmployeeFirstNameInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FIRST_NAME in (:firstName)"), @Filter(name = "interviewEmployeeTotalExperienceGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TOTAL_EXPERIENCE > :totalExperience)"), @Filter(name = "interviewEmployeeTotalExperienceNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TOTAL_EXPERIENCE not in (:totalExperience)"), @Filter(name = "interviewEmployeeTotalExperienceLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TOTAL_EXPERIENCE <= :totalExperience)"), @Filter(name = "interviewEmployeeTotalExperienceLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TOTAL_EXPERIENCE < :totalExperience)"), @Filter(name = "interviewEmployeeTotalExperienceEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TOTAL_EXPERIENCE = :totalExperience)"), @Filter(name = "interviewEmployeeTotalExperienceNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TOTAL_EXPERIENCE != :totalExperience)"), @Filter(name = "interviewEmployeeTotalExperienceInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TOTAL_EXPERIENCE in (:totalExperience)"), @Filter(name = "interviewEmployeeTotalExperienceBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TOTAL_EXPERIENCE > :totalExperience_MIN  AND EMPLOYEE.TOTAL_EXPERIENCE < :totalExperience_MAX )"), @Filter(name = "interviewEmployeeTotalExperienceGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TOTAL_EXPERIENCE >= :totalExperience)"), @Filter(name = "interviewEmployeeBenefitsNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BENEFITS not in (:benefits)"), @Filter(name = "interviewEmployeeBenefitsEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BENEFITS = :benefits)"), @Filter(name = "interviewEmployeeBenefitsNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BENEFITS != :benefits)"), @Filter(name = "interviewEmployeeBenefitsInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BENEFITS in (:benefits)"), @Filter(name = "interviewEmployeePostalCode1GtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE1 > :postalCode1)"), @Filter(name = "interviewEmployeePostalCode1NInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE1 not in (:postalCode1)"), @Filter(name = "interviewEmployeePostalCode1LtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE1 <= :postalCode1)"), @Filter(name = "interviewEmployeePostalCode1LtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE1 < :postalCode1)"), @Filter(name = "interviewEmployeePostalCode1EqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE1 = :postalCode1)"), @Filter(name = "interviewEmployeePostalCode1NEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE1 != :postalCode1)"), @Filter(name = "interviewEmployeePostalCode1InFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE1 in (:postalCode1)"), @Filter(name = "interviewEmployeePostalCode1BwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE1 > :postalCode1_MIN  AND EMPLOYEE.POSTAL_CODE1 < :postalCode1_MAX )"), @Filter(name = "interviewEmployeePostalCode1GtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.POSTAL_CODE1 >= :postalCode1)"), @Filter(name = "interviewEmployeeLastNameNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.LAST_NAME not in (:lastName)"), @Filter(name = "interviewEmployeeLastNameEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.LAST_NAME = :lastName)"), @Filter(name = "interviewEmployeeLastNameNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.LAST_NAME != :lastName)"), @Filter(name = "interviewEmployeeLastNameInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.LAST_NAME in (:lastName)"), @Filter(name = "interviewEmployeeExtensionNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EXTENSION not in (:extension)"), @Filter(name = "interviewEmployeeExtensionEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EXTENSION = :extension)"), @Filter(name = "interviewEmployeeExtensionNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EXTENSION != :extension)"), @Filter(name = "interviewEmployeeExtensionInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EXTENSION in (:extension)"), @Filter(name = "interviewEmployeeGenderNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.GENDER not in (:gender)"), @Filter(name = "interviewEmployeeGenderEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.GENDER = :gender)"), @Filter(name = "interviewEmployeeGenderNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.GENDER != :gender)"), @Filter(name = "interviewEmployeeGenderInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.GENDER in (:gender)"), @Filter(name = "interviewEmployeeCityNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITY not in (:city)"), @Filter(name = "interviewEmployeeCityEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITY = :city)"), @Filter(name = "interviewEmployeeCityNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITY != :city)"), @Filter(name = "interviewEmployeeCityInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITY in (:city)"), @Filter(name = "interviewEmployeeAboutMeNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ABOUT_ME not in (:aboutMe)"), @Filter(name = "interviewEmployeeAboutMeEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ABOUT_ME = :aboutMe)"), @Filter(name = "interviewEmployeeAboutMeNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ABOUT_ME != :aboutMe)"), @Filter(name = "interviewEmployeeAboutMeInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ABOUT_ME in (:aboutMe)"), @Filter(name = "interviewEmployeeOnboardingStatusNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_STATUS not in (:onboardingStatus)"), @Filter(name = "interviewEmployeeOnboardingStatusEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_STATUS = :onboardingStatus)"), @Filter(name = "interviewEmployeeOnboardingStatusNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_STATUS != :onboardingStatus)"), @Filter(name = "interviewEmployeeOnboardingStatusInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_STATUS in (:onboardingStatus)"), @Filter(name = "interviewEmployeeOrgRoleNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ORG_ROLE not in (:orgRole)"), @Filter(name = "interviewEmployeeOrgRoleEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ORG_ROLE = :orgRole)"), @Filter(name = "interviewEmployeeOrgRoleNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ORG_ROLE != :orgRole)"), @Filter(name = "interviewEmployeeOrgRoleInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ORG_ROLE in (:orgRole)"), @Filter(name = "interviewEmployeeEmployementTypeNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEMENT_TYPE not in (:employementType)"), @Filter(name = "interviewEmployeeEmployementTypeEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEMENT_TYPE = :employementType)"), @Filter(name = "interviewEmployeeEmployementTypeNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEMENT_TYPE != :employementType)"), @Filter(name = "interviewEmployeeEmployementTypeInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEMENT_TYPE in (:employementType)"), @Filter(name = "interviewEmployeeSeatingLocationNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.SEATING_LOCATION not in (:seatingLocation)"), @Filter(name = "interviewEmployeeSeatingLocationEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.SEATING_LOCATION = :seatingLocation)"), @Filter(name = "interviewEmployeeSeatingLocationNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.SEATING_LOCATION != :seatingLocation)"), @Filter(name = "interviewEmployeeSeatingLocationInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.SEATING_LOCATION in (:seatingLocation)"), @Filter(name = "interviewEmployeeOnboardingCostGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_COST > :onboardingCost)"), @Filter(name = "interviewEmployeeOnboardingCostNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_COST not in (:onboardingCost)"), @Filter(name = "interviewEmployeeOnboardingCostLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_COST <= :onboardingCost)"), @Filter(name = "interviewEmployeeOnboardingCostLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_COST < :onboardingCost)"), @Filter(name = "interviewEmployeeOnboardingCostEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_COST = :onboardingCost)"), @Filter(name = "interviewEmployeeOnboardingCostNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_COST != :onboardingCost)"), @Filter(name = "interviewEmployeeOnboardingCostInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_COST in (:onboardingCost)"), @Filter(name = "interviewEmployeeOnboardingCostBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_COST > :onboardingCost_MIN  AND EMPLOYEE.ONBOARDING_COST < :onboardingCost_MAX )"), @Filter(name = "interviewEmployeeOnboardingCostGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ONBOARDING_COST >= :onboardingCost)"), @Filter(name = "interviewEmployeeBonusesGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BONUSES > :bonuses)"), @Filter(name = "interviewEmployeeBonusesNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BONUSES not in (:bonuses)"), @Filter(name = "interviewEmployeeBonusesLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BONUSES <= :bonuses)"), @Filter(name = "interviewEmployeeBonusesLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BONUSES < :bonuses)"), @Filter(name = "interviewEmployeeBonusesEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BONUSES = :bonuses)"), @Filter(name = "interviewEmployeeBonusesNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BONUSES != :bonuses)"), @Filter(name = "interviewEmployeeBonusesInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BONUSES in (:bonuses)"), @Filter(name = "interviewEmployeeBonusesBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BONUSES > :bonuses_MIN  AND EMPLOYEE.BONUSES < :bonuses_MAX )"), @Filter(name = "interviewEmployeeBonusesGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BONUSES >= :bonuses)"), @Filter(name = "interviewEmployeeEmailNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMAIL not in (:email)"), @Filter(name = "interviewEmployeeEmailEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMAIL = :email)"), @Filter(name = "interviewEmployeeEmailNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMAIL != :email)"), @Filter(name = "interviewEmployeeEmailInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMAIL in (:email)"), @Filter(name = "interviewEmployeeApprovalStatusNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "interviewEmployeeApprovalStatusEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.APPROVAL_STATUS = :approvalStatus)"), @Filter(name = "interviewEmployeeApprovalStatusNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.APPROVAL_STATUS != :approvalStatus)"), @Filter(name = "interviewEmployeeApprovalStatusInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "interviewEmployeeUniqueIdentificationNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.UNIQUE_IDENTIFICATION not in (:uniqueIdentification)"), @Filter(name = "interviewEmployeeUniqueIdentificationEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.UNIQUE_IDENTIFICATION = :uniqueIdentification)"), @Filter(name = "interviewEmployeeUniqueIdentificationNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.UNIQUE_IDENTIFICATION != :uniqueIdentification)"), @Filter(name = "interviewEmployeeUniqueIdentificationInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.UNIQUE_IDENTIFICATION in (:uniqueIdentification)"), @Filter(name = "interviewEmployeeDateOfBirthGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_BIRTH > (SELECT DATE_FORMAT(:dateOfBirth, '%Y-%m-%d'))))"), @Filter(name = "interviewEmployeeDateOfBirthLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_BIRTH < (SELECT DATE_FORMAT(:dateOfBirth, '%Y-%m-%d'))))"), @Filter(name = "interviewEmployeeDateOfBirthBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_BIRTH > (SELECT DATE_FORMAT(:dateOfBirth_MIN , '%Y-%m-%d')) AND EMPLOYEE.DATE_OF_BIRTH < (SELECT DATE_FORMAT(:dateOfBirth_MAX , '%Y-%m-%d')))"), @Filter(name = "interviewEmployeeDateOfExitGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_EXIT > (SELECT DATE_FORMAT(:dateOfExit, '%Y-%m-%d'))))"), @Filter(name = "interviewEmployeeDateOfExitLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_EXIT < (SELECT DATE_FORMAT(:dateOfExit, '%Y-%m-%d'))))"), @Filter(name = "interviewEmployeeDateOfExitBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_EXIT > (SELECT DATE_FORMAT(:dateOfExit_MIN , '%Y-%m-%d')) AND EMPLOYEE.DATE_OF_EXIT < (SELECT DATE_FORMAT(:dateOfExit_MAX , '%Y-%m-%d')))"), @Filter(name = "interviewEmployeeEmployeeIdNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEE_ID not in (:employeeId)"), @Filter(name = "interviewEmployeeEmployeeIdEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEE_ID = :employeeId)"), @Filter(name = "interviewEmployeeEmployeeIdNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEE_ID != :employeeId)"), @Filter(name = "interviewEmployeeEmployeeIdInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEE_ID in (:employeeId)"), @Filter(name = "interviewEmployeeDateOfJoiningGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_JOINING > (SELECT DATE_FORMAT(:dateOfJoining, '%Y-%m-%d'))))"), @Filter(name = "interviewEmployeeDateOfJoiningLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_JOINING < (SELECT DATE_FORMAT(:dateOfJoining, '%Y-%m-%d'))))"), @Filter(name = "interviewEmployeeDateOfJoiningBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_JOINING > (SELECT DATE_FORMAT(:dateOfJoining_MIN , '%Y-%m-%d')) AND EMPLOYEE.DATE_OF_JOINING < (SELECT DATE_FORMAT(:dateOfJoining_MAX , '%Y-%m-%d')))"), @Filter(name = "interviewEmployeeCurrentExperienceGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CURRENT_EXPERIENCE > :currentExperience)"), @Filter(name = "interviewEmployeeCurrentExperienceNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CURRENT_EXPERIENCE not in (:currentExperience)"), @Filter(name = "interviewEmployeeCurrentExperienceLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CURRENT_EXPERIENCE <= :currentExperience)"), @Filter(name = "interviewEmployeeCurrentExperienceLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CURRENT_EXPERIENCE < :currentExperience)"), @Filter(name = "interviewEmployeeCurrentExperienceEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CURRENT_EXPERIENCE = :currentExperience)"), @Filter(name = "interviewEmployeeCurrentExperienceNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CURRENT_EXPERIENCE != :currentExperience)"), @Filter(name = "interviewEmployeeCurrentExperienceInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CURRENT_EXPERIENCE in (:currentExperience)"), @Filter(name = "interviewEmployeeCurrentExperienceBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CURRENT_EXPERIENCE > :currentExperience_MIN  AND EMPLOYEE.CURRENT_EXPERIENCE < :currentExperience_MAX )"), @Filter(name = "interviewEmployeeCurrentExperienceGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CURRENT_EXPERIENCE >= :currentExperience)"), @Filter(name = "interviewEmployeeAddressLine11NInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE11 not in (:addressLine11)"), @Filter(name = "interviewEmployeeAddressLine11EqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE11 = :addressLine11)"), @Filter(name = "interviewEmployeeAddressLine11NEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE11 != :addressLine11)"), @Filter(name = "interviewEmployeeAddressLine11InFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ADDRESS_LINE11 in (:addressLine11)"), @Filter(name = "interviewEmployeeEmployementStatusNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEMENT_STATUS not in (:employementStatus)"), @Filter(name = "interviewEmployeeEmployementStatusEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEMENT_STATUS = :employementStatus)"), @Filter(name = "interviewEmployeeEmployementStatusNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEMENT_STATUS != :employementStatus)"), @Filter(name = "interviewEmployeeEmployementStatusInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEMENT_STATUS in (:employementStatus)"), @Filter(name = "interviewEmployeeAllowancesNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ALLOWANCES not in (:allowances)"), @Filter(name = "interviewEmployeeAllowancesEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ALLOWANCES = :allowances)"), @Filter(name = "interviewEmployeeAllowancesNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ALLOWANCES != :allowances)"), @Filter(name = "interviewEmployeeAllowancesInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ALLOWANCES in (:allowances)"), @Filter(name = "interviewEmployeeAgeGtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AGE > :age)"), @Filter(name = "interviewEmployeeAgeNInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AGE not in (:age)"), @Filter(name = "interviewEmployeeAgeLtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AGE <= :age)"), @Filter(name = "interviewEmployeeAgeLtFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AGE < :age)"), @Filter(name = "interviewEmployeeAgeEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AGE = :age)"), @Filter(name = "interviewEmployeeAgeNEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AGE != :age)"), @Filter(name = "interviewEmployeeAgeInFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AGE in (:age)"), @Filter(name = "interviewEmployeeAgeBwFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AGE > :age_MIN  AND EMPLOYEE.AGE < :age_MAX )"), @Filter(name = "interviewEmployeeAgeGtEqFilter", condition = "INTERVIEWER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.AGE >= :age)"), @Filter(name = "interviewFromDateGtFilter", condition = "FROM_DATE > (SELECT DATE_FORMAT(:fromDate, '%Y-%m-%d'))"), @Filter(name = "interviewFromDateLtFilter", condition = "FROM_DATE < (SELECT DATE_FORMAT(:fromDate, '%Y-%m-%d'))"), @Filter(name = "interviewFromDateBwFilter", condition = "FROM_DATE >(SELECT DATE_FORMAT(:fromDate_MIN, '%Y-%m-%d')) AND FROM_DATE <(SELECT DATE_FORMAT(:fromDate_MAX, '%Y-%m-%d'))"), @Filter(name = "interviewIdGtFilter", condition = "ID > :id"), @Filter(name = "interviewIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "interviewIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "interviewIdLtFilter", condition = "ID < :id"), @Filter(name = "interviewIdEqFilter", condition = "ID = :id"), @Filter(name = "interviewIdNEqFilter", condition = "ID != :id"), @Filter(name = "interviewIdInFilter", condition = "ID in (:id)"), @Filter(name = "interviewIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "interviewIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "interviewIdEqFilter", condition = "ID = :id"), @Filter(name = "interviewInterviewOwnerNInFilter", condition = "INTERVIEW_OWNER not in (:interviewOwner)"), @Filter(name = "interviewInterviewOwnerEqFilter", condition = "INTERVIEW_OWNER = :interviewOwner"), @Filter(name = "interviewInterviewOwnerNEqFilter", condition = "INTERVIEW_OWNER != :interviewOwner"), @Filter(name = "interviewInterviewOwnerInFilter", condition = "INTERVIEW_OWNER in (:interviewOwner)"), @Filter(name = "interviewJobOpeningCountryNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY not in (:country)"), @Filter(name = "interviewJobOpeningCountryEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY = :country)"), @Filter(name = "interviewJobOpeningCountryNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY != :country)"), @Filter(name = "interviewJobOpeningCountryInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY in (:country)"), @Filter(name = "interviewJobOpeningAttachment3NInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 not in (:attachment3)"), @Filter(name = "interviewJobOpeningAttachment3EqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 = :attachment3)"), @Filter(name = "interviewJobOpeningAttachment3NEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 != :attachment3)"), @Filter(name = "interviewJobOpeningAttachment3InFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 in (:attachment3)"), @Filter(name = "interviewJobOpeningWorkExperienceNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE not in (:workExperience)"), @Filter(name = "interviewJobOpeningWorkExperienceEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE = :workExperience)"), @Filter(name = "interviewJobOpeningWorkExperienceNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE != :workExperience)"), @Filter(name = "interviewJobOpeningWorkExperienceInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE in (:workExperience)"), @Filter(name = "interviewJobOpeningPostingTitleNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE not in (:postingTitle)"), @Filter(name = "interviewJobOpeningPostingTitleEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE = :postingTitle)"), @Filter(name = "interviewJobOpeningPostingTitleNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE != :postingTitle)"), @Filter(name = "interviewJobOpeningPostingTitleInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE in (:postingTitle)"), @Filter(name = "interviewJobOpeningSkillsNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS not in (:skills)"), @Filter(name = "interviewJobOpeningSkillsEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS = :skills)"), @Filter(name = "interviewJobOpeningSkillsNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS != :skills)"), @Filter(name = "interviewJobOpeningSkillsInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS in (:skills)"), @Filter(name = "interviewJobOpeningDateOpenedGtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DATE_OPENED > (SELECT DATE_FORMAT(:dateOpened, '%Y-%m-%d'))))"), @Filter(name = "interviewJobOpeningDateOpenedLtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DATE_OPENED < (SELECT DATE_FORMAT(:dateOpened, '%Y-%m-%d'))))"), @Filter(name = "interviewJobOpeningDateOpenedBwFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DATE_OPENED > (SELECT DATE_FORMAT(:dateOpened_MIN , '%Y-%m-%d')) AND JOB_OPENING.DATE_OPENED < (SELECT DATE_FORMAT(:dateOpened_MAX , '%Y-%m-%d')))"), @Filter(name = "interviewJobOpeningProvinceNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE not in (:province)"), @Filter(name = "interviewJobOpeningProvinceEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE = :province)"), @Filter(name = "interviewJobOpeningProvinceNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE != :province)"), @Filter(name = "interviewJobOpeningProvinceInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE in (:province)"), @Filter(name = "interviewJobOpeningIdGtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID > :id)"), @Filter(name = "interviewJobOpeningIdNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID not in (:id)"), @Filter(name = "interviewJobOpeningIdLtEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID <= :id)"), @Filter(name = "interviewJobOpeningIdLtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID < :id)"), @Filter(name = "interviewJobOpeningIdEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID = :id)"), @Filter(name = "interviewJobOpeningIdNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID != :id)"), @Filter(name = "interviewJobOpeningIdInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID in (:id)"), @Filter(name = "interviewJobOpeningIdBwFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID > :id_MIN  AND JOB_OPENING.ID < :id_MAX )"), @Filter(name = "interviewJobOpeningIdGtEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID >= :id)"), @Filter(name = "interviewJobOpeningAttachment2NInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 not in (:attachment2)"), @Filter(name = "interviewJobOpeningAttachment2EqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 = :attachment2)"), @Filter(name = "interviewJobOpeningAttachment2NEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 != :attachment2)"), @Filter(name = "interviewJobOpeningAttachment2InFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 in (:attachment2)"), @Filter(name = "interviewJobOpeningAttachment1NInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 not in (:attachment1)"), @Filter(name = "interviewJobOpeningAttachment1EqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 = :attachment1)"), @Filter(name = "interviewJobOpeningAttachment1NEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 != :attachment1)"), @Filter(name = "interviewJobOpeningAttachment1InFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 in (:attachment1)"), @Filter(name = "interviewJobOpeningTargetClossingDateGtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.TARGET_CLOSSING_DATE > (SELECT DATE_FORMAT(:targetClossingDate, '%Y-%m-%d'))))"), @Filter(name = "interviewJobOpeningTargetClossingDateLtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.TARGET_CLOSSING_DATE < (SELECT DATE_FORMAT(:targetClossingDate, '%Y-%m-%d'))))"), @Filter(name = "interviewJobOpeningTargetClossingDateBwFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.TARGET_CLOSSING_DATE > (SELECT DATE_FORMAT(:targetClossingDate_MIN , '%Y-%m-%d')) AND JOB_OPENING.TARGET_CLOSSING_DATE < (SELECT DATE_FORMAT(:targetClossingDate_MAX , '%Y-%m-%d')))"), @Filter(name = "interviewJobOpeningJobOpeningStatusNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS not in (:jobOpeningStatus)"), @Filter(name = "interviewJobOpeningJobOpeningStatusEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS = :jobOpeningStatus)"), @Filter(name = "interviewJobOpeningJobOpeningStatusNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS != :jobOpeningStatus)"), @Filter(name = "interviewJobOpeningJobOpeningStatusInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS in (:jobOpeningStatus)"), @Filter(name = "interviewJobOpeningHiringManagerNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER not in (:hiringManager)"), @Filter(name = "interviewJobOpeningHiringManagerEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER = :hiringManager)"), @Filter(name = "interviewJobOpeningHiringManagerNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER != :hiringManager)"), @Filter(name = "interviewJobOpeningHiringManagerInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER in (:hiringManager)"), @Filter(name = "interviewJobOpeningJobIdNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID not in (:jobId)"), @Filter(name = "interviewJobOpeningJobIdEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID = :jobId)"), @Filter(name = "interviewJobOpeningJobIdNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID != :jobId)"), @Filter(name = "interviewJobOpeningJobIdInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID in (:jobId)"), @Filter(name = "interviewJobOpeningAssignedrecruiterNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER not in (:assignedrecruiter)"), @Filter(name = "interviewJobOpeningAssignedrecruiterEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER = :assignedrecruiter)"), @Filter(name = "interviewJobOpeningAssignedrecruiterNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER != :assignedrecruiter)"), @Filter(name = "interviewJobOpeningAssignedrecruiterInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER in (:assignedrecruiter)"), @Filter(name = "interviewJobOpeningOpenPositionsGtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS > :openPositions)"), @Filter(name = "interviewJobOpeningOpenPositionsNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS not in (:openPositions)"), @Filter(name = "interviewJobOpeningOpenPositionsLtEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS <= :openPositions)"), @Filter(name = "interviewJobOpeningOpenPositionsLtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS < :openPositions)"), @Filter(name = "interviewJobOpeningOpenPositionsEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS = :openPositions)"), @Filter(name = "interviewJobOpeningOpenPositionsNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS != :openPositions)"), @Filter(name = "interviewJobOpeningOpenPositionsInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS in (:openPositions)"), @Filter(name = "interviewJobOpeningOpenPositionsBwFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS > :openPositions_MIN  AND JOB_OPENING.OPEN_POSITIONS < :openPositions_MAX )"), @Filter(name = "interviewJobOpeningOpenPositionsGtEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS >= :openPositions)"), @Filter(name = "interviewJobOpeningCityNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY not in (:city)"), @Filter(name = "interviewJobOpeningCityEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY = :city)"), @Filter(name = "interviewJobOpeningCityNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY != :city)"), @Filter(name = "interviewJobOpeningCityInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY in (:city)"), @Filter(name = "interviewJobOpeningIndustryNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY not in (:industry)"), @Filter(name = "interviewJobOpeningIndustryEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY = :industry)"), @Filter(name = "interviewJobOpeningIndustryNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY != :industry)"), @Filter(name = "interviewJobOpeningIndustryInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY in (:industry)"), @Filter(name = "interviewJobOpeningPostalcodeNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE not in (:postalcode)"), @Filter(name = "interviewJobOpeningPostalcodeEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE = :postalcode)"), @Filter(name = "interviewJobOpeningPostalcodeNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE != :postalcode)"), @Filter(name = "interviewJobOpeningPostalcodeInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE in (:postalcode)"), @Filter(name = "interviewJobOpeningJobTypeNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE not in (:jobType)"), @Filter(name = "interviewJobOpeningJobTypeEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE = :jobType)"), @Filter(name = "interviewJobOpeningJobTypeNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE != :jobType)"), @Filter(name = "interviewJobOpeningJobTypeInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE in (:jobType)"), @Filter(name = "interviewJobOpeningSalaryRangeNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE not in (:salaryRange)"), @Filter(name = "interviewJobOpeningSalaryRangeEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE = :salaryRange)"), @Filter(name = "interviewJobOpeningSalaryRangeNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE != :salaryRange)"), @Filter(name = "interviewJobOpeningSalaryRangeInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE in (:salaryRange)"), @Filter(name = "interviewJobOpeningAddressNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS not in (:address)"), @Filter(name = "interviewJobOpeningAddressEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS = :address)"), @Filter(name = "interviewJobOpeningAddressNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS != :address)"), @Filter(name = "interviewJobOpeningAddressInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS in (:address)"), @Filter(name = "interviewJobOpeningIsRemoteNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE not in (:isRemote)"), @Filter(name = "interviewJobOpeningIsRemoteEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE = :isRemote)"), @Filter(name = "interviewJobOpeningIsRemoteNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE != :isRemote)"), @Filter(name = "interviewJobOpeningIsRemoteInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE in (:isRemote)"), @Filter(name = "interviewJobOpeningDescriptionRequirementsNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS not in (:descriptionRequirements)"), @Filter(name = "interviewJobOpeningDescriptionRequirementsEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS = :descriptionRequirements)"), @Filter(name = "interviewJobOpeningDescriptionRequirementsNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS != :descriptionRequirements)"), @Filter(name = "interviewJobOpeningDescriptionRequirementsInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS in (:descriptionRequirements)"), @Filter(name = "interviewLocationNInFilter", condition = "LOCATION not in (:location)"), @Filter(name = "interviewLocationEqFilter", condition = "LOCATION = :location"), @Filter(name = "interviewLocationNEqFilter", condition = "LOCATION != :location"), @Filter(name = "interviewLocationInFilter", condition = "LOCATION in (:location)"), @Filter(name = "interviewNameNInFilter", condition = "NAME not in (:name)"), @Filter(name = "interviewNameEqFilter", condition = "NAME = :name"), @Filter(name = "interviewNameNEqFilter", condition = "NAME != :name"), @Filter(name = "interviewNameInFilter", condition = "NAME in (:name)"), @Filter(name = "interviewToDateGtFilter", condition = "TO_DATE > (SELECT DATE_FORMAT(:toDate, '%Y-%m-%d'))"), @Filter(name = "interviewToDateLtFilter", condition = "TO_DATE < (SELECT DATE_FORMAT(:toDate, '%Y-%m-%d'))"), @Filter(name = "interviewToDateBwFilter", condition = "TO_DATE >(SELECT DATE_FORMAT(:toDate_MIN, '%Y-%m-%d')) AND TO_DATE <(SELECT DATE_FORMAT(:toDate_MAX, '%Y-%m-%d'))"), @Filter(name = "interviewWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "interviewWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "interviewWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "interviewWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "interviewWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "interviewWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "interviewWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "interviewWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "interviewWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "interviewWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
//@FilterDefs(value = { @FilterDef(name = "interviewApplicantCountryNInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewApplicantCountryEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewApplicantCountryNEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewApplicantCountryInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewApplicantCurrentSalaryGtFilter", parameters = { @ParamDef(name = "currentSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantCurrentSalaryNInFilter", parameters = { @ParamDef(name = "currentSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantCurrentSalaryLtEqFilter", parameters = { @ParamDef(name = "currentSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantCurrentSalaryLtFilter", parameters = { @ParamDef(name = "currentSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantCurrentSalaryEqFilter", parameters = { @ParamDef(name = "currentSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantCurrentSalaryNEqFilter", parameters = { @ParamDef(name = "currentSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantCurrentSalaryInFilter", parameters = { @ParamDef(name = "currentSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantCurrentSalaryBwFilter", parameters = { @ParamDef(name = "currentSalary_MIN", type = Integer.class), @ParamDef(name = "currentSalary_MAX", type = Integer.class) }), @FilterDef(name = "interviewApplicantCurrentSalaryGtEqFilter", parameters = { @ParamDef(name = "currentSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantPostalCodeNInFilter", parameters = { @ParamDef(name = "postalCode", type = String.class) }), @FilterDef(name = "interviewApplicantPostalCodeEqFilter", parameters = { @ParamDef(name = "postalCode", type = String.class) }), @FilterDef(name = "interviewApplicantPostalCodeNEqFilter", parameters = { @ParamDef(name = "postalCode", type = String.class) }), @FilterDef(name = "interviewApplicantPostalCodeInFilter", parameters = { @ParamDef(name = "postalCode", type = String.class) }), @FilterDef(name = "interviewApplicantApplciantSourceNInFilter", parameters = { @ParamDef(name = "applciantSource", type = String.class) }), @FilterDef(name = "interviewApplicantApplciantSourceEqFilter", parameters = { @ParamDef(name = "applciantSource", type = String.class) }), @FilterDef(name = "interviewApplicantApplciantSourceNEqFilter", parameters = { @ParamDef(name = "applciantSource", type = String.class) }), @FilterDef(name = "interviewApplicantApplciantSourceInFilter", parameters = { @ParamDef(name = "applciantSource", type = String.class) }), @FilterDef(name = "interviewApplicantEmailIdNInFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "interviewApplicantEmailIdEqFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "interviewApplicantEmailIdNEqFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "interviewApplicantEmailIdInFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateOwnerNInFilter", parameters = { @ParamDef(name = "candidateOwner", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateOwnerEqFilter", parameters = { @ParamDef(name = "candidateOwner", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateOwnerNEqFilter", parameters = { @ParamDef(name = "candidateOwner", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateOwnerInFilter", parameters = { @ParamDef(name = "candidateOwner", type = String.class) }), @FilterDef(name = "interviewApplicantProvinceNInFilter", parameters = { @ParamDef(name = "province", type = String.class) }), @FilterDef(name = "interviewApplicantProvinceEqFilter", parameters = { @ParamDef(name = "province", type = String.class) }), @FilterDef(name = "interviewApplicantProvinceNEqFilter", parameters = { @ParamDef(name = "province", type = String.class) }), @FilterDef(name = "interviewApplicantProvinceInFilter", parameters = { @ParamDef(name = "province", type = String.class) }), @FilterDef(name = "interviewApplicantExpectedSalaryGtFilter", parameters = { @ParamDef(name = "expectedSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantExpectedSalaryNInFilter", parameters = { @ParamDef(name = "expectedSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantExpectedSalaryLtEqFilter", parameters = { @ParamDef(name = "expectedSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantExpectedSalaryLtFilter", parameters = { @ParamDef(name = "expectedSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantExpectedSalaryEqFilter", parameters = { @ParamDef(name = "expectedSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantExpectedSalaryNEqFilter", parameters = { @ParamDef(name = "expectedSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantExpectedSalaryInFilter", parameters = { @ParamDef(name = "expectedSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantExpectedSalaryBwFilter", parameters = { @ParamDef(name = "expectedSalary_MIN", type = Integer.class), @ParamDef(name = "expectedSalary_MAX", type = Integer.class) }), @FilterDef(name = "interviewApplicantExpectedSalaryGtEqFilter", parameters = { @ParamDef(name = "expectedSalary", type = Integer.class) }), @FilterDef(name = "interviewApplicantIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewApplicantIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewApplicantIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewApplicantIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewApplicantIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewApplicantIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewApplicantIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewApplicantIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "interviewApplicantIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewApplicantFaxNInFilter", parameters = { @ParamDef(name = "fax", type = String.class) }), @FilterDef(name = "interviewApplicantFaxEqFilter", parameters = { @ParamDef(name = "fax", type = String.class) }), @FilterDef(name = "interviewApplicantFaxNEqFilter", parameters = { @ParamDef(name = "fax", type = String.class) }), @FilterDef(name = "interviewApplicantFaxInFilter", parameters = { @ParamDef(name = "fax", type = String.class) }), @FilterDef(name = "interviewApplicantCurrentEmployerNInFilter", parameters = { @ParamDef(name = "currentEmployer", type = String.class) }), @FilterDef(name = "interviewApplicantCurrentEmployerEqFilter", parameters = { @ParamDef(name = "currentEmployer", type = String.class) }), @FilterDef(name = "interviewApplicantCurrentEmployerNEqFilter", parameters = { @ParamDef(name = "currentEmployer", type = String.class) }), @FilterDef(name = "interviewApplicantCurrentEmployerInFilter", parameters = { @ParamDef(name = "currentEmployer", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateSourceNInFilter", parameters = { @ParamDef(name = "candidateSource", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateSourceEqFilter", parameters = { @ParamDef(name = "candidateSource", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateSourceNEqFilter", parameters = { @ParamDef(name = "candidateSource", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateSourceInFilter", parameters = { @ParamDef(name = "candidateSource", type = String.class) }), @FilterDef(name = "interviewApplicantFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "interviewApplicantFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "interviewApplicantFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "interviewApplicantFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "interviewApplicantPhoneNInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "interviewApplicantPhoneEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "interviewApplicantPhoneNEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "interviewApplicantPhoneInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "interviewApplicantUniqueIdCandidateNInFilter", parameters = { @ParamDef(name = "uniqueIdCandidate", type = String.class) }), @FilterDef(name = "interviewApplicantUniqueIdCandidateEqFilter", parameters = { @ParamDef(name = "uniqueIdCandidate", type = String.class) }), @FilterDef(name = "interviewApplicantUniqueIdCandidateNEqFilter", parameters = { @ParamDef(name = "uniqueIdCandidate", type = String.class) }), @FilterDef(name = "interviewApplicantUniqueIdCandidateInFilter", parameters = { @ParamDef(name = "uniqueIdCandidate", type = String.class) }), @FilterDef(name = "interviewApplicantLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "interviewApplicantLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "interviewApplicantLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "interviewApplicantLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "interviewApplicantSecondaryEmailNInFilter", parameters = { @ParamDef(name = "secondaryEmail", type = String.class) }), @FilterDef(name = "interviewApplicantSecondaryEmailEqFilter", parameters = { @ParamDef(name = "secondaryEmail", type = String.class) }), @FilterDef(name = "interviewApplicantSecondaryEmailNEqFilter", parameters = { @ParamDef(name = "secondaryEmail", type = String.class) }), @FilterDef(name = "interviewApplicantSecondaryEmailInFilter", parameters = { @ParamDef(name = "secondaryEmail", type = String.class) }), @FilterDef(name = "interviewApplicantHighestQualificationNInFilter", parameters = { @ParamDef(name = "highestQualification", type = String.class) }), @FilterDef(name = "interviewApplicantHighestQualificationEqFilter", parameters = { @ParamDef(name = "highestQualification", type = String.class) }), @FilterDef(name = "interviewApplicantHighestQualificationNEqFilter", parameters = { @ParamDef(name = "highestQualification", type = String.class) }), @FilterDef(name = "interviewApplicantHighestQualificationInFilter", parameters = { @ParamDef(name = "highestQualification", type = String.class) }), @FilterDef(name = "interviewApplicantCityNInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewApplicantCityEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewApplicantCityNEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewApplicantCityInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateStatusNInFilter", parameters = { @ParamDef(name = "candidateStatus", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateStatusEqFilter", parameters = { @ParamDef(name = "candidateStatus", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateStatusNEqFilter", parameters = { @ParamDef(name = "candidateStatus", type = String.class) }), @FilterDef(name = "interviewApplicantCandidateStatusInFilter", parameters = { @ParamDef(name = "candidateStatus", type = String.class) }), @FilterDef(name = "interviewApplicantExperienceInYearsGtFilter", parameters = { @ParamDef(name = "experienceInYears", type = Integer.class) }), @FilterDef(name = "interviewApplicantExperienceInYearsNInFilter", parameters = { @ParamDef(name = "experienceInYears", type = Integer.class) }), @FilterDef(name = "interviewApplicantExperienceInYearsLtEqFilter", parameters = { @ParamDef(name = "experienceInYears", type = Integer.class) }), @FilterDef(name = "interviewApplicantExperienceInYearsLtFilter", parameters = { @ParamDef(name = "experienceInYears", type = Integer.class) }), @FilterDef(name = "interviewApplicantExperienceInYearsEqFilter", parameters = { @ParamDef(name = "experienceInYears", type = Integer.class) }), @FilterDef(name = "interviewApplicantExperienceInYearsNEqFilter", parameters = { @ParamDef(name = "experienceInYears", type = Integer.class) }), @FilterDef(name = "interviewApplicantExperienceInYearsInFilter", parameters = { @ParamDef(name = "experienceInYears", type = Integer.class) }), @FilterDef(name = "interviewApplicantExperienceInYearsBwFilter", parameters = { @ParamDef(name = "experienceInYears_MIN", type = Integer.class), @ParamDef(name = "experienceInYears_MAX", type = Integer.class) }), @FilterDef(name = "interviewApplicantExperienceInYearsGtEqFilter", parameters = { @ParamDef(name = "experienceInYears", type = Integer.class) }), @FilterDef(name = "interviewApplicantPresentAddressNInFilter", parameters = { @ParamDef(name = "presentAddress", type = String.class) }), @FilterDef(name = "interviewApplicantPresentAddressEqFilter", parameters = { @ParamDef(name = "presentAddress", type = String.class) }), @FilterDef(name = "interviewApplicantPresentAddressNEqFilter", parameters = { @ParamDef(name = "presentAddress", type = String.class) }), @FilterDef(name = "interviewApplicantPresentAddressInFilter", parameters = { @ParamDef(name = "presentAddress", type = String.class) }), @FilterDef(name = "interviewApplicantStreetNInFilter", parameters = { @ParamDef(name = "street", type = String.class) }), @FilterDef(name = "interviewApplicantStreetEqFilter", parameters = { @ParamDef(name = "street", type = String.class) }), @FilterDef(name = "interviewApplicantStreetNEqFilter", parameters = { @ParamDef(name = "street", type = String.class) }), @FilterDef(name = "interviewApplicantStreetInFilter", parameters = { @ParamDef(name = "street", type = String.class) }), @FilterDef(name = "interviewApplicantCurrentJobTitleNInFilter", parameters = { @ParamDef(name = "currentJobTitle", type = String.class) }), @FilterDef(name = "interviewApplicantCurrentJobTitleEqFilter", parameters = { @ParamDef(name = "currentJobTitle", type = String.class) }), @FilterDef(name = "interviewApplicantCurrentJobTitleNEqFilter", parameters = { @ParamDef(name = "currentJobTitle", type = String.class) }), @FilterDef(name = "interviewApplicantCurrentJobTitleInFilter", parameters = { @ParamDef(name = "currentJobTitle", type = String.class) }), @FilterDef(name = "interviewApplicantWebsiteNInFilter", parameters = { @ParamDef(name = "website", type = String.class) }), @FilterDef(name = "interviewApplicantWebsiteEqFilter", parameters = { @ParamDef(name = "website", type = String.class) }), @FilterDef(name = "interviewApplicantWebsiteNEqFilter", parameters = { @ParamDef(name = "website", type = String.class) }), @FilterDef(name = "interviewApplicantWebsiteInFilter", parameters = { @ParamDef(name = "website", type = String.class) }), @FilterDef(name = "interviewApplicantSkillSetNInFilter", parameters = { @ParamDef(name = "skillSet", type = String.class) }), @FilterDef(name = "interviewApplicantSkillSetEqFilter", parameters = { @ParamDef(name = "skillSet", type = String.class) }), @FilterDef(name = "interviewApplicantSkillSetNEqFilter", parameters = { @ParamDef(name = "skillSet", type = String.class) }), @FilterDef(name = "interviewApplicantSkillSetInFilter", parameters = { @ParamDef(name = "skillSet", type = String.class) }), @FilterDef(name = "interviewApplicantMobileNInFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }), @FilterDef(name = "interviewApplicantMobileEqFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }), @FilterDef(name = "interviewApplicantMobileNEqFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }), @FilterDef(name = "interviewApplicantMobileInFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }), @FilterDef(name = "interviewCommentsForInterviewersNInFilter", parameters = { @ParamDef(name = "commentsForInterviewers", type = String.class) }), @FilterDef(name = "interviewCommentsForInterviewersEqFilter", parameters = { @ParamDef(name = "commentsForInterviewers", type = String.class) }), @FilterDef(name = "interviewCommentsForInterviewersNEqFilter", parameters = { @ParamDef(name = "commentsForInterviewers", type = String.class) }), @FilterDef(name = "interviewCommentsForInterviewersInFilter", parameters = { @ParamDef(name = "commentsForInterviewers", type = String.class) }), @FilterDef(name = "interviewDepartmentDepartmentCodeNInFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "interviewDepartmentDepartmentCodeEqFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "interviewDepartmentDepartmentCodeNEqFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "interviewDepartmentDepartmentCodeInFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "interviewDepartmentDepartmentLeadGtFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "interviewDepartmentDepartmentLeadNInFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "interviewDepartmentDepartmentLeadLtEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "interviewDepartmentDepartmentLeadLtFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "interviewDepartmentDepartmentLeadEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "interviewDepartmentDepartmentLeadNEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "interviewDepartmentDepartmentLeadInFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "interviewDepartmentDepartmentLeadBwFilter", parameters = { @ParamDef(name = "departmentLead_MIN", type = Integer.class), @ParamDef(name = "departmentLead_MAX", type = Integer.class) }), @FilterDef(name = "interviewDepartmentDepartmentLeadGtEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "interviewDepartmentIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewDepartmentIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewDepartmentIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewDepartmentIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewDepartmentIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewDepartmentIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewDepartmentIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewDepartmentIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "interviewDepartmentIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewDepartmentParentDepartmentGtFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "interviewDepartmentParentDepartmentNInFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "interviewDepartmentParentDepartmentLtEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "interviewDepartmentParentDepartmentLtFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "interviewDepartmentParentDepartmentEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "interviewDepartmentParentDepartmentNEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "interviewDepartmentParentDepartmentInFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "interviewDepartmentParentDepartmentBwFilter", parameters = { @ParamDef(name = "parentDepartment_MIN", type = Integer.class), @ParamDef(name = "parentDepartment_MAX", type = Integer.class) }), @FilterDef(name = "interviewDepartmentParentDepartmentGtEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "interviewDepartmentMailAliasNInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "interviewDepartmentMailAliasEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "interviewDepartmentMailAliasNEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "interviewDepartmentMailAliasInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "interviewDepartmentNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "interviewDepartmentNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "interviewDepartmentNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "interviewDepartmentNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "interviewDepartmentApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "interviewDepartmentApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "interviewDepartmentApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "interviewDepartmentApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "interviewDepartmentNameNInFilter_1", parameters = { @ParamDef(name = "departmentName", type = String.class) }), @FilterDef(name = "interviewDepartmentNameEqFilter", parameters = { @ParamDef(name = "departmentName", type = String.class) }), @FilterDef(name = "interviewDepartmentNameNEqFilter", parameters = { @ParamDef(name = "departmentName", type = String.class) }), @FilterDef(name = "interviewDepartmentNameInFilter", parameters = { @ParamDef(name = "departmentName", type = String.class) }), @FilterDef(name = "interviewEmployeePersonalEmailAddressNInFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "interviewEmployeePersonalEmailAddressEqFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "interviewEmployeePersonalEmailAddressNEqFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "interviewEmployeePersonalEmailAddressInFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "interviewEmployeeCountryNInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewEmployeeCountryEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewEmployeeCountryNEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewEmployeeCountryInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewEmployeeAnnualSalaryGtFilter", parameters = { @ParamDef(name = "annualSalary", type = Double.class) }), @FilterDef(name = "interviewEmployeeAnnualSalaryNInFilter", parameters = { @ParamDef(name = "annualSalary", type = Double.class) }), @FilterDef(name = "interviewEmployeeAnnualSalaryLtEqFilter", parameters = { @ParamDef(name = "annualSalary", type = Double.class) }), @FilterDef(name = "interviewEmployeeAnnualSalaryLtFilter", parameters = { @ParamDef(name = "annualSalary", type = Double.class) }), @FilterDef(name = "interviewEmployeeAnnualSalaryEqFilter", parameters = { @ParamDef(name = "annualSalary", type = Double.class) }), @FilterDef(name = "interviewEmployeeAnnualSalaryNEqFilter", parameters = { @ParamDef(name = "annualSalary", type = Double.class) }), @FilterDef(name = "interviewEmployeeAnnualSalaryInFilter", parameters = { @ParamDef(name = "annualSalary", type = Double.class) }), @FilterDef(name = "interviewEmployeeAnnualSalaryBwFilter", parameters = { @ParamDef(name = "annualSalary_MIN", type = Double.class), @ParamDef(name = "annualSalary_MAX", type = Double.class) }), @FilterDef(name = "interviewEmployeeAnnualSalaryGtEqFilter", parameters = { @ParamDef(name = "annualSalary", type = Double.class) }), @FilterDef(name = "interviewEmployeeCity1NInFilter", parameters = { @ParamDef(name = "city1", type = String.class) }), @FilterDef(name = "interviewEmployeeCity1EqFilter", parameters = { @ParamDef(name = "city1", type = String.class) }), @FilterDef(name = "interviewEmployeeCity1NEqFilter", parameters = { @ParamDef(name = "city1", type = String.class) }), @FilterDef(name = "interviewEmployeeCity1InFilter", parameters = { @ParamDef(name = "city1", type = String.class) }), @FilterDef(name = "interviewEmployeeMaritialStatusNInFilter", parameters = { @ParamDef(name = "maritialStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeMaritialStatusEqFilter", parameters = { @ParamDef(name = "maritialStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeMaritialStatusNEqFilter", parameters = { @ParamDef(name = "maritialStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeMaritialStatusInFilter", parameters = { @ParamDef(name = "maritialStatus", type = String.class) }), @FilterDef(name = "interviewEmployeePostalCodeGtFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCodeNInFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCodeLtEqFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCodeLtFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCodeEqFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCodeNEqFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCodeInFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCodeBwFilter", parameters = { @ParamDef(name = "postalCode_MIN", type = Integer.class), @ParamDef(name = "postalCode_MAX", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCodeGtEqFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "interviewEmployeeCountry1NInFilter", parameters = { @ParamDef(name = "country1", type = String.class) }), @FilterDef(name = "interviewEmployeeCountry1EqFilter", parameters = { @ParamDef(name = "country1", type = String.class) }), @FilterDef(name = "interviewEmployeeCountry1NEqFilter", parameters = { @ParamDef(name = "country1", type = String.class) }), @FilterDef(name = "interviewEmployeeCountry1InFilter", parameters = { @ParamDef(name = "country1", type = String.class) }), @FilterDef(name = "interviewEmployeeTaxesNInFilter", parameters = { @ParamDef(name = "taxes", type = String.class) }), @FilterDef(name = "interviewEmployeeTaxesEqFilter", parameters = { @ParamDef(name = "taxes", type = String.class) }), @FilterDef(name = "interviewEmployeeTaxesNEqFilter", parameters = { @ParamDef(name = "taxes", type = String.class) }), @FilterDef(name = "interviewEmployeeTaxesInFilter", parameters = { @ParamDef(name = "taxes", type = String.class) }), @FilterDef(name = "interviewEmployeeExpertiseNInFilter", parameters = { @ParamDef(name = "expertise", type = String.class) }), @FilterDef(name = "interviewEmployeeExpertiseEqFilter", parameters = { @ParamDef(name = "expertise", type = String.class) }), @FilterDef(name = "interviewEmployeeExpertiseNEqFilter", parameters = { @ParamDef(name = "expertise", type = String.class) }), @FilterDef(name = "interviewEmployeeExpertiseInFilter", parameters = { @ParamDef(name = "expertise", type = String.class) }), @FilterDef(name = "interviewEmployeeState1NInFilter", parameters = { @ParamDef(name = "state1", type = String.class) }), @FilterDef(name = "interviewEmployeeState1EqFilter", parameters = { @ParamDef(name = "state1", type = String.class) }), @FilterDef(name = "interviewEmployeeState1NEqFilter", parameters = { @ParamDef(name = "state1", type = String.class) }), @FilterDef(name = "interviewEmployeeState1InFilter", parameters = { @ParamDef(name = "state1", type = String.class) }), @FilterDef(name = "interviewEmployeePersonalMobileNumberNInFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "interviewEmployeePersonalMobileNumberEqFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "interviewEmployeePersonalMobileNumberNEqFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "interviewEmployeePersonalMobileNumberInFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine21NInFilter", parameters = { @ParamDef(name = "addressLine21", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine21EqFilter", parameters = { @ParamDef(name = "addressLine21", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine21NEqFilter", parameters = { @ParamDef(name = "addressLine21", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine21InFilter", parameters = { @ParamDef(name = "addressLine21", type = String.class) }), @FilterDef(name = "interviewEmployeeSourceHireNInFilter", parameters = { @ParamDef(name = "sourceHire", type = String.class) }), @FilterDef(name = "interviewEmployeeSourceHireEqFilter", parameters = { @ParamDef(name = "sourceHire", type = String.class) }), @FilterDef(name = "interviewEmployeeSourceHireNEqFilter", parameters = { @ParamDef(name = "sourceHire", type = String.class) }), @FilterDef(name = "interviewEmployeeSourceHireInFilter", parameters = { @ParamDef(name = "sourceHire", type = String.class) }), @FilterDef(name = "interviewEmployeeWorkPhoneNumberNInFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "interviewEmployeeWorkPhoneNumberEqFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "interviewEmployeeWorkPhoneNumberNEqFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "interviewEmployeeWorkPhoneNumberInFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "interviewEmployeeRecruitmentCostGtFilter", parameters = { @ParamDef(name = "recruitmentCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeRecruitmentCostNInFilter", parameters = { @ParamDef(name = "recruitmentCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeRecruitmentCostLtEqFilter", parameters = { @ParamDef(name = "recruitmentCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeRecruitmentCostLtFilter", parameters = { @ParamDef(name = "recruitmentCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeRecruitmentCostEqFilter", parameters = { @ParamDef(name = "recruitmentCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeRecruitmentCostNEqFilter", parameters = { @ParamDef(name = "recruitmentCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeRecruitmentCostInFilter", parameters = { @ParamDef(name = "recruitmentCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeRecruitmentCostBwFilter", parameters = { @ParamDef(name = "recruitmentCost_MIN", type = Double.class), @ParamDef(name = "recruitmentCost_MAX", type = Double.class) }), @FilterDef(name = "interviewEmployeeRecruitmentCostGtEqFilter", parameters = { @ParamDef(name = "recruitmentCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeAddressLine1NInFilter", parameters = { @ParamDef(name = "addressLine1", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine1EqFilter", parameters = { @ParamDef(name = "addressLine1", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine1NEqFilter", parameters = { @ParamDef(name = "addressLine1", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine1InFilter", parameters = { @ParamDef(name = "addressLine1", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine2NInFilter", parameters = { @ParamDef(name = "addressLine2", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine2EqFilter", parameters = { @ParamDef(name = "addressLine2", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine2NEqFilter", parameters = { @ParamDef(name = "addressLine2", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine2InFilter", parameters = { @ParamDef(name = "addressLine2", type = String.class) }), @FilterDef(name = "interviewEmployeeStateNInFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "interviewEmployeeStateEqFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "interviewEmployeeStateNEqFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "interviewEmployeeStateInFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "interviewEmployeeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewEmployeeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewEmployeeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewEmployeeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewEmployeeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewEmployeeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewEmployeeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewEmployeeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "interviewEmployeeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewEmployeeReportingManagerNInFilter", parameters = { @ParamDef(name = "reportingManager", type = String.class) }), @FilterDef(name = "interviewEmployeeReportingManagerEqFilter", parameters = { @ParamDef(name = "reportingManager", type = String.class) }), @FilterDef(name = "interviewEmployeeReportingManagerNEqFilter", parameters = { @ParamDef(name = "reportingManager", type = String.class) }), @FilterDef(name = "interviewEmployeeReportingManagerInFilter", parameters = { @ParamDef(name = "reportingManager", type = String.class) }), @FilterDef(name = "interviewEmployeeNickNameNInFilter", parameters = { @ParamDef(name = "nickName", type = String.class) }), @FilterDef(name = "interviewEmployeeNickNameEqFilter", parameters = { @ParamDef(name = "nickName", type = String.class) }), @FilterDef(name = "interviewEmployeeNickNameNEqFilter", parameters = { @ParamDef(name = "nickName", type = String.class) }), @FilterDef(name = "interviewEmployeeNickNameInFilter", parameters = { @ParamDef(name = "nickName", type = String.class) }), @FilterDef(name = "interviewEmployeeAadharCardNInFilter", parameters = { @ParamDef(name = "aadharCard", type = String.class) }), @FilterDef(name = "interviewEmployeeAadharCardEqFilter", parameters = { @ParamDef(name = "aadharCard", type = String.class) }), @FilterDef(name = "interviewEmployeeAadharCardNEqFilter", parameters = { @ParamDef(name = "aadharCard", type = String.class) }), @FilterDef(name = "interviewEmployeeAadharCardInFilter", parameters = { @ParamDef(name = "aadharCard", type = String.class) }), @FilterDef(name = "interviewEmployeeTrainingCostGtFilter", parameters = { @ParamDef(name = "trainingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeTrainingCostNInFilter", parameters = { @ParamDef(name = "trainingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeTrainingCostLtEqFilter", parameters = { @ParamDef(name = "trainingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeTrainingCostLtFilter", parameters = { @ParamDef(name = "trainingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeTrainingCostEqFilter", parameters = { @ParamDef(name = "trainingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeTrainingCostNEqFilter", parameters = { @ParamDef(name = "trainingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeTrainingCostInFilter", parameters = { @ParamDef(name = "trainingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeTrainingCostBwFilter", parameters = { @ParamDef(name = "trainingCost_MIN", type = Double.class), @ParamDef(name = "trainingCost_MAX", type = Double.class) }), @FilterDef(name = "interviewEmployeeTrainingCostGtEqFilter", parameters = { @ParamDef(name = "trainingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeTagsNInFilter", parameters = { @ParamDef(name = "tags", type = String.class) }), @FilterDef(name = "interviewEmployeeTagsEqFilter", parameters = { @ParamDef(name = "tags", type = String.class) }), @FilterDef(name = "interviewEmployeeTagsNEqFilter", parameters = { @ParamDef(name = "tags", type = String.class) }), @FilterDef(name = "interviewEmployeeTagsInFilter", parameters = { @ParamDef(name = "tags", type = String.class) }), @FilterDef(name = "interviewEmployeeFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "interviewEmployeeFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "interviewEmployeeFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "interviewEmployeeFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "interviewEmployeeTotalExperienceGtFilter", parameters = { @ParamDef(name = "totalExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeTotalExperienceNInFilter", parameters = { @ParamDef(name = "totalExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeTotalExperienceLtEqFilter", parameters = { @ParamDef(name = "totalExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeTotalExperienceLtFilter", parameters = { @ParamDef(name = "totalExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeTotalExperienceEqFilter", parameters = { @ParamDef(name = "totalExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeTotalExperienceNEqFilter", parameters = { @ParamDef(name = "totalExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeTotalExperienceInFilter", parameters = { @ParamDef(name = "totalExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeTotalExperienceBwFilter", parameters = { @ParamDef(name = "totalExperience_MIN", type = Integer.class), @ParamDef(name = "totalExperience_MAX", type = Integer.class) }), @FilterDef(name = "interviewEmployeeTotalExperienceGtEqFilter", parameters = { @ParamDef(name = "totalExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeBenefitsNInFilter", parameters = { @ParamDef(name = "benefits", type = String.class) }), @FilterDef(name = "interviewEmployeeBenefitsEqFilter", parameters = { @ParamDef(name = "benefits", type = String.class) }), @FilterDef(name = "interviewEmployeeBenefitsNEqFilter", parameters = { @ParamDef(name = "benefits", type = String.class) }), @FilterDef(name = "interviewEmployeeBenefitsInFilter", parameters = { @ParamDef(name = "benefits", type = String.class) }), @FilterDef(name = "interviewEmployeePostalCode1GtFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCode1NInFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCode1LtEqFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCode1LtFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCode1EqFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCode1NEqFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCode1InFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCode1BwFilter", parameters = { @ParamDef(name = "postalCode1_MIN", type = Integer.class), @ParamDef(name = "postalCode1_MAX", type = Integer.class) }), @FilterDef(name = "interviewEmployeePostalCode1GtEqFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "interviewEmployeeLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "interviewEmployeeLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "interviewEmployeeLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "interviewEmployeeLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "interviewEmployeeExtensionNInFilter", parameters = { @ParamDef(name = "extension", type = String.class) }), @FilterDef(name = "interviewEmployeeExtensionEqFilter", parameters = { @ParamDef(name = "extension", type = String.class) }), @FilterDef(name = "interviewEmployeeExtensionNEqFilter", parameters = { @ParamDef(name = "extension", type = String.class) }), @FilterDef(name = "interviewEmployeeExtensionInFilter", parameters = { @ParamDef(name = "extension", type = String.class) }), @FilterDef(name = "interviewEmployeeGenderNInFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "interviewEmployeeGenderEqFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "interviewEmployeeGenderNEqFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "interviewEmployeeGenderInFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "interviewEmployeeCityNInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewEmployeeCityEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewEmployeeCityNEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewEmployeeCityInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewEmployeeAboutMeNInFilter", parameters = { @ParamDef(name = "aboutMe", type = String.class) }), @FilterDef(name = "interviewEmployeeAboutMeEqFilter", parameters = { @ParamDef(name = "aboutMe", type = String.class) }), @FilterDef(name = "interviewEmployeeAboutMeNEqFilter", parameters = { @ParamDef(name = "aboutMe", type = String.class) }), @FilterDef(name = "interviewEmployeeAboutMeInFilter", parameters = { @ParamDef(name = "aboutMe", type = String.class) }), @FilterDef(name = "interviewEmployeeOnboardingStatusNInFilter", parameters = { @ParamDef(name = "onboardingStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeOnboardingStatusEqFilter", parameters = { @ParamDef(name = "onboardingStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeOnboardingStatusNEqFilter", parameters = { @ParamDef(name = "onboardingStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeOnboardingStatusInFilter", parameters = { @ParamDef(name = "onboardingStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeOrgRoleNInFilter", parameters = { @ParamDef(name = "orgRole", type = String.class) }), @FilterDef(name = "interviewEmployeeOrgRoleEqFilter", parameters = { @ParamDef(name = "orgRole", type = String.class) }), @FilterDef(name = "interviewEmployeeOrgRoleNEqFilter", parameters = { @ParamDef(name = "orgRole", type = String.class) }), @FilterDef(name = "interviewEmployeeOrgRoleInFilter", parameters = { @ParamDef(name = "orgRole", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployementTypeNInFilter", parameters = { @ParamDef(name = "employementType", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployementTypeEqFilter", parameters = { @ParamDef(name = "employementType", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployementTypeNEqFilter", parameters = { @ParamDef(name = "employementType", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployementTypeInFilter", parameters = { @ParamDef(name = "employementType", type = String.class) }), @FilterDef(name = "interviewEmployeeSeatingLocationNInFilter", parameters = { @ParamDef(name = "seatingLocation", type = String.class) }), @FilterDef(name = "interviewEmployeeSeatingLocationEqFilter", parameters = { @ParamDef(name = "seatingLocation", type = String.class) }), @FilterDef(name = "interviewEmployeeSeatingLocationNEqFilter", parameters = { @ParamDef(name = "seatingLocation", type = String.class) }), @FilterDef(name = "interviewEmployeeSeatingLocationInFilter", parameters = { @ParamDef(name = "seatingLocation", type = String.class) }), @FilterDef(name = "interviewEmployeeOnboardingCostGtFilter", parameters = { @ParamDef(name = "onboardingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeOnboardingCostNInFilter", parameters = { @ParamDef(name = "onboardingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeOnboardingCostLtEqFilter", parameters = { @ParamDef(name = "onboardingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeOnboardingCostLtFilter", parameters = { @ParamDef(name = "onboardingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeOnboardingCostEqFilter", parameters = { @ParamDef(name = "onboardingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeOnboardingCostNEqFilter", parameters = { @ParamDef(name = "onboardingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeOnboardingCostInFilter", parameters = { @ParamDef(name = "onboardingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeOnboardingCostBwFilter", parameters = { @ParamDef(name = "onboardingCost_MIN", type = Double.class), @ParamDef(name = "onboardingCost_MAX", type = Double.class) }), @FilterDef(name = "interviewEmployeeOnboardingCostGtEqFilter", parameters = { @ParamDef(name = "onboardingCost", type = Double.class) }), @FilterDef(name = "interviewEmployeeBonusesGtFilter", parameters = { @ParamDef(name = "bonuses", type = Double.class) }), @FilterDef(name = "interviewEmployeeBonusesNInFilter", parameters = { @ParamDef(name = "bonuses", type = Double.class) }), @FilterDef(name = "interviewEmployeeBonusesLtEqFilter", parameters = { @ParamDef(name = "bonuses", type = Double.class) }), @FilterDef(name = "interviewEmployeeBonusesLtFilter", parameters = { @ParamDef(name = "bonuses", type = Double.class) }), @FilterDef(name = "interviewEmployeeBonusesEqFilter", parameters = { @ParamDef(name = "bonuses", type = Double.class) }), @FilterDef(name = "interviewEmployeeBonusesNEqFilter", parameters = { @ParamDef(name = "bonuses", type = Double.class) }), @FilterDef(name = "interviewEmployeeBonusesInFilter", parameters = { @ParamDef(name = "bonuses", type = Double.class) }), @FilterDef(name = "interviewEmployeeBonusesBwFilter", parameters = { @ParamDef(name = "bonuses_MIN", type = Double.class), @ParamDef(name = "bonuses_MAX", type = Double.class) }), @FilterDef(name = "interviewEmployeeBonusesGtEqFilter", parameters = { @ParamDef(name = "bonuses", type = Double.class) }), @FilterDef(name = "interviewEmployeeEmailNInFilter", parameters = { @ParamDef(name = "email", type = String.class) }), @FilterDef(name = "interviewEmployeeEmailEqFilter", parameters = { @ParamDef(name = "email", type = String.class) }), @FilterDef(name = "interviewEmployeeEmailNEqFilter", parameters = { @ParamDef(name = "email", type = String.class) }), @FilterDef(name = "interviewEmployeeEmailInFilter", parameters = { @ParamDef(name = "email", type = String.class) }), @FilterDef(name = "interviewEmployeeApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeUniqueIdentificationNInFilter", parameters = { @ParamDef(name = "uniqueIdentification", type = String.class) }), @FilterDef(name = "interviewEmployeeUniqueIdentificationEqFilter", parameters = { @ParamDef(name = "uniqueIdentification", type = String.class) }), @FilterDef(name = "interviewEmployeeUniqueIdentificationNEqFilter", parameters = { @ParamDef(name = "uniqueIdentification", type = String.class) }), @FilterDef(name = "interviewEmployeeUniqueIdentificationInFilter", parameters = { @ParamDef(name = "uniqueIdentification", type = String.class) }), @FilterDef(name = "interviewEmployeeDateOfBirthGtFilter", parameters = { @ParamDef(name = "dateOfBirth", type = String.class) }), @FilterDef(name = "interviewEmployeeDateOfBirthLtFilter", parameters = { @ParamDef(name = "dateOfBirth", type = String.class) }), @FilterDef(name = "interviewEmployeeDateOfBirthBwFilter", parameters = { @ParamDef(name = "dateOfBirth_MIN", type = String.class), @ParamDef(name = "dateOfBirth_MAX", type = String.class) }), @FilterDef(name = "interviewEmployeeDateOfExitGtFilter", parameters = { @ParamDef(name = "dateOfExit", type = String.class) }), @FilterDef(name = "interviewEmployeeDateOfExitLtFilter", parameters = { @ParamDef(name = "dateOfExit", type = String.class) }), @FilterDef(name = "interviewEmployeeDateOfExitBwFilter", parameters = { @ParamDef(name = "dateOfExit_MIN", type = String.class), @ParamDef(name = "dateOfExit_MAX", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployeeIdNInFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployeeIdEqFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployeeIdNEqFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployeeIdInFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "interviewEmployeeDateOfJoiningGtFilter", parameters = { @ParamDef(name = "dateOfJoining", type = String.class) }), @FilterDef(name = "interviewEmployeeDateOfJoiningLtFilter", parameters = { @ParamDef(name = "dateOfJoining", type = String.class) }), @FilterDef(name = "interviewEmployeeDateOfJoiningBwFilter", parameters = { @ParamDef(name = "dateOfJoining_MIN", type = String.class), @ParamDef(name = "dateOfJoining_MAX", type = String.class) }), @FilterDef(name = "interviewEmployeeCurrentExperienceGtFilter", parameters = { @ParamDef(name = "currentExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeCurrentExperienceNInFilter", parameters = { @ParamDef(name = "currentExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeCurrentExperienceLtEqFilter", parameters = { @ParamDef(name = "currentExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeCurrentExperienceLtFilter", parameters = { @ParamDef(name = "currentExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeCurrentExperienceEqFilter", parameters = { @ParamDef(name = "currentExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeCurrentExperienceNEqFilter", parameters = { @ParamDef(name = "currentExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeCurrentExperienceInFilter", parameters = { @ParamDef(name = "currentExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeCurrentExperienceBwFilter", parameters = { @ParamDef(name = "currentExperience_MIN", type = Integer.class), @ParamDef(name = "currentExperience_MAX", type = Integer.class) }), @FilterDef(name = "interviewEmployeeCurrentExperienceGtEqFilter", parameters = { @ParamDef(name = "currentExperience", type = Integer.class) }), @FilterDef(name = "interviewEmployeeAddressLine11NInFilter", parameters = { @ParamDef(name = "addressLine11", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine11EqFilter", parameters = { @ParamDef(name = "addressLine11", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine11NEqFilter", parameters = { @ParamDef(name = "addressLine11", type = String.class) }), @FilterDef(name = "interviewEmployeeAddressLine11InFilter", parameters = { @ParamDef(name = "addressLine11", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployementStatusNInFilter", parameters = { @ParamDef(name = "employementStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployementStatusEqFilter", parameters = { @ParamDef(name = "employementStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployementStatusNEqFilter", parameters = { @ParamDef(name = "employementStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeEmployementStatusInFilter", parameters = { @ParamDef(name = "employementStatus", type = String.class) }), @FilterDef(name = "interviewEmployeeAllowancesNInFilter", parameters = { @ParamDef(name = "allowances", type = String.class) }), @FilterDef(name = "interviewEmployeeAllowancesEqFilter", parameters = { @ParamDef(name = "allowances", type = String.class) }), @FilterDef(name = "interviewEmployeeAllowancesNEqFilter", parameters = { @ParamDef(name = "allowances", type = String.class) }), @FilterDef(name = "interviewEmployeeAllowancesInFilter", parameters = { @ParamDef(name = "allowances", type = String.class) }), @FilterDef(name = "interviewEmployeeAgeGtFilter", parameters = { @ParamDef(name = "age", type = Integer.class) }), @FilterDef(name = "interviewEmployeeAgeNInFilter", parameters = { @ParamDef(name = "age", type = Integer.class) }), @FilterDef(name = "interviewEmployeeAgeLtEqFilter", parameters = { @ParamDef(name = "age", type = Integer.class) }), @FilterDef(name = "interviewEmployeeAgeLtFilter", parameters = { @ParamDef(name = "age", type = Integer.class) }), @FilterDef(name = "interviewEmployeeAgeEqFilter", parameters = { @ParamDef(name = "age", type = Integer.class) }), @FilterDef(name = "interviewEmployeeAgeNEqFilter", parameters = { @ParamDef(name = "age", type = Integer.class) }), @FilterDef(name = "interviewEmployeeAgeInFilter", parameters = { @ParamDef(name = "age", type = Integer.class) }), @FilterDef(name = "interviewEmployeeAgeBwFilter", parameters = { @ParamDef(name = "age_MIN", type = Integer.class), @ParamDef(name = "age_MAX", type = Integer.class) }), @FilterDef(name = "interviewEmployeeAgeGtEqFilter", parameters = { @ParamDef(name = "age", type = Integer.class) }), @FilterDef(name = "interviewFromDateGtFilter", parameters = { @ParamDef(name = "fromDate", type = String.class) }), @FilterDef(name = "interviewFromDateLtFilter", parameters = { @ParamDef(name = "fromDate", type = String.class) }), @FilterDef(name = "interviewFromDateBwFilter", parameters = { @ParamDef(name = "fromDate_MIN", type = String.class), @ParamDef(name = "fromDate_MAX", type = String.class) }), @FilterDef(name = "interviewIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "interviewIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewInterviewOwnerNInFilter", parameters = { @ParamDef(name = "interviewOwner", type = String.class) }), @FilterDef(name = "interviewInterviewOwnerEqFilter", parameters = { @ParamDef(name = "interviewOwner", type = String.class) }), @FilterDef(name = "interviewInterviewOwnerNEqFilter", parameters = { @ParamDef(name = "interviewOwner", type = String.class) }), @FilterDef(name = "interviewInterviewOwnerInFilter", parameters = { @ParamDef(name = "interviewOwner", type = String.class) }), @FilterDef(name = "interviewJobOpeningCountryNInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewJobOpeningCountryEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewJobOpeningCountryNEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewJobOpeningCountryInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment3NInFilter", parameters = { @ParamDef(name = "attachment3", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment3EqFilter", parameters = { @ParamDef(name = "attachment3", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment3NEqFilter", parameters = { @ParamDef(name = "attachment3", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment3InFilter", parameters = { @ParamDef(name = "attachment3", type = String.class) }), @FilterDef(name = "interviewJobOpeningWorkExperienceNInFilter", parameters = { @ParamDef(name = "workExperience", type = String.class) }), @FilterDef(name = "interviewJobOpeningWorkExperienceEqFilter", parameters = { @ParamDef(name = "workExperience", type = String.class) }), @FilterDef(name = "interviewJobOpeningWorkExperienceNEqFilter", parameters = { @ParamDef(name = "workExperience", type = String.class) }), @FilterDef(name = "interviewJobOpeningWorkExperienceInFilter", parameters = { @ParamDef(name = "workExperience", type = String.class) }), @FilterDef(name = "interviewJobOpeningPostingTitleNInFilter", parameters = { @ParamDef(name = "postingTitle", type = String.class) }), @FilterDef(name = "interviewJobOpeningPostingTitleEqFilter", parameters = { @ParamDef(name = "postingTitle", type = String.class) }), @FilterDef(name = "interviewJobOpeningPostingTitleNEqFilter", parameters = { @ParamDef(name = "postingTitle", type = String.class) }), @FilterDef(name = "interviewJobOpeningPostingTitleInFilter", parameters = { @ParamDef(name = "postingTitle", type = String.class) }), @FilterDef(name = "interviewJobOpeningSkillsNInFilter", parameters = { @ParamDef(name = "skills", type = String.class) }), @FilterDef(name = "interviewJobOpeningSkillsEqFilter", parameters = { @ParamDef(name = "skills", type = String.class) }), @FilterDef(name = "interviewJobOpeningSkillsNEqFilter", parameters = { @ParamDef(name = "skills", type = String.class) }), @FilterDef(name = "interviewJobOpeningSkillsInFilter", parameters = { @ParamDef(name = "skills", type = String.class) }), @FilterDef(name = "interviewJobOpeningDateOpenedGtFilter", parameters = { @ParamDef(name = "dateOpened", type = String.class) }), @FilterDef(name = "interviewJobOpeningDateOpenedLtFilter", parameters = { @ParamDef(name = "dateOpened", type = String.class) }), @FilterDef(name = "interviewJobOpeningDateOpenedBwFilter", parameters = { @ParamDef(name = "dateOpened_MIN", type = String.class), @ParamDef(name = "dateOpened_MAX", type = String.class) }), @FilterDef(name = "interviewJobOpeningProvinceNInFilter", parameters = { @ParamDef(name = "province", type = String.class) }), @FilterDef(name = "interviewJobOpeningProvinceEqFilter", parameters = { @ParamDef(name = "province", type = String.class) }), @FilterDef(name = "interviewJobOpeningProvinceNEqFilter", parameters = { @ParamDef(name = "province", type = String.class) }), @FilterDef(name = "interviewJobOpeningProvinceInFilter", parameters = { @ParamDef(name = "province", type = String.class) }), @FilterDef(name = "interviewJobOpeningIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningAttachment2NInFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment2EqFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment2NEqFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment2InFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment1NInFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment1EqFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment1NEqFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "interviewJobOpeningAttachment1InFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "interviewJobOpeningTargetClossingDateGtFilter", parameters = { @ParamDef(name = "targetClossingDate", type = String.class) }), @FilterDef(name = "interviewJobOpeningTargetClossingDateLtFilter", parameters = { @ParamDef(name = "targetClossingDate", type = String.class) }), @FilterDef(name = "interviewJobOpeningTargetClossingDateBwFilter", parameters = { @ParamDef(name = "targetClossingDate_MIN", type = String.class), @ParamDef(name = "targetClossingDate_MAX", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobOpeningStatusNInFilter", parameters = { @ParamDef(name = "jobOpeningStatus", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobOpeningStatusEqFilter", parameters = { @ParamDef(name = "jobOpeningStatus", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobOpeningStatusNEqFilter", parameters = { @ParamDef(name = "jobOpeningStatus", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobOpeningStatusInFilter", parameters = { @ParamDef(name = "jobOpeningStatus", type = String.class) }), @FilterDef(name = "interviewJobOpeningHiringManagerNInFilter", parameters = { @ParamDef(name = "hiringManager", type = String.class) }), @FilterDef(name = "interviewJobOpeningHiringManagerEqFilter", parameters = { @ParamDef(name = "hiringManager", type = String.class) }), @FilterDef(name = "interviewJobOpeningHiringManagerNEqFilter", parameters = { @ParamDef(name = "hiringManager", type = String.class) }), @FilterDef(name = "interviewJobOpeningHiringManagerInFilter", parameters = { @ParamDef(name = "hiringManager", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobIdNInFilter", parameters = { @ParamDef(name = "jobId", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobIdEqFilter", parameters = { @ParamDef(name = "jobId", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobIdNEqFilter", parameters = { @ParamDef(name = "jobId", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobIdInFilter", parameters = { @ParamDef(name = "jobId", type = String.class) }), @FilterDef(name = "interviewJobOpeningAssignedrecruiterNInFilter", parameters = { @ParamDef(name = "assignedrecruiter", type = String.class) }), @FilterDef(name = "interviewJobOpeningAssignedrecruiterEqFilter", parameters = { @ParamDef(name = "assignedrecruiter", type = String.class) }), @FilterDef(name = "interviewJobOpeningAssignedrecruiterNEqFilter", parameters = { @ParamDef(name = "assignedrecruiter", type = String.class) }), @FilterDef(name = "interviewJobOpeningAssignedrecruiterInFilter", parameters = { @ParamDef(name = "assignedrecruiter", type = String.class) }), @FilterDef(name = "interviewJobOpeningOpenPositionsGtFilter", parameters = { @ParamDef(name = "openPositions", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningOpenPositionsNInFilter", parameters = { @ParamDef(name = "openPositions", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningOpenPositionsLtEqFilter", parameters = { @ParamDef(name = "openPositions", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningOpenPositionsLtFilter", parameters = { @ParamDef(name = "openPositions", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningOpenPositionsEqFilter", parameters = { @ParamDef(name = "openPositions", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningOpenPositionsNEqFilter", parameters = { @ParamDef(name = "openPositions", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningOpenPositionsInFilter", parameters = { @ParamDef(name = "openPositions", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningOpenPositionsBwFilter", parameters = { @ParamDef(name = "openPositions_MIN", type = Integer.class), @ParamDef(name = "openPositions_MAX", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningOpenPositionsGtEqFilter", parameters = { @ParamDef(name = "openPositions", type = Integer.class) }), @FilterDef(name = "interviewJobOpeningCityNInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewJobOpeningCityEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewJobOpeningCityNEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewJobOpeningCityInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "interviewJobOpeningIndustryNInFilter", parameters = { @ParamDef(name = "industry", type = String.class) }), @FilterDef(name = "interviewJobOpeningIndustryEqFilter", parameters = { @ParamDef(name = "industry", type = String.class) }), @FilterDef(name = "interviewJobOpeningIndustryNEqFilter", parameters = { @ParamDef(name = "industry", type = String.class) }), @FilterDef(name = "interviewJobOpeningIndustryInFilter", parameters = { @ParamDef(name = "industry", type = String.class) }), @FilterDef(name = "interviewJobOpeningPostalcodeNInFilter", parameters = { @ParamDef(name = "postalcode", type = String.class) }), @FilterDef(name = "interviewJobOpeningPostalcodeEqFilter", parameters = { @ParamDef(name = "postalcode", type = String.class) }), @FilterDef(name = "interviewJobOpeningPostalcodeNEqFilter", parameters = { @ParamDef(name = "postalcode", type = String.class) }), @FilterDef(name = "interviewJobOpeningPostalcodeInFilter", parameters = { @ParamDef(name = "postalcode", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobTypeNInFilter", parameters = { @ParamDef(name = "jobType", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobTypeEqFilter", parameters = { @ParamDef(name = "jobType", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobTypeNEqFilter", parameters = { @ParamDef(name = "jobType", type = String.class) }), @FilterDef(name = "interviewJobOpeningJobTypeInFilter", parameters = { @ParamDef(name = "jobType", type = String.class) }), @FilterDef(name = "interviewJobOpeningSalaryRangeNInFilter", parameters = { @ParamDef(name = "salaryRange", type = String.class) }), @FilterDef(name = "interviewJobOpeningSalaryRangeEqFilter", parameters = { @ParamDef(name = "salaryRange", type = String.class) }), @FilterDef(name = "interviewJobOpeningSalaryRangeNEqFilter", parameters = { @ParamDef(name = "salaryRange", type = String.class) }), @FilterDef(name = "interviewJobOpeningSalaryRangeInFilter", parameters = { @ParamDef(name = "salaryRange", type = String.class) }), @FilterDef(name = "interviewJobOpeningAddressNInFilter", parameters = { @ParamDef(name = "address", type = String.class) }), @FilterDef(name = "interviewJobOpeningAddressEqFilter", parameters = { @ParamDef(name = "address", type = String.class) }), @FilterDef(name = "interviewJobOpeningAddressNEqFilter", parameters = { @ParamDef(name = "address", type = String.class) }), @FilterDef(name = "interviewJobOpeningAddressInFilter", parameters = { @ParamDef(name = "address", type = String.class) }), @FilterDef(name = "interviewJobOpeningIsRemoteNInFilter", parameters = { @ParamDef(name = "isRemote", type = String.class) }), @FilterDef(name = "interviewJobOpeningIsRemoteEqFilter", parameters = { @ParamDef(name = "isRemote", type = String.class) }), @FilterDef(name = "interviewJobOpeningIsRemoteNEqFilter", parameters = { @ParamDef(name = "isRemote", type = String.class) }), @FilterDef(name = "interviewJobOpeningIsRemoteInFilter", parameters = { @ParamDef(name = "isRemote", type = String.class) }), @FilterDef(name = "interviewJobOpeningDescriptionRequirementsNInFilter", parameters = { @ParamDef(name = "descriptionRequirements", type = String.class) }), @FilterDef(name = "interviewJobOpeningDescriptionRequirementsEqFilter", parameters = { @ParamDef(name = "descriptionRequirements", type = String.class) }), @FilterDef(name = "interviewJobOpeningDescriptionRequirementsNEqFilter", parameters = { @ParamDef(name = "descriptionRequirements", type = String.class) }), @FilterDef(name = "interviewJobOpeningDescriptionRequirementsInFilter", parameters = { @ParamDef(name = "descriptionRequirements", type = String.class) }), @FilterDef(name = "interviewLocationNInFilter", parameters = { @ParamDef(name = "location", type = String.class) }), @FilterDef(name = "interviewLocationEqFilter", parameters = { @ParamDef(name = "location", type = String.class) }), @FilterDef(name = "interviewLocationNEqFilter", parameters = { @ParamDef(name = "location", type = String.class) }), @FilterDef(name = "interviewLocationInFilter", parameters = { @ParamDef(name = "location", type = String.class) }), @FilterDef(name = "interviewNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "interviewNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "interviewNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "interviewNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "interviewToDateGtFilter", parameters = { @ParamDef(name = "toDate", type = String.class) }), @FilterDef(name = "interviewToDateLtFilter", parameters = { @ParamDef(name = "toDate", type = String.class) }), @FilterDef(name = "interviewToDateBwFilter", parameters = { @ParamDef(name = "toDate_MIN", type = String.class), @ParamDef(name = "toDate_MAX", type = String.class) }), @FilterDef(name = "interviewWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "interviewWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "interviewWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "interviewWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "interviewWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "interviewWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "interviewWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "interviewWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "interviewWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Interview extends BaseEntitySaaS{

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "APPLICANT_ID", columnDefinition = "INT")
	private Applicant applicant;

	@Size(max = 100)
	@Basic
	@Column(name = "COMMENTS_FOR_INTERVIEWERS", length = 100)
	private String commentsForInterviewers;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "DEPARTMENT_ID", columnDefinition = "INT")
	private Department department;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "JOB_APPLICATION_ID", columnDefinition = "INT")
	private JobApplication jobApplication;

	@Size(max = 300)
	@Basic
	@Column(name = "INTERVIEW_JOIN_LINK", length = 300)
	private String interviewJoinLink;

	@Basic
	@Column(columnDefinition = "LONGTEXT", name = "MEETING_DESCRIPTION")
	private String meetingDescription;

	@Size(max = 100)
	@Basic
	@Column(name = "DEPARTMENT_NAME", length = 100)
	private String departmentName;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "INTERVIEWER", columnDefinition = "INT")
	private Employee employee;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "INTERVIEWER_RECRUITER", columnDefinition = "INT")
	private Employee interviewerRecruiter;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "INTERVIEWER_MANAGER", columnDefinition = "INT")
	private Employee interviewerManager;

	@Basic
	@Column(name = "FROM_DATE", length = 19)
	private Date fromDate;

	@GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
	@Id
	@Column(columnDefinition = "INT")
	private Integer id;

	@Size(max = 100)
	@Basic
	@Column(name = "INTERVIEW_OWNER", length = 100)
	private String interviewOwner;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "JOB_OPENING_ID", columnDefinition = "INT")
	private JobOpening jobOpening;

	@Basic
	@Column(name = "OVERALL_IMPRESSION_VALUE", columnDefinition = "ENUM('Hire', 'Hold', 'Reject', 'Refer to other departments')", length = 4)
	private String overallImpressionValue;

	@Basic
	@Column(name = "POTENTIAL_STRENGTHS", length = 200)
	private String potentialStrengths;

	@Basic
	@Column(name = "POSSIBLE_WEAKNESS", length = 300)
	private String possibleWeakness;

	@Size(max = 100)
	@Basic
	@Column(length = 100)
	private String location;

	@Size(max = 100)
	@Basic
	@Column(length = 100)
	private String name;

	@Basic
	@Column(name = "IS_FEEDBACK_UPDATED")
	private Boolean isFeedbackUpdated;

	@Basic
	@Column(name = "TO_DATE", length = 19)
	private Date toDate;

	@Basic
	@Column(name = "WORKSPACE_ID", columnDefinition = "INT")
	private Integer workspaceId;

	@Column(name = "PROCESS_INSTANCE_ID")
	private String processInstanceId;

	@Column(name = "WORKFLOW_STAGE")
	private String workflowStage;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "REFERRED_DEPARTMENT", columnDefinition = "INT")
	private Department referredDepartment;

	@Size(max = 100)
	@Basic
	@Column(name = "TEST_RESULTS", length = 100)
	private String testResults;

	@Basic
	@Column(name = "INTERVIEW_START_TIME", length = 19)
	private Date interviewStartTime;

	@Basic
	@Column(name = "INTERVIEW_END_TIME", length = 19)
	private Date interviewEndTime;

	@Basic
	@Column(name = "APPLICANT_SCHEDULED_COUNT", columnDefinition = "INT")
	private Integer applicantScheduledCount;

	@Basic
	@Column(name = "INTERVIEWER_SCHEDULED_COUNT", columnDefinition = "INT")
	private Integer interviewerScheduledCount;
	
	@Basic
	@Column(name = "INTERVIEWER_RECRUITER_COUNT", columnDefinition = "INT")
	private Integer interviewerRecruiterCount;
	
	@Basic
	@Column(name = "INTERVIEWER_MANAGER_COUNT", columnDefinition = "INT")
	private Integer interviewerManagerCount;
	
	@Basic
	@Column(name = "INTERVIEWER_ACCEPT", columnDefinition = "ENUM('Accept', 'Reject', 'No response')")
	private String interviewerAccept;
	
	@Basic
	@Column(name = "INTERVIEWER_MANAGER_ACCEPT", columnDefinition = "ENUM('Accept', 'Reject', 'No response')")
	private String interviewerManagerAccept;
	
	@Basic
	@Column(name = "INTERVIEWER_RECRUITER_ACCEPT", columnDefinition = "ENUM('Accept', 'Reject', 'No response')")
	private String interviewerRecruiterAccept;
	
	

	public Integer getInterviewerScheduledCount() {
		return interviewerScheduledCount;
	}

	public void setInterviewerScheduledCount(Integer interviewerScheduledCount) {
		this.interviewerScheduledCount = interviewerScheduledCount;
	}

	public Date getInterviewStartTime() {
		return interviewStartTime;
	}

	public void setInterviewStartTime(Date interviewStartTime) {
		this.interviewStartTime = interviewStartTime;
	}

	public Date getInterviewEndTime() {
		return interviewEndTime;
	}

	public void setInterviewEndTime(Date interviewEndTime) {
		this.interviewEndTime = interviewEndTime;
	}

	public Employee getInterviewerRecruiter() {
		return interviewerRecruiter;
	}

	public void setInterviewerRecruiter(Employee interviewerRecruiter) {
		this.interviewerRecruiter = interviewerRecruiter;
	}

	public Employee getInterviewerManager() {
		return interviewerManager;
	}

	public void setInterviewerManager(Employee interviewerManager) {
		this.interviewerManager = interviewerManager;
	}

	public Department getReferredDepartment() {
		return referredDepartment;
	}

	public void setReferredDepartment(Department referredDepartment) {
		this.referredDepartment = referredDepartment;
	}

	public String getTestResults() {
		return testResults;
	}

	public void setTestResults(String testResults) {
		this.testResults = testResults;
	}

	public Interview() {
	}

	public Boolean getIsFeedbackUpdated() {
		return isFeedbackUpdated;
	}

	public void setIsFeedbackUpdated(Boolean isFeedbackUpdated) {
		this.isFeedbackUpdated = isFeedbackUpdated;
	}

	public Interview(Integer id) {
		this.id = id;
	}

	public Applicant getApplicant() {
		return applicant;
	}

	public void setApplicant(Applicant applicant) {
		this.applicant = applicant;
	}

	public String getCommentsForInterviewers() {
		return commentsForInterviewers;
	}

	public void setCommentsForInterviewers(String commentsForInterviewers) {
		this.commentsForInterviewers = commentsForInterviewers;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	public String getDepartmentName() {
		return departmentName;
	}

	public void setDepartmentName(String departmentName) {
		this.departmentName = departmentName;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	public Date getFromDate() {
		return fromDate;
	}

	public void setFromDate(Date fromDate) {
		this.fromDate = fromDate;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getInterviewOwner() {
		return interviewOwner;
	}

	public void setInterviewOwner(String interviewOwner) {
		this.interviewOwner = interviewOwner;
	}

	public JobOpening getJobOpening() {
		return jobOpening;
	}

	public void setJobOpening(JobOpening jobOpening) {
		this.jobOpening = jobOpening;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	public JobApplication getJobApplication() {
		return jobApplication;
	}

	public void setJobApplication(JobApplication jobApplication) {
		this.jobApplication = jobApplication;
	}

	public String getName() {
		return name;
	}

	public String getOverallImpressionValue() {
		return overallImpressionValue;
	}

	public void setOverallImpressionValue(String overallImpressionValue) {
		this.overallImpressionValue = overallImpressionValue;
	}

	public String getPotentialStrengths() {
		return potentialStrengths;
	}

	public void setPotentialStrengths(String overallImpressionComment) {
		this.potentialStrengths = overallImpressionComment;
	}

	public String getPossibleWeakness() {
		return possibleWeakness;
	}

	public void setPossibleWeakness(String overallImpressionQuestion) {
		this.possibleWeakness = overallImpressionQuestion;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Date getToDate() {
		return toDate;
	}

	public void setToDate(Date toDate) {
		this.toDate = toDate;
	}

	public Integer getWorkspaceId() {
		return workspaceId;
	}

	public void setWorkspaceId(Integer workspaceId) {
		this.workspaceId = workspaceId;
	}

	public String getProcessInstanceId() {
		return processInstanceId;
	}

	public void setProcessInstanceId(String processInstanceId) {
		this.processInstanceId = processInstanceId;
	}

	public String getWorkflowStage() {
		return workflowStage;
	}

	public void setWorkflowStage(String workflowStage) {
		this.workflowStage = workflowStage;
	}

	public String getInterviewJoinLink() {
		return interviewJoinLink;
	}

	public void setInterviewJoinLink(String interviewJoinLink) {
		this.interviewJoinLink = interviewJoinLink;
	}

	public String getMeetingDescription() {
		return meetingDescription;
	}

	public void setMeetingDescription(String meetingDescription) {
		this.meetingDescription = meetingDescription;
	}

	public Integer getApplicantScheduledCount() {
		return applicantScheduledCount;
	}

	public void setApplicantScheduledCount(Integer applicantScheduledCount) {
		this.applicantScheduledCount = applicantScheduledCount;
	}
	
	

	public Integer getInterviewerRecruiterCount() {
		return interviewerRecruiterCount;
	}

	@Override
	public String toString() {
		return "Interview [applicant=" + applicant + ", commentsForInterviewers=" + commentsForInterviewers
				+ ", department=" + department + ", jobApplication=" + jobApplication + ", interviewJoinLink="
				+ interviewJoinLink + ", meetingDescription=" + meetingDescription + ", departmentName="
				+ departmentName + ", employee=" + employee + ", interviewerRecruiter=" + interviewerRecruiter
				+ ", interviewerManager=" + interviewerManager + ", fromDate=" + fromDate + ", id=" + id
				+ ", interviewOwner=" + interviewOwner + ", jobOpening=" + jobOpening + ", overallImpressionValue="
				+ overallImpressionValue + ", potentialStrengths=" + potentialStrengths + ", possibleWeakness="
				+ possibleWeakness + ", location=" + location + ", name=" + name + ", isFeedbackUpdated="
				+ isFeedbackUpdated + ", toDate=" + toDate + ", workspaceId=" + workspaceId + ", processInstanceId="
				+ processInstanceId + ", workflowStage=" + workflowStage + ", referredDepartment=" + referredDepartment
				+ ", testResults=" + testResults + ", interviewStartTime=" + interviewStartTime + ", interviewEndTime="
				+ interviewEndTime + ", applicantScheduledCount=" + applicantScheduledCount
				+ ", interviewerScheduledCount=" + interviewerScheduledCount + ", interviewerRecruiterCount="
				+ interviewerRecruiterCount + ", interviewerManagerCount=" + interviewerManagerCount
				+ ", interviewerAccept=" + interviewerAccept + ", interviewerManagerAccept=" + interviewerManagerAccept
				+ ", interviewerRecruiterAccept=" + interviewerRecruiterAccept + "]";
	}

	public void setInterviewerRecruiterCount(Integer interviewerRecruiterCount) {
		this.interviewerRecruiterCount = interviewerRecruiterCount;
	}

	public Integer getInterviewerManagerCount() {
		return interviewerManagerCount;
	}

	public void setInterviewerManagerCount(Integer interviewerManagerCount) {
		this.interviewerManagerCount = interviewerManagerCount;
	}

	public String getInterviewerAccept() {
		return interviewerAccept;
	}

	public void setInterviewerAccept(String interviewerAccept) {
		this.interviewerAccept = interviewerAccept;
	}

	public String getInterviewerManagerAccept() {
		return interviewerManagerAccept;
	}

	public void setInterviewerManagerAccept(String interviewerManagerAccept) {
		this.interviewerManagerAccept = interviewerManagerAccept;
	}

	public String getInterviewerRecruiterAccept() {
		return interviewerRecruiterAccept;
	}

	public void setInterviewerRecruiterAccept(String interviewerRecruiterAccept) {
		this.interviewerRecruiterAccept = interviewerRecruiterAccept;
	}

	public List<WorkflowActions> getActions() {
		return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class)
				.getWorkflowActions(id, "Interview");
	}

}

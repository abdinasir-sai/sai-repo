package com.nouros.hrms.model;

import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "STATE")
@Filters(value = { @Filter(name = "stateCountryIdGtFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.ID > :id)"), @Filter(name = "stateCountryIdNInFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.ID not in (:id)"), @Filter(name = "stateCountryIdLtEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.ID <= :id)"), @Filter(name = "stateCountryIdLtFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.ID < :id)"), @Filter(name = "stateCountryIdEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.ID = :id)"), @Filter(name = "stateCountryIdNEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.ID != :id)"), @Filter(name = "stateCountryIdInFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.ID in (:id)"), @Filter(name = "stateCountryIdBwFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.ID > :id_MIN  AND COUNTRY.ID < :id_MAX )"), @Filter(name = "stateCountryIdGtEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.ID >= :id)"), @Filter(name = "stateCountryNameNInFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.NAME not in (:name)"), @Filter(name = "stateCountryNameEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.NAME = :name)"), @Filter(name = "stateCountryNameNEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.NAME != :name)"), @Filter(name = "stateCountryNameInFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.NAME in (:name)"), @Filter(name = "stateCountryDisplayNameNInFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.DISPLAY_NAME not in (:displayName)"), @Filter(name = "stateCountryDisplayNameEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.DISPLAY_NAME = :displayName)"), @Filter(name = "stateCountryDisplayNameNEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.DISPLAY_NAME != :displayName)"), @Filter(name = "stateCountryDisplayNameInFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.DISPLAY_NAME in (:displayName)"), @Filter(name = "stateCountryCountryCodeNInFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.COUNTRY_CODE not in (:countryCode)"), @Filter(name = "stateCountryCountryCodeEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.COUNTRY_CODE = :countryCode)"), @Filter(name = "stateCountryCountryCodeNEqFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.COUNTRY_CODE != :countryCode)"), @Filter(name = "stateCountryCountryCodeInFilter", condition = "COUNTRY_ID in (select COUNTRY.id from COUNTRY where COUNTRY.COUNTRY_CODE in (:countryCode)"), @Filter(name = "stateDisplayNameNInFilter", condition = "DISPLAY_NAME not in (:displayName)"), @Filter(name = "stateDisplayNameEqFilter", condition = "DISPLAY_NAME = :displayName"), @Filter(name = "stateDisplayNameNEqFilter", condition = "DISPLAY_NAME != :displayName"), @Filter(name = "stateDisplayNameInFilter", condition = "DISPLAY_NAME in (:displayName)"), @Filter(name = "stateIdGtFilter", condition = "ID > :id"), @Filter(name = "stateIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "stateIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "stateIdLtFilter", condition = "ID < :id"), @Filter(name = "stateIdEqFilter", condition = "ID = :id"), @Filter(name = "stateIdNEqFilter", condition = "ID != :id"), @Filter(name = "stateIdInFilter", condition = "ID in (:id)"), @Filter(name = "stateIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "stateIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "stateIdEqFilter", condition = "ID = :id"), @Filter(name = "stateNameNInFilter", condition = "NAME not in (:name)"), @Filter(name = "stateNameEqFilter", condition = "NAME = :name"), @Filter(name = "stateNameNEqFilter", condition = "NAME != :name"), @Filter(name = "stateNameInFilter", condition = "NAME in (:name)"), @Filter(name = "stateWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "stateWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "stateWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "stateWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "stateWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "stateWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "stateWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "stateWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "stateWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "stateWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "stateCountryIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateCountryIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateCountryIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateCountryIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateCountryIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateCountryIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateCountryIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateCountryIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "stateCountryIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateCountryNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "stateCountryNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "stateCountryNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "stateCountryNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "stateCountryDisplayNameNInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "stateCountryDisplayNameEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "stateCountryDisplayNameNEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "stateCountryDisplayNameInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "stateCountryCountryCodeNInFilter", parameters = { @ParamDef(name = "countryCode", type = String.class) }), @FilterDef(name = "stateCountryCountryCodeEqFilter", parameters = { @ParamDef(name = "countryCode", type = String.class) }), @FilterDef(name = "stateCountryCountryCodeNEqFilter", parameters = { @ParamDef(name = "countryCode", type = String.class) }), @FilterDef(name = "stateCountryCountryCodeInFilter", parameters = { @ParamDef(name = "countryCode", type = String.class) }), @FilterDef(name = "stateDisplayNameNInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "stateDisplayNameEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "stateDisplayNameNEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "stateDisplayNameInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "stateIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "stateIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "stateNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "stateNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "stateNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "stateNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "stateWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "stateWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "stateWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "stateWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "stateWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "stateWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "stateWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "stateWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "stateWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class State extends BaseEntitySaaS{

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.City.class, mappedBy = "state", cascade = CascadeType.MERGE)
    private Set<City> citys = new HashSet<>();

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "COUNTRY_ID", columnDefinition = "INT")
    private Country country;

    @Size(max = 100)
    @Size(max = 100)
    @Basic
    @Column(name = "DISPLAY_NAME", length = 100)
    private String displayName;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 100)
    @Basic
    @Column(length = 100)
    private String name;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public State() {
    }

    public State(Integer id) {
        this.id = id;
    }

    public Set<City> getCitys() {
        return citys;
    }

    public void setCitys(Set<City> citys) {
        this.citys = citys;
    }

    public Country getCountry() {
        return country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

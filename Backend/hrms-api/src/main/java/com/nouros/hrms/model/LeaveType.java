package com.nouros.hrms.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "LEAVE_TYPE")
@Filters(value = { @Filter(name = "leaveTypeApprovalStatusNInFilter", condition = "APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "leaveTypeApprovalStatusEqFilter", condition = "APPROVAL_STATUS = :approvalStatus"), @Filter(name = "leaveTypeApprovalStatusNEqFilter", condition = "APPROVAL_STATUS != :approvalStatus"), @Filter(name = "leaveTypeApprovalStatusInFilter", condition = "APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "leaveTypeBalancedBasedOnEqFilter", condition = "BALANCED_BASED_ON = :balancedBasedOn"), @Filter(name = "leaveTypeBalancedBasedOnNEqFilter", condition = "BALANCED_BASED_ON != :balancedBasedOn"), @Filter(name = "leaveTypeCodeGtFilter", condition = "CODE > :code"), @Filter(name = "leaveTypeCodeNInFilter", condition = "CODE not in (:code)"), @Filter(name = "leaveTypeCodeLtEqFilter", condition = "CODE <= :code"), @Filter(name = "leaveTypeCodeLtFilter", condition = "CODE < :code"), @Filter(name = "leaveTypeCodeEqFilter", condition = "CODE = :code"), @Filter(name = "leaveTypeCodeNEqFilter", condition = "CODE != :code"), @Filter(name = "leaveTypeCodeInFilter", condition = "CODE in (:code)"), @Filter(name = "leaveTypeCodeBwFilter", condition = "CODE > :code_MIN  AND CODE < :code_MAX"), @Filter(name = "leaveTypeCodeGtEqFilter", condition = "CODE >= :code"), @Filter(name = "leaveTypeCodeEqFilter", condition = "CODE = :code"), @Filter(name = "leaveTypeDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "leaveTypeDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "leaveTypeDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "leaveTypeDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "leaveTypeIdGtFilter", condition = "ID > :id"), @Filter(name = "leaveTypeIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "leaveTypeIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "leaveTypeIdLtFilter", condition = "ID < :id"), @Filter(name = "leaveTypeIdEqFilter", condition = "ID = :id"), @Filter(name = "leaveTypeIdNEqFilter", condition = "ID != :id"), @Filter(name = "leaveTypeIdInFilter", condition = "ID in (:id)"), @Filter(name = "leaveTypeIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "leaveTypeIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "leaveTypeIdEqFilter", condition = "ID = :id"), @Filter(name = "leaveTypeIsLeaveTypeEnabledEqFilter", condition = "IS_LEAVE_TYPE_ENABLED = :isLeaveTypeEnabled"), @Filter(name = "leaveTypeIsLeaveTypeEnabledNEqFilter", condition = "IS_LEAVE_TYPE_ENABLED != :isLeaveTypeEnabled"), @Filter(name = "leaveTypeLeaveTypeNInFilter", condition = "LEAVE_TYPE not in (:leaveType)"), @Filter(name = "leaveTypeLeaveTypeEqFilter", condition = "LEAVE_TYPE = :leaveType"), @Filter(name = "leaveTypeLeaveTypeNEqFilter", condition = "LEAVE_TYPE != :leaveType"), @Filter(name = "leaveTypeLeaveTypeInFilter", condition = "LEAVE_TYPE in (:leaveType)"), @Filter(name = "leaveTypeLeaveTypeIdGtFilter", condition = "LEAVE_TYPE_ID > :leaveTypeId"), @Filter(name = "leaveTypeLeaveTypeIdNInFilter", condition = "LEAVE_TYPE_ID not in (:leaveTypeId)"), @Filter(name = "leaveTypeLeaveTypeIdLtEqFilter", condition = "LEAVE_TYPE_ID <= :leaveTypeId"), @Filter(name = "leaveTypeLeaveTypeIdLtFilter", condition = "LEAVE_TYPE_ID < :leaveTypeId"), @Filter(name = "leaveTypeLeaveTypeIdEqFilter", condition = "LEAVE_TYPE_ID = :leaveTypeId"), @Filter(name = "leaveTypeLeaveTypeIdNEqFilter", condition = "LEAVE_TYPE_ID != :leaveTypeId"), @Filter(name = "leaveTypeLeaveTypeIdInFilter", condition = "LEAVE_TYPE_ID in (:leaveTypeId)"), @Filter(name = "leaveTypeLeaveTypeIdBwFilter", condition = "LEAVE_TYPE_ID > :leaveTypeId_MIN  AND LEAVE_TYPE_ID < :leaveTypeId_MAX"), @Filter(name = "leaveTypeLeaveTypeIdGtEqFilter", condition = "LEAVE_TYPE_ID >= :leaveTypeId"), @Filter(name = "leaveTypeLeaveTypeIdEqFilter", condition = "LEAVE_TYPE_ID = :leaveTypeId"), @Filter(name = "leaveTypeNameNInFilter", condition = "NAME not in (:name)"), @Filter(name = "leaveTypeNameEqFilter", condition = "NAME = :name"), @Filter(name = "leaveTypeNameNEqFilter", condition = "NAME != :name"), @Filter(name = "leaveTypeNameInFilter", condition = "NAME in (:name)"), @Filter(name = "leaveTypeUnitNInFilter", condition = "UNIT not in (:unit)"), @Filter(name = "leaveTypeUnitEqFilter", condition = "UNIT = :unit"), @Filter(name = "leaveTypeUnitNEqFilter", condition = "UNIT != :unit"), @Filter(name = "leaveTypeUnitInFilter", condition = "UNIT in (:unit)"), @Filter(name = "leaveTypeValidityGtFilter", condition = "VALIDITY > (SELECT DATE_FORMAT(:validity, '%Y-%m-%d'))"), @Filter(name = "leaveTypeValidityLtFilter", condition = "VALIDITY < (SELECT DATE_FORMAT(:validity, '%Y-%m-%d'))"), @Filter(name = "leaveTypeValidityBwFilter", condition = "VALIDITY >(SELECT DATE_FORMAT(:validity_MIN, '%Y-%m-%d')) AND VALIDITY <(SELECT DATE_FORMAT(:validity_MAX, '%Y-%m-%d'))"), @Filter(name = "leaveTypeWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "leaveTypeWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "leaveTypeWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "leaveTypeWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "leaveTypeWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "leaveTypeWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "leaveTypeWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "leaveTypeWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "leaveTypeWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "leaveTypeWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "leaveTypeApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "leaveTypeApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "leaveTypeApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "leaveTypeApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "leaveTypeBalancedBasedOnEqFilter", parameters = { @ParamDef(name = "balancedBasedOn", type = Boolean.class) }), @FilterDef(name = "leaveTypeBalancedBasedOnNEqFilter", parameters = { @ParamDef(name = "balancedBasedOn", type = Boolean.class) }), @FilterDef(name = "leaveTypeCodeGtFilter", parameters = { @ParamDef(name = "code", type = Integer.class) }), @FilterDef(name = "leaveTypeCodeNInFilter", parameters = { @ParamDef(name = "code", type = Integer.class) }), @FilterDef(name = "leaveTypeCodeLtEqFilter", parameters = { @ParamDef(name = "code", type = Integer.class) }), @FilterDef(name = "leaveTypeCodeLtFilter", parameters = { @ParamDef(name = "code", type = Integer.class) }), @FilterDef(name = "leaveTypeCodeEqFilter", parameters = { @ParamDef(name = "code", type = Integer.class) }), @FilterDef(name = "leaveTypeCodeNEqFilter", parameters = { @ParamDef(name = "code", type = Integer.class) }), @FilterDef(name = "leaveTypeCodeInFilter", parameters = { @ParamDef(name = "code", type = Integer.class) }), @FilterDef(name = "leaveTypeCodeBwFilter", parameters = { @ParamDef(name = "code_MIN", type = Integer.class), @ParamDef(name = "code_MAX", type = Integer.class) }), @FilterDef(name = "leaveTypeCodeGtEqFilter", parameters = { @ParamDef(name = "code", type = Integer.class) }), @FilterDef(name = "leaveTypeDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "leaveTypeDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "leaveTypeDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "leaveTypeDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "leaveTypeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "leaveTypeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "leaveTypeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "leaveTypeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "leaveTypeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "leaveTypeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "leaveTypeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "leaveTypeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "leaveTypeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "leaveTypeIsLeaveTypeEnabledEqFilter", parameters = { @ParamDef(name = "isLeaveTypeEnabled", type = Boolean.class) }), @FilterDef(name = "leaveTypeIsLeaveTypeEnabledNEqFilter", parameters = { @ParamDef(name = "isLeaveTypeEnabled", type = Boolean.class) }), @FilterDef(name = "leaveTypeLeaveTypeNInFilter", parameters = { @ParamDef(name = "leaveType", type = String.class) }), @FilterDef(name = "leaveTypeLeaveTypeEqFilter", parameters = { @ParamDef(name = "leaveType", type = String.class) }), @FilterDef(name = "leaveTypeLeaveTypeNEqFilter", parameters = { @ParamDef(name = "leaveType", type = String.class) }), @FilterDef(name = "leaveTypeLeaveTypeInFilter", parameters = { @ParamDef(name = "leaveType", type = String.class) }), @FilterDef(name = "leaveTypeLeaveTypeIdGtFilter", parameters = { @ParamDef(name = "leaveTypeId", type = Integer.class) }), @FilterDef(name = "leaveTypeLeaveTypeIdNInFilter", parameters = { @ParamDef(name = "leaveTypeId", type = Integer.class) }), @FilterDef(name = "leaveTypeLeaveTypeIdLtEqFilter", parameters = { @ParamDef(name = "leaveTypeId", type = Integer.class) }), @FilterDef(name = "leaveTypeLeaveTypeIdLtFilter", parameters = { @ParamDef(name = "leaveTypeId", type = Integer.class) }), @FilterDef(name = "leaveTypeLeaveTypeIdEqFilter", parameters = { @ParamDef(name = "leaveTypeId", type = Integer.class) }), @FilterDef(name = "leaveTypeLeaveTypeIdNEqFilter", parameters = { @ParamDef(name = "leaveTypeId", type = Integer.class) }), @FilterDef(name = "leaveTypeLeaveTypeIdInFilter", parameters = { @ParamDef(name = "leaveTypeId", type = Integer.class) }), @FilterDef(name = "leaveTypeLeaveTypeIdBwFilter", parameters = { @ParamDef(name = "leaveTypeId_MIN", type = Integer.class), @ParamDef(name = "leaveTypeId_MAX", type = Integer.class) }), @FilterDef(name = "leaveTypeLeaveTypeIdGtEqFilter", parameters = { @ParamDef(name = "leaveTypeId", type = Integer.class) }), @FilterDef(name = "leaveTypeNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "leaveTypeNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "leaveTypeNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "leaveTypeNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "leaveTypeUnitNInFilter", parameters = { @ParamDef(name = "unit", type = String.class) }), @FilterDef(name = "leaveTypeUnitEqFilter", parameters = { @ParamDef(name = "unit", type = String.class) }), @FilterDef(name = "leaveTypeUnitNEqFilter", parameters = { @ParamDef(name = "unit", type = String.class) }), @FilterDef(name = "leaveTypeUnitInFilter", parameters = { @ParamDef(name = "unit", type = String.class) }), @FilterDef(name = "leaveTypeValidityGtFilter", parameters = { @ParamDef(name = "validity", type = String.class) }), @FilterDef(name = "leaveTypeValidityLtFilter", parameters = { @ParamDef(name = "validity", type = String.class) }), @FilterDef(name = "leaveTypeValidityBwFilter", parameters = { @ParamDef(name = "validity_MIN", type = String.class), @ParamDef(name = "validity_MAX", type = String.class) }), @FilterDef(name = "leaveTypeWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "leaveTypeWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "leaveTypeWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "leaveTypeWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "leaveTypeWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "leaveTypeWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "leaveTypeWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "leaveTypeWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "leaveTypeWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class LeaveType extends BaseEntitySaaS{

    @Basic
    @Column(name = "APPROVAL_STATUS", columnDefinition = "ENUM", length = 12)
    private String approvalStatus;

    @Basic
    @Column(name = "BALANCED_BASED_ON" , columnDefinition = "ENUM", length = 2)
    private String balancedBasedOn;

    @Basic
    @Column(name = "CODE" ,columnDefinition = "INT")
    private Integer code;

    @Size(max = 255)
    @Basic
    private String description;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(name = "ID" ,columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(name = "IS_LEAVE_TYPE_ENABLED")
    private Boolean isLeaveTypeEnabled;

    @Basic
    @Column(name = "LEAVE_CATEGORY", columnDefinition = "ENUM", length = 8)
    private String leaveCategory;

    @Basic
    @Column(name = "LEAVE_TYPE_ID", columnDefinition = "INT")
    private Integer leaveTypeId;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.Leaves.class, mappedBy = "leaveType", cascade = CascadeType.MERGE)
    private Set<Leaves> leaves = new HashSet<>();

    @Size(max = 50)
    @Basic
    @Column(name = "NAME" ,length = 50)
    private String name;

    @Basic
    @Column(name = "UNIT" , columnDefinition = "ENUM", length = 8)
    private String unit;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT") 
    private Integer workspaceId;
    
    
    @Basic
    @Column(name = "EFFECTIVE_AFTER_COUNT", columnDefinition = "INT")
    private Integer effectiveAfterCount;
    
    @Basic
    @Column(name = "EFFECTIVE_AFTER_TYPE" , columnDefinition = "ENUM", length = 3)
    private String effectiveAfterType;
    
    @Basic
    @Column(name = "EFFECTIVE_AFTER_CONDITION" , columnDefinition = "ENUM", length = 2)
    private String effectiveAfterCondition;

    @Basic
    @Column(name = "ACCRUAL_TYPE" , columnDefinition = "ENUM", length = 5)
    private String accrualType;
    
    @Size(max = 50)
    @Basic
    @Column(name = "ACCRUAL_ON_DAY" , length = 50)
    private String accrualOnDay;
    
    @Size(max = 50)
    @Basic
    @Column(name = "ACCRUAL_ON_MONTH" ,length = 50)
    private String accrualOnMonth;
    
    @Basic
    @Column(name = "ACCRUAL_APPLICABLE_IN" , columnDefinition = "ENUM", length = 2)
    private String accrualApplicableIn;
    
    @Basic
    @Column(name = "ACCRUAL_NO_OF_DAYS")
    private Double accrualNoOfDays;
    
    @Basic
    @Column(name = "MAXIMUM_BALANCE")
    private Double maximumBalance;
    
    @Basic
    @Column(name = "OPENING_BALANCE")
    private Double openingBalance;
    
    @Basic
    @Column(name = "APPLICABLE_GENDER" , columnDefinition = "ENUM", length = 3)
    private String applicableGender;
    
    @Basic
    @Column(name = "MARITAL_STATUS" , columnDefinition = "ENUM", length = 2)
    private String maritalStatus;
    
    @Basic
    @Column(name = "VALIDITY_TO" , length = 19)
    private Date validityTo;
    
    @Basic
    @Column(name = "VALIDITY_FROM" , length = 19)
    private Date validityFrom;
   
    @Size(max = 200)
    @Basic
    @Column(name = "APPLICABLE_DEPARTMENT" , length = 200)
    private String applicableDepartment; 
    
    @Size(max = 200)
    @Basic
    @Column(name = "APPLICABLE_DESIGNATION" , length = 200)
    private String applicableDesignation;
    
    @Size(max = 200)
    @Basic
    @Column(name = "APPLICABLE_LOCATION" , length = 200)
    private String applicableLocation;
    
    @Basic
    @Column(name = "IS_ACCRUAL")
    private Boolean isAccrual;
    
    @Basic
    @Column(name="LEAVE_TYPE_DAYS",columnDefinition = "ENUM")
    private String leaveTypeDay;
    
    
    @Basic
    @Column(name="APPLICABLE_RELIGION",columnDefinition = "ENUM")
    private String applicableReligion;
    
    public String getLeaveTypeDay() {
		return leaveTypeDay;
	}

	public void setLeaveTypeDay(String leaveTypeDay) {
		this.leaveTypeDay = leaveTypeDay;
	}

	public String getApplicableReligion() {
		return applicableReligion;
	} 

	public void setApplicableReligion(String applicableReligion) {
		this.applicableReligion = applicableReligion;
	}
	
	public LeaveType() {
    }

    public LeaveType(Integer id) {
        this.id = id;
    }

    public String getApprovalStatus() {
        return approvalStatus;
    }

    public void setApprovalStatus(String approvalStatus) {
        this.approvalStatus = approvalStatus;
    }
    
    public String getBalancedBasedOn() {
		return balancedBasedOn;
	}

	public void setBalancedBasedOn(String balancedBasedOn) {
		this.balancedBasedOn = balancedBasedOn;
	}

	public Integer getCode() {
        return code;
    }

    public void setCode(Integer code) {
        this.code = code;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }


    public Boolean getIsLeaveTypeEnabled() {
		return isLeaveTypeEnabled;
	}

	public void setIsLeaveTypeEnabled(Boolean isLeaveTypeEnabled) {
		this.isLeaveTypeEnabled = isLeaveTypeEnabled;
	}

	public String getLeaveCategory() {
        return leaveCategory;
    }

    public void setLeaveCategory(String leaveType) {
        this.leaveCategory = leaveType;
    }

    public Integer getLeaveTypeId() {
        return leaveTypeId;
    }

    public void setLeaveTypeId(Integer leaveTypeId) {
        this.leaveTypeId = leaveTypeId;
    }

    public Set<Leaves> getLeaves() {
        return leaves;
    }

    public void setLeaves(Set<Leaves> leaves) {
        this.leaves = leaves;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getUnit() {
        return unit;
    }

    public void setUnit(String unit) {
        this.unit = unit;
    }

    public Integer getEffectiveAfterCount() {
		return effectiveAfterCount;
	}

	public void setEffectiveAfterCount(Integer effectiveAfterCount) {
		this.effectiveAfterCount = effectiveAfterCount;
	}

	public String getEffectiveAfterType() {
		return effectiveAfterType;
	}

	public void setEffectiveAfterType(String effectiveAfterType) {
		this.effectiveAfterType = effectiveAfterType;
	}

	public String getEffectiveAfterCondition() {
		return effectiveAfterCondition;
	}

	public void setEffectiveAfterCondition(String effectiveAfterCondition) {
		this.effectiveAfterCondition = effectiveAfterCondition;
	}

	public String getAccrualType() {
		return accrualType;
	}

	public void setAccrualType(String accrualType) {
		this.accrualType = accrualType;
	}

	public String getAccrualOnDay() {
		return accrualOnDay;
	}

	public void setAccrualOnDay(String accrualOnDay) {
		this.accrualOnDay = accrualOnDay;
	}

	public String getAccrualOnMonth() {
		return accrualOnMonth;
	}

	public void setAccrualOnMonth(String accrualOnMonth) {
		this.accrualOnMonth = accrualOnMonth;
	}

	public String getAccrualApplicableIn() {
		return accrualApplicableIn;
	}

	public void setAccrualApplicableIn(String accrualApplicableIn) {
		this.accrualApplicableIn = accrualApplicableIn;
	}

	public Double getAccrualNoOfDays() {
		return accrualNoOfDays;
	}

	public void setAccrualNoOfDays(Double accrualNoOfDays) {
		this.accrualNoOfDays = accrualNoOfDays;
	}

	public Double getMaximumBalance() {
		return maximumBalance;
	}

	public void setMaximumBalance(Double maximumBalance) {
		this.maximumBalance = maximumBalance;
	}

	public Double getOpeningBalance() {
		return openingBalance;
	}

	public void setOpeningBalance(Double openingBalance) {
		this.openingBalance = openingBalance;
	}

	public String getApplicableGender() {
		return applicableGender;
	}

	public void setApplicableGender(String applicableGender) {
		this.applicableGender = applicableGender;
	}

	public String getMaritalStatus() {
		return maritalStatus;
	}

	public void setMaritalStatus(String maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	public Date getValidityTo() {
		return validityTo;
	}

	public void setValidityTo(Date validityTo) {
		this.validityTo = validityTo;
	}

	public Date getValidityFrom() {
		return validityFrom;
	}

	public void setValidityFrom(Date validityFrom) {
		this.validityFrom = validityFrom;
	}

	public String getApplicableDepartment() {
		return applicableDepartment;
	}

	public void setApplicableDepartment(String applicableDepartment) {
		this.applicableDepartment = applicableDepartment;
	}

	public String getApplicableDesignation() {
		return applicableDesignation;
	}

	public void setApplicableDesignation(String applicableDesignation) {
		this.applicableDesignation = applicableDesignation;
	}

	public String getApplicableLocation() {
		return applicableLocation;
	}

	public void setApplicableLocation(String applicableLocation) {
		this.applicableLocation = applicableLocation;
	}

	public Boolean getIsAccrual() {
		return isAccrual;
	}

	public void setIsAccrual(Boolean isAccrual) {
		this.isAccrual = isAccrual;
	}

	public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

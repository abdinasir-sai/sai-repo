package com.nouros.hrms.model;

import java.util.List;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.enttribe.product.pii.listners.PrePersistListener;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "JOB_APPLICATION")
@EntityListeners(PrePersistListener.class)
@JsonFilter("propertyFilter")
@Filters(value = {
		@Filter(name = "jobApplicationApplicantCountryNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY not in (:country)"),
		@Filter(name = "jobApplicationApplicantCountryEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY = :country)"),
		@Filter(name = "jobApplicationApplicantCountryNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY != :country)"),
		@Filter(name = "jobApplicationApplicantCountryInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY in (:country)"),
		@Filter(name = "jobApplicationApplicantCurrentSalaryGtFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY > :currentSalary)"),
		@Filter(name = "jobApplicationApplicantCurrentSalaryNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY not in (:currentSalary)"),
		@Filter(name = "jobApplicationApplicantCurrentSalaryLtEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY <= :currentSalary)"),
		@Filter(name = "jobApplicationApplicantCurrentSalaryLtFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY < :currentSalary)"),
		@Filter(name = "jobApplicationApplicantCurrentSalaryEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY = :currentSalary)"),
		@Filter(name = "jobApplicationApplicantCurrentSalaryNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY != :currentSalary)"),
		@Filter(name = "jobApplicationApplicantCurrentSalaryInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY in (:currentSalary)"),
		@Filter(name = "jobApplicationApplicantCurrentSalaryBwFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY > :currentSalary_MIN  AND APPLICANT.CURRENT_SALARY < :currentSalary_MAX )"),
		@Filter(name = "jobApplicationApplicantCurrentSalaryGtEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY >= :currentSalary)"),
		@Filter(name = "jobApplicationApplicantPostalCodeNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE not in (:postalCode)"),
		@Filter(name = "jobApplicationApplicantPostalCodeEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE = :postalCode)"),
		@Filter(name = "jobApplicationApplicantPostalCodeNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE != :postalCode)"),
		@Filter(name = "jobApplicationApplicantPostalCodeInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE in (:postalCode)"),
		@Filter(name = "jobApplicationApplicantApplciantSourceNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE not in (:applciantSource)"),
		@Filter(name = "jobApplicationApplicantApplciantSourceEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE = :applciantSource)"),
		@Filter(name = "jobApplicationApplicantApplciantSourceNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE != :applciantSource)"),
		@Filter(name = "jobApplicationApplicantApplciantSourceInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE in (:applciantSource)"),
		@Filter(name = "jobApplicationApplicantEmailIdNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID not in (:emailId)"),
		@Filter(name = "jobApplicationApplicantEmailIdEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID = :emailId)"),
		@Filter(name = "jobApplicationApplicantEmailIdNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID != :emailId)"),
		@Filter(name = "jobApplicationApplicantEmailIdInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID in (:emailId)"),
		@Filter(name = "jobApplicationApplicantCandidateOwnerNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER not in (:candidateOwner)"),
		@Filter(name = "jobApplicationApplicantCandidateOwnerEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER = :candidateOwner)"),
		@Filter(name = "jobApplicationApplicantCandidateOwnerNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER != :candidateOwner)"),
		@Filter(name = "jobApplicationApplicantCandidateOwnerInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER in (:candidateOwner)"),
		@Filter(name = "jobApplicationApplicantProvinceNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE not in (:province)"),
		@Filter(name = "jobApplicationApplicantProvinceEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE = :province)"),
		@Filter(name = "jobApplicationApplicantProvinceNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE != :province)"),
		@Filter(name = "jobApplicationApplicantProvinceInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE in (:province)"),
		@Filter(name = "jobApplicationApplicantExpectedSalaryGtFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY > :expectedSalary)"),
		@Filter(name = "jobApplicationApplicantExpectedSalaryNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY not in (:expectedSalary)"),
		@Filter(name = "jobApplicationApplicantExpectedSalaryLtEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY <= :expectedSalary)"),
		@Filter(name = "jobApplicationApplicantExpectedSalaryLtFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY < :expectedSalary)"),
		@Filter(name = "jobApplicationApplicantExpectedSalaryEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY = :expectedSalary)"),
		@Filter(name = "jobApplicationApplicantExpectedSalaryNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY != :expectedSalary)"),
		@Filter(name = "jobApplicationApplicantExpectedSalaryInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY in (:expectedSalary)"),
		@Filter(name = "jobApplicationApplicantExpectedSalaryBwFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY > :expectedSalary_MIN  AND APPLICANT.EXPECTED_SALARY < :expectedSalary_MAX )"),
		@Filter(name = "jobApplicationApplicantExpectedSalaryGtEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY >= :expectedSalary)"),
		@Filter(name = "jobApplicationApplicantIdGtFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID > :id)"),
		@Filter(name = "jobApplicationApplicantIdNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID not in (:id)"),
		@Filter(name = "jobApplicationApplicantIdLtEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID <= :id)"),
		@Filter(name = "jobApplicationApplicantIdLtFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID < :id)"),
		@Filter(name = "jobApplicationApplicantIdEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID = :id)"),
		@Filter(name = "jobApplicationApplicantIdNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID != :id)"),
		@Filter(name = "jobApplicationApplicantIdInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID in (:id)"),
		@Filter(name = "jobApplicationApplicantIdBwFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID > :id_MIN  AND APPLICANT.ID < :id_MAX )"),
		@Filter(name = "jobApplicationApplicantIdGtEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID >= :id)"),
		@Filter(name = "jobApplicationApplicantFaxNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX not in (:fax)"),
		@Filter(name = "jobApplicationApplicantFaxEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX = :fax)"),
		@Filter(name = "jobApplicationApplicantFaxNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX != :fax)"),
		@Filter(name = "jobApplicationApplicantFaxInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX in (:fax)"),
		@Filter(name = "jobApplicationApplicantCurrentEmployerNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER not in (:currentEmployer)"),
		@Filter(name = "jobApplicationApplicantCurrentEmployerEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER = :currentEmployer)"),
		@Filter(name = "jobApplicationApplicantCurrentEmployerNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER != :currentEmployer)"),
		@Filter(name = "jobApplicationApplicantCurrentEmployerInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER in (:currentEmployer)"),
		@Filter(name = "jobApplicationApplicantCandidateSourceNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE not in (:candidateSource)"),
		@Filter(name = "jobApplicationApplicantCandidateSourceEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE = :candidateSource)"),
		@Filter(name = "jobApplicationApplicantCandidateSourceNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE != :candidateSource)"),
		@Filter(name = "jobApplicationApplicantCandidateSourceInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE in (:candidateSource)"),
		@Filter(name = "jobApplicationApplicantFirstNameNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME not in (:firstName)"),
		@Filter(name = "jobApplicationApplicantFirstNameEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME = :firstName)"),
		@Filter(name = "jobApplicationApplicantFirstNameNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME != :firstName)"),
		@Filter(name = "jobApplicationApplicantFirstNameInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME in (:firstName)"),
		@Filter(name = "jobApplicationApplicantPhoneNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE not in (:phone)"),
		@Filter(name = "jobApplicationApplicantPhoneEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE = :phone)"),
		@Filter(name = "jobApplicationApplicantPhoneNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE != :phone)"),
		@Filter(name = "jobApplicationApplicantPhoneInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE in (:phone)"),
		@Filter(name = "jobApplicationApplicantUniqueIdCandidateNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE not in (:uniqueIdCandidate)"),
		@Filter(name = "jobApplicationApplicantUniqueIdCandidateEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE = :uniqueIdCandidate)"),
		@Filter(name = "jobApplicationApplicantUniqueIdCandidateNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE != :uniqueIdCandidate)"),
		@Filter(name = "jobApplicationApplicantUniqueIdCandidateInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE in (:uniqueIdCandidate)"),
		@Filter(name = "jobApplicationApplicantLastNameNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME not in (:lastName)"),
		@Filter(name = "jobApplicationApplicantLastNameEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME = :lastName)"),
		@Filter(name = "jobApplicationApplicantLastNameNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME != :lastName)"),
		@Filter(name = "jobApplicationApplicantLastNameInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME in (:lastName)"),
		@Filter(name = "jobApplicationApplicantSecondaryEmailNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL not in (:secondaryEmail)"),
		@Filter(name = "jobApplicationApplicantSecondaryEmailEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL = :secondaryEmail)"),
		@Filter(name = "jobApplicationApplicantSecondaryEmailNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL != :secondaryEmail)"),
		@Filter(name = "jobApplicationApplicantSecondaryEmailInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL in (:secondaryEmail)"),
		@Filter(name = "jobApplicationApplicantHighestQualificationNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION not in (:highestQualification)"),
		@Filter(name = "jobApplicationApplicantHighestQualificationEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION = :highestQualification)"),
		@Filter(name = "jobApplicationApplicantHighestQualificationNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION != :highestQualification)"),
		@Filter(name = "jobApplicationApplicantHighestQualificationInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION in (:highestQualification)"),
		@Filter(name = "jobApplicationApplicantCityNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY not in (:city)"),
		@Filter(name = "jobApplicationApplicantCityEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY = :city)"),
		@Filter(name = "jobApplicationApplicantCityNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY != :city)"),
		@Filter(name = "jobApplicationApplicantCityInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY in (:city)"),
		@Filter(name = "jobApplicationApplicantCandidateStatusNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS not in (:candidateStatus)"),
		@Filter(name = "jobApplicationApplicantCandidateStatusEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS = :candidateStatus)"),
		@Filter(name = "jobApplicationApplicantCandidateStatusNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS != :candidateStatus)"),
		@Filter(name = "jobApplicationApplicantCandidateStatusInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS in (:candidateStatus)"),
		@Filter(name = "jobApplicationApplicantExperienceInYearsGtFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS > :experienceInYears)"),
		@Filter(name = "jobApplicationApplicantExperienceInYearsNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS not in (:experienceInYears)"),
		@Filter(name = "jobApplicationApplicantExperienceInYearsLtEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS <= :experienceInYears)"),
		@Filter(name = "jobApplicationApplicantExperienceInYearsLtFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS < :experienceInYears)"),
		@Filter(name = "jobApplicationApplicantExperienceInYearsEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS = :experienceInYears)"),
		@Filter(name = "jobApplicationApplicantExperienceInYearsNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS != :experienceInYears)"),
		@Filter(name = "jobApplicationApplicantExperienceInYearsInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS in (:experienceInYears)"),
		@Filter(name = "jobApplicationApplicantExperienceInYearsBwFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS > :experienceInYears_MIN  AND APPLICANT.EXPERIENCE_IN_YEARS < :experienceInYears_MAX )"),
		@Filter(name = "jobApplicationApplicantExperienceInYearsGtEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS >= :experienceInYears)"),
		@Filter(name = "jobApplicationApplicantPresentAddressNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS not in (:presentAddress)"),
		@Filter(name = "jobApplicationApplicantPresentAddressEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS = :presentAddress)"),
		@Filter(name = "jobApplicationApplicantPresentAddressNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS != :presentAddress)"),
		@Filter(name = "jobApplicationApplicantPresentAddressInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS in (:presentAddress)"),
		@Filter(name = "jobApplicationApplicantStreetNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET not in (:street)"),
		@Filter(name = "jobApplicationApplicantStreetEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET = :street)"),
		@Filter(name = "jobApplicationApplicantStreetNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET != :street)"),
		@Filter(name = "jobApplicationApplicantStreetInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET in (:street)"),
		@Filter(name = "jobApplicationApplicantCurrentJobTitleNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE not in (:currentJobTitle)"),
		@Filter(name = "jobApplicationApplicantCurrentJobTitleEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE = :currentJobTitle)"),
		@Filter(name = "jobApplicationApplicantCurrentJobTitleNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE != :currentJobTitle)"),
		@Filter(name = "jobApplicationApplicantCurrentJobTitleInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE in (:currentJobTitle)"),
		@Filter(name = "jobApplicationApplicantWebsiteNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE not in (:website)"),
		@Filter(name = "jobApplicationApplicantWebsiteEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE = :website)"),
		@Filter(name = "jobApplicationApplicantWebsiteNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE != :website)"),
		@Filter(name = "jobApplicationApplicantWebsiteInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE in (:website)"),
		@Filter(name = "jobApplicationApplicantSkillSetNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET not in (:skillSet)"),
		@Filter(name = "jobApplicationApplicantSkillSetEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET = :skillSet)"),
		@Filter(name = "jobApplicationApplicantSkillSetNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET != :skillSet)"),
		@Filter(name = "jobApplicationApplicantSkillSetInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET in (:skillSet)"),
		@Filter(name = "jobApplicationApplicantMobileNInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE not in (:mobile)"),
		@Filter(name = "jobApplicationApplicantMobileEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE = :mobile)"),
		@Filter(name = "jobApplicationApplicantMobileNEqFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE != :mobile)"),
		@Filter(name = "jobApplicationApplicantMobileInFilter", condition = "APPLICANT_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE in (:mobile)"),
		@Filter(name = "jobApplicationApplicationStatusNInFilter", condition = "APPLICATION_STATUS not in (:applicationStatus)"),
		@Filter(name = "jobApplicationApplicationStatusEqFilter", condition = "APPLICATION_STATUS = :applicationStatus"),
		@Filter(name = "jobApplicationApplicationStatusNEqFilter", condition = "APPLICATION_STATUS != :applicationStatus"),
		@Filter(name = "jobApplicationApplicationStatusInFilter", condition = "APPLICATION_STATUS in (:applicationStatus)"),
		@Filter(name = "jobApplicationEmailIdNInFilter", condition = "EMAIL_ID not in (:emailId)"),
		@Filter(name = "jobApplicationEmailIdEqFilter", condition = "EMAIL_ID = :emailId"),
		@Filter(name = "jobApplicationEmailIdNEqFilter", condition = "EMAIL_ID != :emailId"),
		@Filter(name = "jobApplicationEmailIdInFilter", condition = "EMAIL_ID in (:emailId)"),
		@Filter(name = "jobApplicationFirstNameNInFilter", condition = "FIRST_NAME not in (:firstName)"),
		@Filter(name = "jobApplicationFirstNameEqFilter", condition = "FIRST_NAME = :firstName"),
		@Filter(name = "jobApplicationFirstNameNEqFilter", condition = "FIRST_NAME != :firstName"),
		@Filter(name = "jobApplicationFirstNameInFilter", condition = "FIRST_NAME in (:firstName)"),
		@Filter(name = "jobApplicationIdGtFilter", condition = "ID > :id"),
		@Filter(name = "jobApplicationIdNInFilter", condition = "ID not in (:id)"),
		@Filter(name = "jobApplicationIdLtEqFilter", condition = "ID <= :id"),
		@Filter(name = "jobApplicationIdLtFilter", condition = "ID < :id"),
		@Filter(name = "jobApplicationIdEqFilter", condition = "ID = :id"),
		@Filter(name = "jobApplicationIdNEqFilter", condition = "ID != :id"),
		@Filter(name = "jobApplicationIdInFilter", condition = "ID in (:id)"),
		@Filter(name = "jobApplicationIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"),
		@Filter(name = "jobApplicationIdGtEqFilter", condition = "ID >= :id"),
		@Filter(name = "jobApplicationIdEqFilter", condition = "ID = :id"),
		@Filter(name = "jobApplicationJobOpeningCountryNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY not in (:country)"),
		@Filter(name = "jobApplicationJobOpeningCountryEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY = :country)"),
		@Filter(name = "jobApplicationJobOpeningCountryNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY != :country)"),
		@Filter(name = "jobApplicationJobOpeningCountryInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY in (:country)"),
		@Filter(name = "jobApplicationJobOpeningAttachment3NInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 not in (:attachment3)"),
		@Filter(name = "jobApplicationJobOpeningAttachment3EqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 = :attachment3)"),
		@Filter(name = "jobApplicationJobOpeningAttachment3NEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 != :attachment3)"),
		@Filter(name = "jobApplicationJobOpeningAttachment3InFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 in (:attachment3)"),
		@Filter(name = "jobApplicationJobOpeningWorkExperienceNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE not in (:workExperience)"),
		@Filter(name = "jobApplicationJobOpeningWorkExperienceEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE = :workExperience)"),
		@Filter(name = "jobApplicationJobOpeningWorkExperienceNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE != :workExperience)"),
		@Filter(name = "jobApplicationJobOpeningWorkExperienceInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE in (:workExperience)"),
		@Filter(name = "jobApplicationJobOpeningPostingTitleNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE not in (:postingTitle)"),
		@Filter(name = "jobApplicationJobOpeningPostingTitleEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE = :postingTitle)"),
		@Filter(name = "jobApplicationJobOpeningPostingTitleNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE != :postingTitle)"),
		@Filter(name = "jobApplicationJobOpeningPostingTitleInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE in (:postingTitle)"),
		@Filter(name = "jobApplicationJobOpeningSkillsNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS not in (:skills)"),
		@Filter(name = "jobApplicationJobOpeningSkillsEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS = :skills)"),
		@Filter(name = "jobApplicationJobOpeningSkillsNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS != :skills)"),
		@Filter(name = "jobApplicationJobOpeningSkillsInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS in (:skills)"),
		@Filter(name = "jobApplicationJobOpeningDateOpenedGtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DATE_OPENED > (SELECT DATE_FORMAT(:dateOpened, '%Y-%m-%d'))))"),
		@Filter(name = "jobApplicationJobOpeningDateOpenedLtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DATE_OPENED < (SELECT DATE_FORMAT(:dateOpened, '%Y-%m-%d'))))"),
		@Filter(name = "jobApplicationJobOpeningDateOpenedBwFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DATE_OPENED > (SELECT DATE_FORMAT(:dateOpened_MIN , '%Y-%m-%d')) AND JOB_OPENING.DATE_OPENED < (SELECT DATE_FORMAT(:dateOpened_MAX , '%Y-%m-%d')))"),
		@Filter(name = "jobApplicationJobOpeningProvinceNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE not in (:province)"),
		@Filter(name = "jobApplicationJobOpeningProvinceEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE = :province)"),
		@Filter(name = "jobApplicationJobOpeningProvinceNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE != :province)"),
		@Filter(name = "jobApplicationJobOpeningProvinceInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE in (:province)"),
		@Filter(name = "jobApplicationJobOpeningIdGtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID > :id)"),
		@Filter(name = "jobApplicationJobOpeningIdNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID not in (:id)"),
		@Filter(name = "jobApplicationJobOpeningIdLtEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID <= :id)"),
		@Filter(name = "jobApplicationJobOpeningIdLtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID < :id)"),
		@Filter(name = "jobApplicationJobOpeningIdEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID = :id)"),
		@Filter(name = "jobApplicationJobOpeningIdNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID != :id)"),
		@Filter(name = "jobApplicationJobOpeningIdInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID in (:id)"),
		@Filter(name = "jobApplicationJobOpeningIdBwFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID > :id_MIN  AND JOB_OPENING.ID < :id_MAX )"),
		@Filter(name = "jobApplicationJobOpeningIdGtEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID >= :id)"),
		@Filter(name = "jobApplicationJobOpeningAttachment2NInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 not in (:attachment2)"),
		@Filter(name = "jobApplicationJobOpeningAttachment2EqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 = :attachment2)"),
		@Filter(name = "jobApplicationJobOpeningAttachment2NEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 != :attachment2)"),
		@Filter(name = "jobApplicationJobOpeningAttachment2InFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 in (:attachment2)"),
		@Filter(name = "jobApplicationJobOpeningAttachment1NInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 not in (:attachment1)"),
		@Filter(name = "jobApplicationJobOpeningAttachment1EqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 = :attachment1)"),
		@Filter(name = "jobApplicationJobOpeningAttachment1NEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 != :attachment1)"),
		@Filter(name = "jobApplicationJobOpeningAttachment1InFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 in (:attachment1)"),
		@Filter(name = "jobApplicationJobOpeningTargetClossingDateGtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.TARGET_CLOSSING_DATE > (SELECT DATE_FORMAT(:targetClossingDate, '%Y-%m-%d'))))"),
		@Filter(name = "jobApplicationJobOpeningTargetClossingDateLtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.TARGET_CLOSSING_DATE < (SELECT DATE_FORMAT(:targetClossingDate, '%Y-%m-%d'))))"),
		@Filter(name = "jobApplicationJobOpeningTargetClossingDateBwFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.TARGET_CLOSSING_DATE > (SELECT DATE_FORMAT(:targetClossingDate_MIN , '%Y-%m-%d')) AND JOB_OPENING.TARGET_CLOSSING_DATE < (SELECT DATE_FORMAT(:targetClossingDate_MAX , '%Y-%m-%d')))"),
		@Filter(name = "jobApplicationJobOpeningJobOpeningStatusNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS not in (:jobOpeningStatus)"),
		@Filter(name = "jobApplicationJobOpeningJobOpeningStatusEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS = :jobOpeningStatus)"),
		@Filter(name = "jobApplicationJobOpeningJobOpeningStatusNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS != :jobOpeningStatus)"),
		@Filter(name = "jobApplicationJobOpeningJobOpeningStatusInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS in (:jobOpeningStatus)"),
		@Filter(name = "jobApplicationJobOpeningHiringManagerNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER not in (:hiringManager)"),
		@Filter(name = "jobApplicationJobOpeningHiringManagerEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER = :hiringManager)"),
		@Filter(name = "jobApplicationJobOpeningHiringManagerNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER != :hiringManager)"),
		@Filter(name = "jobApplicationJobOpeningHiringManagerInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER in (:hiringManager)"),
		@Filter(name = "jobApplicationJobOpeningJobIdNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID not in (:jobId)"),
		@Filter(name = "jobApplicationJobOpeningJobIdEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID = :jobId)"),
		@Filter(name = "jobApplicationJobOpeningJobIdNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID != :jobId)"),
		@Filter(name = "jobApplicationJobOpeningJobIdInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID in (:jobId)"),
		@Filter(name = "jobApplicationJobOpeningAssignedrecruiterNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER not in (:assignedrecruiter)"),
		@Filter(name = "jobApplicationJobOpeningAssignedrecruiterEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER = :assignedrecruiter)"),
		@Filter(name = "jobApplicationJobOpeningAssignedrecruiterNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER != :assignedrecruiter)"),
		@Filter(name = "jobApplicationJobOpeningAssignedrecruiterInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER in (:assignedrecruiter)"),
		@Filter(name = "jobApplicationJobOpeningOpenPositionsGtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS > :openPositions)"),
		@Filter(name = "jobApplicationJobOpeningOpenPositionsNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS not in (:openPositions)"),
		@Filter(name = "jobApplicationJobOpeningOpenPositionsLtEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS <= :openPositions)"),
		@Filter(name = "jobApplicationJobOpeningOpenPositionsLtFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS < :openPositions)"),
		@Filter(name = "jobApplicationJobOpeningOpenPositionsEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS = :openPositions)"),
		@Filter(name = "jobApplicationJobOpeningOpenPositionsNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS != :openPositions)"),
		@Filter(name = "jobApplicationJobOpeningOpenPositionsInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS in (:openPositions)"),
		@Filter(name = "jobApplicationJobOpeningOpenPositionsBwFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS > :openPositions_MIN  AND JOB_OPENING.OPEN_POSITIONS < :openPositions_MAX )"),
		@Filter(name = "jobApplicationJobOpeningOpenPositionsGtEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS >= :openPositions)"),
		@Filter(name = "jobApplicationJobOpeningCityNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY not in (:city)"),
		@Filter(name = "jobApplicationJobOpeningCityEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY = :city)"),
		@Filter(name = "jobApplicationJobOpeningCityNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY != :city)"),
		@Filter(name = "jobApplicationJobOpeningCityInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY in (:city)"),
		@Filter(name = "jobApplicationJobOpeningIndustryNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY not in (:industry)"),
		@Filter(name = "jobApplicationJobOpeningIndustryEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY = :industry)"),
		@Filter(name = "jobApplicationJobOpeningIndustryNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY != :industry)"),
		@Filter(name = "jobApplicationJobOpeningIndustryInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY in (:industry)"),
		@Filter(name = "jobApplicationJobOpeningPostalcodeNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE not in (:postalcode)"),
		@Filter(name = "jobApplicationJobOpeningPostalcodeEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE = :postalcode)"),
		@Filter(name = "jobApplicationJobOpeningPostalcodeNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE != :postalcode)"),
		@Filter(name = "jobApplicationJobOpeningPostalcodeInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE in (:postalcode)"),
		@Filter(name = "jobApplicationJobOpeningJobTypeNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE not in (:jobType)"),
		@Filter(name = "jobApplicationJobOpeningJobTypeEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE = :jobType)"),
		@Filter(name = "jobApplicationJobOpeningJobTypeNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE != :jobType)"),
		@Filter(name = "jobApplicationJobOpeningJobTypeInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE in (:jobType)"),
		@Filter(name = "jobApplicationJobOpeningSalaryRangeNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE not in (:salaryRange)"),
		@Filter(name = "jobApplicationJobOpeningSalaryRangeEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE = :salaryRange)"),
		@Filter(name = "jobApplicationJobOpeningSalaryRangeNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE != :salaryRange)"),
		@Filter(name = "jobApplicationJobOpeningSalaryRangeInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE in (:salaryRange)"),
		@Filter(name = "jobApplicationJobOpeningAddressNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS not in (:address)"),
		@Filter(name = "jobApplicationJobOpeningAddressEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS = :address)"),
		@Filter(name = "jobApplicationJobOpeningAddressNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS != :address)"),
		@Filter(name = "jobApplicationJobOpeningAddressInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS in (:address)"),
		@Filter(name = "jobApplicationJobOpeningIsRemoteNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE not in (:isRemote)"),
		@Filter(name = "jobApplicationJobOpeningIsRemoteEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE = :isRemote)"),
		@Filter(name = "jobApplicationJobOpeningIsRemoteNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE != :isRemote)"),
		@Filter(name = "jobApplicationJobOpeningIsRemoteInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE in (:isRemote)"),
		@Filter(name = "jobApplicationJobOpeningDescriptionRequirementsNInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS not in (:descriptionRequirements)"),
		@Filter(name = "jobApplicationJobOpeningDescriptionRequirementsEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS = :descriptionRequirements)"),
		@Filter(name = "jobApplicationJobOpeningDescriptionRequirementsNEqFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS != :descriptionRequirements)"),
		@Filter(name = "jobApplicationJobOpeningDescriptionRequirementsInFilter", condition = "JOB_OPENING_ID in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS in (:descriptionRequirements)"),
		@Filter(name = "jobApplicationLastNameNInFilter", condition = "LAST_NAME not in (:lastName)"),
		@Filter(name = "jobApplicationLastNameEqFilter", condition = "LAST_NAME = :lastName"),
		@Filter(name = "jobApplicationLastNameNEqFilter", condition = "LAST_NAME != :lastName"),
		@Filter(name = "jobApplicationLastNameInFilter", condition = "LAST_NAME in (:lastName)"),
		@Filter(name = "jobApplicationMobileNInFilter", condition = "MOBILE not in (:mobile)"),
		@Filter(name = "jobApplicationMobileEqFilter", condition = "MOBILE = :mobile"),
		@Filter(name = "jobApplicationMobileNEqFilter", condition = "MOBILE != :mobile"),
		@Filter(name = "jobApplicationMobileInFilter", condition = "MOBILE in (:mobile)"),
		@Filter(name = "jobApplicationReferredByNInFilter", condition = "REFERRED_BY not in (:referredBy)"),
		@Filter(name = "jobApplicationReferredByEqFilter", condition = "REFERRED_BY = :referredBy"),
		@Filter(name = "jobApplicationReferredByNEqFilter", condition = "REFERRED_BY != :referredBy"),
		@Filter(name = "jobApplicationReferredByInFilter", condition = "REFERRED_BY in (:referredBy)"),
		@Filter(name = "jobApplicationRelationshipNInFilter", condition = "RELATIONSHIP not in (:relationship)"),
		@Filter(name = "jobApplicationRelationshipEqFilter", condition = "RELATIONSHIP = :relationship"),
		@Filter(name = "jobApplicationRelationshipNEqFilter", condition = "RELATIONSHIP != :relationship"),
		@Filter(name = "jobApplicationRelationshipInFilter", condition = "RELATIONSHIP in (:relationship)"),
		@Filter(name = "jobApplicationResumeNInFilter", condition = "RESUME not in (:resume)"),
		@Filter(name = "jobApplicationResumeEqFilter", condition = "RESUME = :resume"),
		@Filter(name = "jobApplicationResumeNEqFilter", condition = "RESUME != :resume"),
		@Filter(name = "jobApplicationResumeInFilter", condition = "RESUME in (:resume)"),
		@Filter(name = "jobApplicationWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"),
		@Filter(name = "jobApplicationWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"),
		@Filter(name = "jobApplicationWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"),
		@Filter(name = "jobApplicationWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"),
		@Filter(name = "jobApplicationWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"),
		@Filter(name = "jobApplicationWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"),
		@Filter(name = "jobApplicationWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"),
		@Filter(name = "jobApplicationWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"),
		@Filter(name = "jobApplicationWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"),
		@Filter(name = "jobApplicationWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = {
		@FilterDef(name = "jobApplicationApplicantCountryNInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCountryEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCountryNEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCountryInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentSalaryGtFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentSalaryNInFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentSalaryLtEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentSalaryLtFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentSalaryEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentSalaryNEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentSalaryInFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentSalaryBwFilter", parameters = {
				@ParamDef(name = "currentSalary_MIN", type = Integer.class),
				@ParamDef(name = "currentSalary_MAX", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentSalaryGtEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantPostalCodeNInFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPostalCodeEqFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPostalCodeNEqFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPostalCodeInFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantApplciantSourceNInFilter", parameters = {
				@ParamDef(name = "applciantSource", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantApplciantSourceEqFilter", parameters = {
				@ParamDef(name = "applciantSource", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantApplciantSourceNEqFilter", parameters = {
				@ParamDef(name = "applciantSource", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantApplciantSourceInFilter", parameters = {
				@ParamDef(name = "applciantSource", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantEmailIdNInFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantEmailIdEqFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantEmailIdNEqFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantEmailIdInFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateOwnerNInFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateOwnerEqFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateOwnerNEqFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateOwnerInFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantProvinceNInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantProvinceEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantProvinceNEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantProvinceInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantExpectedSalaryGtFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExpectedSalaryNInFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExpectedSalaryLtEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExpectedSalaryLtFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExpectedSalaryEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExpectedSalaryNEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExpectedSalaryInFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExpectedSalaryBwFilter", parameters = {
				@ParamDef(name = "expectedSalary_MIN", type = Integer.class),
				@ParamDef(name = "expectedSalary_MAX", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExpectedSalaryGtEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantIdGtFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantIdNInFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantIdLtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantIdLtFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantIdEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantIdNEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantIdInFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantIdBwFilter", parameters = {
				@ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantIdGtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantFaxNInFilter", parameters = {
				@ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantFaxEqFilter", parameters = {
				@ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantFaxNEqFilter", parameters = {
				@ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantFaxInFilter", parameters = {
				@ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentEmployerNInFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentEmployerEqFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentEmployerNEqFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentEmployerInFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateSourceNInFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateSourceEqFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateSourceNEqFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateSourceInFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantFirstNameNInFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantFirstNameEqFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantFirstNameNEqFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantFirstNameInFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPhoneNInFilter", parameters = {
				@ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPhoneEqFilter", parameters = {
				@ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPhoneNEqFilter", parameters = {
				@ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPhoneInFilter", parameters = {
				@ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantUniqueIdCandidateNInFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantUniqueIdCandidateEqFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantUniqueIdCandidateNEqFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantUniqueIdCandidateInFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantLastNameNInFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantLastNameEqFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantLastNameNEqFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantLastNameInFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantSecondaryEmailNInFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantSecondaryEmailEqFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantSecondaryEmailNEqFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantSecondaryEmailInFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantHighestQualificationNInFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantHighestQualificationEqFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantHighestQualificationNEqFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantHighestQualificationInFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCityNInFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCityEqFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCityNEqFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCityInFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateStatusNInFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateStatusEqFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateStatusNEqFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCandidateStatusInFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantExperienceInYearsGtFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExperienceInYearsNInFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExperienceInYearsLtEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExperienceInYearsLtFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExperienceInYearsEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExperienceInYearsNEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExperienceInYearsInFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExperienceInYearsBwFilter", parameters = {
				@ParamDef(name = "experienceInYears_MIN", type = Integer.class),
				@ParamDef(name = "experienceInYears_MAX", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantExperienceInYearsGtEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "jobApplicationApplicantPresentAddressNInFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPresentAddressEqFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPresentAddressNEqFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantPresentAddressInFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantStreetNInFilter", parameters = {
				@ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantStreetEqFilter", parameters = {
				@ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantStreetNEqFilter", parameters = {
				@ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantStreetInFilter", parameters = {
				@ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentJobTitleNInFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentJobTitleEqFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentJobTitleNEqFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantCurrentJobTitleInFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantWebsiteNInFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantWebsiteEqFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantWebsiteNEqFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantWebsiteInFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantSkillSetNInFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantSkillSetEqFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantSkillSetNEqFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantSkillSetInFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantMobileNInFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantMobileEqFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantMobileNEqFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicantMobileInFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicationStatusNInFilter", parameters = {
				@ParamDef(name = "applicationStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicationStatusEqFilter", parameters = {
				@ParamDef(name = "applicationStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicationStatusNEqFilter", parameters = {
				@ParamDef(name = "applicationStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationApplicationStatusInFilter", parameters = {
				@ParamDef(name = "applicationStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationEmailIdNInFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "jobApplicationEmailIdEqFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "jobApplicationEmailIdNEqFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "jobApplicationEmailIdInFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "jobApplicationFirstNameNInFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "jobApplicationFirstNameEqFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "jobApplicationFirstNameNEqFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "jobApplicationFirstNameInFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "jobApplicationIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class),
				@ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "jobApplicationIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningCountryNInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningCountryEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningCountryNEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningCountryInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment3NInFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment3EqFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment3NEqFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment3InFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningWorkExperienceNInFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningWorkExperienceEqFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningWorkExperienceNEqFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningWorkExperienceInFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningPostingTitleNInFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningPostingTitleEqFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningPostingTitleNEqFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningPostingTitleInFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningSkillsNInFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningSkillsEqFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningSkillsNEqFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningSkillsInFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningDateOpenedGtFilter", parameters = {
				@ParamDef(name = "dateOpened", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningDateOpenedLtFilter", parameters = {
				@ParamDef(name = "dateOpened", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningDateOpenedBwFilter", parameters = {
				@ParamDef(name = "dateOpened_MIN", type = String.class),
				@ParamDef(name = "dateOpened_MAX", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningProvinceNInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningProvinceEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningProvinceNEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningProvinceInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIdGtFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIdNInFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIdLtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIdLtFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIdEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIdNEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIdInFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIdBwFilter", parameters = {
				@ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIdGtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment2NInFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment2EqFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment2NEqFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment2InFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment1NInFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment1EqFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment1NEqFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAttachment1InFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningTargetClossingDateGtFilter", parameters = {
				@ParamDef(name = "targetClossingDate", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningTargetClossingDateLtFilter", parameters = {
				@ParamDef(name = "targetClossingDate", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningTargetClossingDateBwFilter", parameters = {
				@ParamDef(name = "targetClossingDate_MIN", type = String.class),
				@ParamDef(name = "targetClossingDate_MAX", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobOpeningStatusNInFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobOpeningStatusEqFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobOpeningStatusNEqFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobOpeningStatusInFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningHiringManagerNInFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningHiringManagerEqFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningHiringManagerNEqFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningHiringManagerInFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobIdNInFilter", parameters = {
				@ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobIdEqFilter", parameters = {
				@ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobIdNEqFilter", parameters = {
				@ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobIdInFilter", parameters = {
				@ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAssignedrecruiterNInFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAssignedrecruiterEqFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAssignedrecruiterNEqFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAssignedrecruiterInFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningOpenPositionsGtFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningOpenPositionsNInFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningOpenPositionsLtEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningOpenPositionsLtFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningOpenPositionsEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningOpenPositionsNEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningOpenPositionsInFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningOpenPositionsBwFilter", parameters = {
				@ParamDef(name = "openPositions_MIN", type = Integer.class),
				@ParamDef(name = "openPositions_MAX", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningOpenPositionsGtEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobApplicationJobOpeningCityNInFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningCityEqFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningCityNEqFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningCityInFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIndustryNInFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIndustryEqFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIndustryNEqFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIndustryInFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningPostalcodeNInFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningPostalcodeEqFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningPostalcodeNEqFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningPostalcodeInFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobTypeNInFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobTypeEqFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobTypeNEqFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningJobTypeInFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningSalaryRangeNInFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningSalaryRangeEqFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningSalaryRangeNEqFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningSalaryRangeInFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAddressNInFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAddressEqFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAddressNEqFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningAddressInFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIsRemoteNInFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIsRemoteEqFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIsRemoteNEqFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningIsRemoteInFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningDescriptionRequirementsNInFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningDescriptionRequirementsEqFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningDescriptionRequirementsNEqFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "jobApplicationJobOpeningDescriptionRequirementsInFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "jobApplicationLastNameNInFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "jobApplicationLastNameEqFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "jobApplicationLastNameNEqFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "jobApplicationLastNameInFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "jobApplicationMobileNInFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "jobApplicationMobileEqFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "jobApplicationMobileNEqFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "jobApplicationMobileInFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "jobApplicationReferredByNInFilter", parameters = {
				@ParamDef(name = "referredBy", type = String.class) }),
		@FilterDef(name = "jobApplicationReferredByEqFilter", parameters = {
				@ParamDef(name = "referredBy", type = String.class) }),
		@FilterDef(name = "jobApplicationReferredByNEqFilter", parameters = {
				@ParamDef(name = "referredBy", type = String.class) }),
		@FilterDef(name = "jobApplicationReferredByInFilter", parameters = {
				@ParamDef(name = "referredBy", type = String.class) }),
		@FilterDef(name = "jobApplicationRelationshipNInFilter", parameters = {
				@ParamDef(name = "relationship", type = String.class) }),
		@FilterDef(name = "jobApplicationRelationshipEqFilter", parameters = {
				@ParamDef(name = "relationship", type = String.class) }),
		@FilterDef(name = "jobApplicationRelationshipNEqFilter", parameters = {
				@ParamDef(name = "relationship", type = String.class) }),
		@FilterDef(name = "jobApplicationRelationshipInFilter", parameters = {
				@ParamDef(name = "relationship", type = String.class) }),
		@FilterDef(name = "jobApplicationResumeNInFilter", parameters = {
				@ParamDef(name = "resume", type = String.class) }),
		@FilterDef(name = "jobApplicationResumeEqFilter", parameters = {
				@ParamDef(name = "resume", type = String.class) }),
		@FilterDef(name = "jobApplicationResumeNEqFilter", parameters = {
				@ParamDef(name = "resume", type = String.class) }),
		@FilterDef(name = "jobApplicationResumeInFilter", parameters = {
				@ParamDef(name = "resume", type = String.class) }),
		@FilterDef(name = "jobApplicationWorkspaceIdGtFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobApplicationWorkspaceIdNInFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobApplicationWorkspaceIdLtEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobApplicationWorkspaceIdLtFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobApplicationWorkspaceIdEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobApplicationWorkspaceIdNEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobApplicationWorkspaceIdInFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobApplicationWorkspaceIdBwFilter", parameters = {
				@ParamDef(name = "workspaceId_MIN", type = Integer.class),
				@ParamDef(name = "workspaceId_MAX", type = Integer.class) }),
		@FilterDef(name = "jobApplicationWorkspaceIdGtEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }) })
public class JobApplication extends BaseEntitySaaS{

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "APPLICANT_ID", columnDefinition = "INT")
	private Applicant applicant;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "APPLICANT_RESUME_FK", columnDefinition = "INT")
	private ApplicantResume applicantResume;

	@Basic
	@Column(name = "APPLICATION_STATUS", columnDefinition = "ENUM", length = 16)
	private String applicationStatus;

	@Size(max = 50)
	@Basic
	@Column(name = "EMAIL_ID", length = 50)
	private String emailId;

	@Column(name = "APPLICANT_RESUME_SUMMARY", columnDefinition = "json")
	private String applicantResumeSummary;

	@Size(max = 255)
	@Basic
	@Column(name = "FIRST_NAME")
	private String firstName;

	@Size(max = 50)
	@Basic
	@Column(name = "JOB_APPLICATION_ID")
	private String jobApplicationId;

	@GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
	@Id
	@Column(columnDefinition = "INT")
	private Integer id;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "JOB_OPENING_ID", columnDefinition = "INT")
	private JobOpening jobOpening;

	@Size(max = 255)
	@Basic
	@Column(name = "LAST_NAME")
	private String lastName;

	@Size(max = 50)
	@Basic
	@Column(length = 50)
	private String mobile;

	@Size(max = 255)
	@Basic
	@Column(name = "REFERRED_BY")
	private String referredBy;

	@Basic
	@Column(name = "PRE_QUESTIONAIRE_RESULT", columnDefinition = "LONGTEXT")
	private String preQuestionaireResult;

	@Basic
	@Column(columnDefinition = "ENUM", length = 38)
	private String relationship;

	@Size(max = 200)
	@Basic
	@Column(length = 200)
	private String resume;

	@Basic
	@Column(name = "WORKSPACE_ID", columnDefinition = "INT")
	private Integer workspaceId;

	@Basic
	@Column(name = "OVERALL_SCORE")
	private Double overallScore;

	@Basic
	@Column(name = "EDUCATION_SCORE")
	private Double educationScore;

	@Basic
	@Column(name = "EXPERIENCE_SCORE")
	private Double experienceScore;

	@Basic
	@Column(name = "SKILLS_SCORE")
	private Double skillsScore;

	@Basic
	@Column(name = "SAUDIZATION_SCORE")
	private Double saudizationScore;

	@Column(name = "RANKING")
	private Integer ranking;

	@Basic
	@Column(name = "PINNED_APPLICATION")
	private boolean pinnedApplication;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "JOB_APPLICATION_BATCH_ID", columnDefinition = "INT")
	private JobApplicationBatch jobApplicationBatch;

	public JobApplicationBatch getJobApplicationBatch() {
		return jobApplicationBatch;
	}

	public void setJobApplicationBatch(JobApplicationBatch jobApplicationBatch) {
		this.jobApplicationBatch = jobApplicationBatch;
	}

	public Double getOverallScore() {
		return overallScore;
	}

	public void setOverallScore(Double overallScore) {
		this.overallScore = overallScore;
	}

	public Double getEducationScore() {
		return educationScore;
	}

	public void setEducationScore(Double educationScore) {
		this.educationScore = educationScore;
	}

	public Double getExperienceScore() {
		return experienceScore;
	}

	public void setExperienceScore(Double experienceScore) {
		this.experienceScore = experienceScore;
	}

	public Double getSkillsScore() {
		return skillsScore;
	}

	public void setSkillsScore(Double skillsScore) {
		this.skillsScore = skillsScore;
	}

	public Double getSaudizationScore() {
		return saudizationScore;
	}

	public void setSaudizationScore(Double saudizationScore) {
		this.saudizationScore = saudizationScore;
	}

	public JobApplication() {
	}

	public JobApplication(Integer id) {
		this.id = id;
	}

	public Applicant getApplicant() {
		return applicant;
	}

	public void setApplicant(Applicant applicant) {
		this.applicant = applicant;
	}

	public String getApplicationStatus() {
		return applicationStatus;
	}

	public void setApplicationStatus(String applicationStatus) {
		this.applicationStatus = applicationStatus;
	}

	public String getEmailId() {
		return emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public JobOpening getJobOpening() {
		return jobOpening;
	}

	public ApplicantResume getApplicantResume() {
		return applicantResume;
	}

	public void setApplicantResume(ApplicantResume applicantResume) {
		this.applicantResume = applicantResume;
	}

	public void setJobOpening(JobOpening jobOpening) {
		this.jobOpening = jobOpening;
	}

	public String getLastName() {
		return lastName;
	}

	public String getJobApplicationId() {
		return jobApplicationId;
	}

	public void setJobApplicationId(String jobApplicationId) {
		this.jobApplicationId = jobApplicationId;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getMobile() {
		return mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

	public String getReferredBy() {
		return referredBy;
	}

	public void setReferredBy(String referredBy) {
		this.referredBy = referredBy;
	}

	public String getRelationship() {
		return relationship;
	}

	public void setRelationship(String relationship) {
		this.relationship = relationship;
	}

	public String getResume() {
		return resume;
	}

	public void setResume(String resume) {
		this.resume = resume;
	}

	public Integer getWorkspaceId() {
		return workspaceId;
	}

	public String getPreQuestionaireResult() {
		return preQuestionaireResult;
	}

	public void setPreQuestionaireResult(String preQuestionaireResult) {
		this.preQuestionaireResult = preQuestionaireResult;
	}

	public void setWorkspaceId(Integer workspaceId) {
		this.workspaceId = workspaceId;
	}

	@Column(name = "PROCESS_INSTANCE_ID")
	private String processInstanceId;

	@Column(name = "WORKFLOW_STAGE")
	private String workflowStage;

	public String getProcessInstanceId() {
		return processInstanceId;
	}

	public void setProcessInstanceId(String processInstanceId) {
		this.processInstanceId = processInstanceId;
	}

	public String getWorkflowStage() {
		return workflowStage;
	}

	public String getApplicantResumeSummary() {
		return applicantResumeSummary;
	}

	public void setApplicantResumeSummary(String applicantResumeSummary) {
		this.applicantResumeSummary = applicantResumeSummary;
	}

	public void setWorkflowStage(String workflowStage) {
		this.workflowStage = workflowStage;
	}

	public Integer getRanking() {
		return ranking;
	}

	public void setRanking(Integer ranking) {
		this.ranking = ranking;
	}

	public boolean isPinnedApplication() {
		return pinnedApplication;
	}

	public void setPinnedApplication(boolean pinnedApplication) {
		this.pinnedApplication = pinnedApplication;
	}

	public List<WorkflowActions> getActions() {
		return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class)
				.getWorkflowActions(id, "JobApplication");
	}
}

/* (C)2024 */
package com.nouros.hrms.model;

import java.util.Date;

import org.hibernate.envers.Audited;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@Audited
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "FACILITY_MANAGEMENT")
//@Filters(value = { @Filter(name = "facilityManagementAccessCardNumberNInFilter", condition = "ACCESS_CARD_NUMBER not in (:accessCardNumber)"), @Filter(name = "facilityManagementAccessCardNumberEqFilter", condition = "ACCESS_CARD_NUMBER = :accessCardNumber"), @Filter(name = "facilityManagementAccessCardNumberNEqFilter", condition = "ACCESS_CARD_NUMBER != :accessCardNumber"), @Filter(name = "facilityManagementAccessCardNumberInFilter", condition = "ACCESS_CARD_NUMBER in (:accessCardNumber)"), @Filter(name = "facilityManagementCarPlateNumberNInFilter", condition = "CAR_PLATE_NUMBER not in (:carPlateNumber)"), @Filter(name = "facilityManagementCarPlateNumberEqFilter", condition = "CAR_PLATE_NUMBER = :carPlateNumber"), @Filter(name = "facilityManagementCarPlateNumberNEqFilter", condition = "CAR_PLATE_NUMBER != :carPlateNumber"), @Filter(name = "facilityManagementCarPlateNumberInFilter", condition = "CAR_PLATE_NUMBER in (:carPlateNumber)"), @Filter(name = "facilityManagementCompanyNameNInFilter", condition = "COMPANY_NAME not in (:companyName)"), @Filter(name = "facilityManagementCompanyNameEqFilter", condition = "COMPANY_NAME = :companyName"), @Filter(name = "facilityManagementCompanyNameNEqFilter", condition = "COMPANY_NAME != :companyName"), @Filter(name = "facilityManagementCompanyNameInFilter", condition = "COMPANY_NAME in (:companyName)"), @Filter(name = "facilityManagementContactNumberNInFilter", condition = "CONTACT_NUMBER not in (:contactNumber)"), @Filter(name = "facilityManagementContactNumberEqFilter", condition = "CONTACT_NUMBER = :contactNumber"), @Filter(name = "facilityManagementContactNumberNEqFilter", condition = "CONTACT_NUMBER != :contactNumber"), @Filter(name = "facilityManagementContactNumberInFilter", condition = "CONTACT_NUMBER in (:contactNumber)"), @Filter(name = "facilityManagementDeletedEqFilter", condition = "DELETED = :deleted"), @Filter(name = "facilityManagementDeletedNEqFilter", condition = "DELETED != :deleted"), @Filter(name = "facilityManagementEmployeeIdGtFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id)"), @Filter(name = "facilityManagementEmployeeIdNInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID not in (:id)"), @Filter(name = "facilityManagementEmployeeIdLtEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID <= :id)"), @Filter(name = "facilityManagementEmployeeIdLtFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID < :id)"), @Filter(name = "facilityManagementEmployeeIdEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID = :id)"), @Filter(name = "facilityManagementEmployeeIdNEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID != :id)"), @Filter(name = "facilityManagementEmployeeIdInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID in (:id)"), @Filter(name = "facilityManagementEmployeeIdBwFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id_MIN  AND EMPLOYEE.ID < :id_MAX )"), @Filter(name = "facilityManagementEmployeeIdGtEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID >= :id)"), @Filter(name = "facilityManagementEmployeeName2NInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 not in (:name2)"), @Filter(name = "facilityManagementEmployeeName2EqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 = :name2)"), @Filter(name = "facilityManagementEmployeeName2NEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 != :name2)"), @Filter(name = "facilityManagementEmployeeName2InFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 in (:name2)"), @Filter(name = "facilityManagementEmployeeName1NInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 not in (:name1)"), @Filter(name = "facilityManagementEmployeeName1EqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 = :name1)"), @Filter(name = "facilityManagementEmployeeName1NEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 != :name1)"), @Filter(name = "facilityManagementEmployeeName1InFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 in (:name1)"), @Filter(name = "facilityManagementEndDateGtFilter", condition = "END_DATE > (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "facilityManagementEndDateLtFilter", condition = "END_DATE < (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "facilityManagementEndDateBwFilter", condition = "END_DATE >(SELECT DATE_FORMAT(:endDate_MIN, '%Y-%m-%d')) AND END_DATE <(SELECT DATE_FORMAT(:endDate_MAX, '%Y-%m-%d'))"), @Filter(name = "facilityManagementFloorNumberNInFilter", condition = "FLOOR_NUMBER not in (:floorNumber)"), @Filter(name = "facilityManagementFloorNumberEqFilter", condition = "FLOOR_NUMBER = :floorNumber"), @Filter(name = "facilityManagementFloorNumberNEqFilter", condition = "FLOOR_NUMBER != :floorNumber"), @Filter(name = "facilityManagementFloorNumberInFilter", condition = "FLOOR_NUMBER in (:floorNumber)"), @Filter(name = "facilityManagementIdGtFilter", condition = "ID > :id"), @Filter(name = "facilityManagementIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "facilityManagementIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "facilityManagementIdLtFilter", condition = "ID < :id"), @Filter(name = "facilityManagementIdEqFilter", condition = "ID = :id"), @Filter(name = "facilityManagementIdNEqFilter", condition = "ID != :id"), @Filter(name = "facilityManagementIdInFilter", condition = "ID in (:id)"), @Filter(name = "facilityManagementIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "facilityManagementIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "facilityManagementIdEqFilter", condition = "ID = :id"), @Filter(name = "facilityManagementNationalIdNInFilter", condition = "NATIONAL_ID not in (:nationalId)"), @Filter(name = "facilityManagementNationalIdEqFilter", condition = "NATIONAL_ID = :nationalId"), @Filter(name = "facilityManagementNationalIdNEqFilter", condition = "NATIONAL_ID != :nationalId"), @Filter(name = "facilityManagementNationalIdInFilter", condition = "NATIONAL_ID in (:nationalId)"), @Filter(name = "facilityManagementOfficeBuildingNInFilter", condition = "OFFICE_BUILDING not in (:officeBuilding)"), @Filter(name = "facilityManagementOfficeBuildingEqFilter", condition = "OFFICE_BUILDING = :officeBuilding"), @Filter(name = "facilityManagementOfficeBuildingNEqFilter", condition = "OFFICE_BUILDING != :officeBuilding"), @Filter(name = "facilityManagementOfficeBuildingInFilter", condition = "OFFICE_BUILDING in (:officeBuilding)"), @Filter(name = "facilityManagementParkingAccessNInFilter", condition = "PARKING_ACCESS not in (:parkingAccess)"), @Filter(name = "facilityManagementParkingAccessEqFilter", condition = "PARKING_ACCESS = :parkingAccess"), @Filter(name = "facilityManagementParkingAccessNEqFilter", condition = "PARKING_ACCESS != :parkingAccess"), @Filter(name = "facilityManagementParkingAccessInFilter", condition = "PARKING_ACCESS in (:parkingAccess)"), @Filter(name = "facilityManagementParkingFloorNInFilter", condition = "PARKING_FLOOR not in (:parkingFloor)"), @Filter(name = "facilityManagementParkingFloorEqFilter", condition = "PARKING_FLOOR = :parkingFloor"), @Filter(name = "facilityManagementParkingFloorNEqFilter", condition = "PARKING_FLOOR != :parkingFloor"), @Filter(name = "facilityManagementParkingFloorInFilter", condition = "PARKING_FLOOR in (:parkingFloor)"), @Filter(name = "facilityManagementParkingSlotNumberNInFilter", condition = "PARKING_SLOT_NUMBER not in (:parkingSlotNumber)"), @Filter(name = "facilityManagementParkingSlotNumberEqFilter", condition = "PARKING_SLOT_NUMBER = :parkingSlotNumber"), @Filter(name = "facilityManagementParkingSlotNumberNEqFilter", condition = "PARKING_SLOT_NUMBER != :parkingSlotNumber"), @Filter(name = "facilityManagementParkingSlotNumberInFilter", condition = "PARKING_SLOT_NUMBER in (:parkingSlotNumber)"), @Filter(name = "facilityManagementStartDateGtFilter", condition = "START_DATE > (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "facilityManagementStartDateLtFilter", condition = "START_DATE < (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "facilityManagementStartDateBwFilter", condition = "START_DATE >(SELECT DATE_FORMAT(:startDate_MIN, '%Y-%m-%d')) AND START_DATE <(SELECT DATE_FORMAT(:startDate_MAX, '%Y-%m-%d'))"), @Filter(name = "facilityManagementCreatorUserFirstNameNInFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME not in (:firstName)"), @Filter(name = "facilityManagementCreatorUserFirstNameEqFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME = :firstName)"), @Filter(name = "facilityManagementCreatorUserFirstNameNEqFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME != :firstName)"), @Filter(name = "facilityManagementCreatorUserFirstNameInFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME in (:firstName)"), @Filter(name = "facilityManagementCreatorUserLastNameNInFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME not in (:lastName)"), @Filter(name = "facilityManagementCreatorUserLastNameEqFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME = :lastName)"), @Filter(name = "facilityManagementCreatorUserLastNameNEqFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME != :lastName)"), @Filter(name = "facilityManagementCreatorUserLastNameInFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME in (:lastName)"), @Filter(name = "facilityManagementCreatorUserMiddleNameNInFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME not in (:middleName)"), @Filter(name = "facilityManagementCreatorUserMiddleNameEqFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME = :middleName)"), @Filter(name = "facilityManagementCreatorUserMiddleNameNEqFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME != :middleName)"), @Filter(name = "facilityManagementCreatorUserMiddleNameInFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME in (:middleName)"), @Filter(name = "facilityManagementCreatorUserUserNameNInFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME not in (:userName)"), @Filter(name = "facilityManagementCreatorUserUserNameEqFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME = :userName)"), @Filter(name = "facilityManagementCreatorUserUserNameNEqFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME != :userName)"), @Filter(name = "facilityManagementCreatorUserUserNameInFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME in (:userName)"), @Filter(name = "facilityManagementCreatorUserUseridGtFilter", condition = "creator in (select USER.id from USER where USER.USERID > :userid)"), @Filter(name = "facilityManagementCreatorUserUseridNInFilter", condition = "creator in (select USER.id from USER where USER.USERID not in (:userid)"), @Filter(name = "facilityManagementCreatorUserUseridLtEqFilter", condition = "creator in (select USER.id from USER where USER.USERID <= :userid)"), @Filter(name = "facilityManagementCreatorUserUseridLtFilter", condition = "creator in (select USER.id from USER where USER.USERID < :userid)"), @Filter(name = "facilityManagementCreatorUserUseridEqFilter", condition = "creator in (select USER.id from USER where USER.USERID = :userid)"), @Filter(name = "facilityManagementCreatorUserUseridNEqFilter", condition = "creator in (select USER.id from USER where USER.USERID != :userid)"), @Filter(name = "facilityManagementCreatorUserUseridInFilter", condition = "creator in (select USER.id from USER where USER.USERID in (:userid)"), @Filter(name = "facilityManagementCreatorUserUseridBwFilter", condition = "creator in (select USER.id from USER where USER.USERID > :userid_MIN  AND USER.USERID < :userid_MAX )"), @Filter(name = "facilityManagementCreatorUserUseridGtEqFilter", condition = "creator in (select USER.id from USER where USER.USERID >= :userid)"), @Filter(name = "facilityManagementCreatedTimeGtFilter", condition = "CREATED_TIME > (SELECT DATE_FORMAT(:createdTime, '%Y-%m-%d'))"), @Filter(name = "facilityManagementCreatedTimeLtFilter", condition = "CREATED_TIME < (SELECT DATE_FORMAT(:createdTime, '%Y-%m-%d'))"), @Filter(name = "facilityManagementCreatedTimeBwFilter", condition = "CREATED_TIME >(SELECT DATE_FORMAT(:createdTime_MIN, '%Y-%m-%d')) AND CREATED_TIME <(SELECT DATE_FORMAT(:createdTime_MAX, '%Y-%m-%d'))"), @Filter(name = "facilityManagementLastModifierUserFirstNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME not in (:firstName)"), @Filter(name = "facilityManagementLastModifierUserFirstNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME = :firstName)"), @Filter(name = "facilityManagementLastModifierUserFirstNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME != :firstName)"), @Filter(name = "facilityManagementLastModifierUserFirstNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME in (:firstName)"), @Filter(name = "facilityManagementLastModifierUserLastNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME not in (:lastName)"), @Filter(name = "facilityManagementLastModifierUserLastNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME = :lastName)"), @Filter(name = "facilityManagementLastModifierUserLastNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME != :lastName)"), @Filter(name = "facilityManagementLastModifierUserLastNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME in (:lastName)"), @Filter(name = "facilityManagementLastModifierUserMiddleNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME not in (:middleName)"), @Filter(name = "facilityManagementLastModifierUserMiddleNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME = :middleName)"), @Filter(name = "facilityManagementLastModifierUserMiddleNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME != :middleName)"), @Filter(name = "facilityManagementLastModifierUserMiddleNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME in (:middleName)"), @Filter(name = "facilityManagementLastModifierUserUserNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME not in (:userName)"), @Filter(name = "facilityManagementLastModifierUserUserNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME = :userName)"), @Filter(name = "facilityManagementLastModifierUserUserNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME != :userName)"), @Filter(name = "facilityManagementLastModifierUserUserNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME in (:userName)"), @Filter(name = "facilityManagementLastModifierUserUseridGtFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID > :userid)"), @Filter(name = "facilityManagementLastModifierUserUseridNInFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID not in (:userid)"), @Filter(name = "facilityManagementLastModifierUserUseridLtEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID <= :userid)"), @Filter(name = "facilityManagementLastModifierUserUseridLtFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID < :userid)"), @Filter(name = "facilityManagementLastModifierUserUseridEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID = :userid)"), @Filter(name = "facilityManagementLastModifierUserUseridNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID != :userid)"), @Filter(name = "facilityManagementLastModifierUserUseridInFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID in (:userid)"), @Filter(name = "facilityManagementLastModifierUserUseridBwFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID > :userid_MIN  AND USER.USERID < :userid_MAX )"), @Filter(name = "facilityManagementLastModifierUserUseridGtEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID >= :userid)"), @Filter(name = "facilityManagementModifiedTimeGtFilter", condition = "MODIFIED_TIME > (SELECT DATE_FORMAT(:modifiedTime, '%Y-%m-%d'))"), @Filter(name = "facilityManagementModifiedTimeLtFilter", condition = "MODIFIED_TIME < (SELECT DATE_FORMAT(:modifiedTime, '%Y-%m-%d'))"), @Filter(name = "facilityManagementModifiedTimeBwFilter", condition = "MODIFIED_TIME >(SELECT DATE_FORMAT(:modifiedTime_MIN, '%Y-%m-%d')) AND MODIFIED_TIME <(SELECT DATE_FORMAT(:modifiedTime_MAX, '%Y-%m-%d'))"), @Filter(name = "facilityManagementCustomerIdGtFilter", condition = "CUSTOMER_ID > :customerId"), @Filter(name = "facilityManagementCustomerIdNInFilter", condition = "CUSTOMER_ID not in (:customerId)"), @Filter(name = "facilityManagementCustomerIdLtEqFilter", condition = "CUSTOMER_ID <= :customerId"), @Filter(name = "facilityManagementCustomerIdLtFilter", condition = "CUSTOMER_ID < :customerId"), @Filter(name = "facilityManagementCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId"), @Filter(name = "facilityManagementCustomerIdNEqFilter", condition = "CUSTOMER_ID != :customerId"), @Filter(name = "facilityManagementCustomerIdInFilter", condition = "CUSTOMER_ID in (:customerId)"), @Filter(name = "facilityManagementCustomerIdBwFilter", condition = "CUSTOMER_ID > :customerId_MIN  AND CUSTOMER_ID < :customerId_MAX"), @Filter(name = "facilityManagementCustomerIdGtEqFilter", condition = "CUSTOMER_ID >= :customerId"), @Filter(name = "facilityManagementCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId") })
//@FilterDefs(value = { @FilterDef(name = "facilityManagementAccessCardNumberNInFilter", parameters = { @ParamDef(name = "accessCardNumber", type = String.class) }), @FilterDef(name = "facilityManagementAccessCardNumberEqFilter", parameters = { @ParamDef(name = "accessCardNumber", type = String.class) }), @FilterDef(name = "facilityManagementAccessCardNumberNEqFilter", parameters = { @ParamDef(name = "accessCardNumber", type = String.class) }), @FilterDef(name = "facilityManagementAccessCardNumberInFilter", parameters = { @ParamDef(name = "accessCardNumber", type = String.class) }), @FilterDef(name = "facilityManagementCarPlateNumberNInFilter", parameters = { @ParamDef(name = "carPlateNumber", type = String.class) }), @FilterDef(name = "facilityManagementCarPlateNumberEqFilter", parameters = { @ParamDef(name = "carPlateNumber", type = String.class) }), @FilterDef(name = "facilityManagementCarPlateNumberNEqFilter", parameters = { @ParamDef(name = "carPlateNumber", type = String.class) }), @FilterDef(name = "facilityManagementCarPlateNumberInFilter", parameters = { @ParamDef(name = "carPlateNumber", type = String.class) }), @FilterDef(name = "facilityManagementCompanyNameNInFilter", parameters = { @ParamDef(name = "companyName", type = String.class) }), @FilterDef(name = "facilityManagementCompanyNameEqFilter", parameters = { @ParamDef(name = "companyName", type = String.class) }), @FilterDef(name = "facilityManagementCompanyNameNEqFilter", parameters = { @ParamDef(name = "companyName", type = String.class) }), @FilterDef(name = "facilityManagementCompanyNameInFilter", parameters = { @ParamDef(name = "companyName", type = String.class) }), @FilterDef(name = "facilityManagementContactNumberNInFilter", parameters = { @ParamDef(name = "contactNumber", type = String.class) }), @FilterDef(name = "facilityManagementContactNumberEqFilter", parameters = { @ParamDef(name = "contactNumber", type = String.class) }), @FilterDef(name = "facilityManagementContactNumberNEqFilter", parameters = { @ParamDef(name = "contactNumber", type = String.class) }), @FilterDef(name = "facilityManagementContactNumberInFilter", parameters = { @ParamDef(name = "contactNumber", type = String.class) }), @FilterDef(name = "facilityManagementDeletedEqFilter", parameters = { @ParamDef(name = "deleted", type = boolean.class) }), @FilterDef(name = "facilityManagementDeletedNEqFilter", parameters = { @ParamDef(name = "deleted", type = boolean.class) }), @FilterDef(name = "facilityManagementEmployeeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementEmployeeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementEmployeeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementEmployeeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementEmployeeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementEmployeeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementEmployeeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementEmployeeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "facilityManagementEmployeeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementEmployeeName2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "facilityManagementEmployeeName2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "facilityManagementEmployeeName2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "facilityManagementEmployeeName2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "facilityManagementEmployeeName1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "facilityManagementEmployeeName1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "facilityManagementEmployeeName1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "facilityManagementEmployeeName1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "facilityManagementEndDateGtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "facilityManagementEndDateLtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "facilityManagementEndDateBwFilter", parameters = { @ParamDef(name = "endDate_MIN", type = String.class), @ParamDef(name = "endDate_MAX", type = String.class) }), @FilterDef(name = "facilityManagementFloorNumberNInFilter", parameters = { @ParamDef(name = "floorNumber", type = String.class) }), @FilterDef(name = "facilityManagementFloorNumberEqFilter", parameters = { @ParamDef(name = "floorNumber", type = String.class) }), @FilterDef(name = "facilityManagementFloorNumberNEqFilter", parameters = { @ParamDef(name = "floorNumber", type = String.class) }), @FilterDef(name = "facilityManagementFloorNumberInFilter", parameters = { @ParamDef(name = "floorNumber", type = String.class) }), @FilterDef(name = "facilityManagementIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "facilityManagementIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "facilityManagementNationalIdNInFilter", parameters = { @ParamDef(name = "nationalId", type = String.class) }), @FilterDef(name = "facilityManagementNationalIdEqFilter", parameters = { @ParamDef(name = "nationalId", type = String.class) }), @FilterDef(name = "facilityManagementNationalIdNEqFilter", parameters = { @ParamDef(name = "nationalId", type = String.class) }), @FilterDef(name = "facilityManagementNationalIdInFilter", parameters = { @ParamDef(name = "nationalId", type = String.class) }), @FilterDef(name = "facilityManagementOfficeBuildingNInFilter", parameters = { @ParamDef(name = "officeBuilding", type = String.class) }), @FilterDef(name = "facilityManagementOfficeBuildingEqFilter", parameters = { @ParamDef(name = "officeBuilding", type = String.class) }), @FilterDef(name = "facilityManagementOfficeBuildingNEqFilter", parameters = { @ParamDef(name = "officeBuilding", type = String.class) }), @FilterDef(name = "facilityManagementOfficeBuildingInFilter", parameters = { @ParamDef(name = "officeBuilding", type = String.class) }), @FilterDef(name = "facilityManagementParkingAccessNInFilter", parameters = { @ParamDef(name = "parkingAccess", type = String.class) }), @FilterDef(name = "facilityManagementParkingAccessEqFilter", parameters = { @ParamDef(name = "parkingAccess", type = String.class) }), @FilterDef(name = "facilityManagementParkingAccessNEqFilter", parameters = { @ParamDef(name = "parkingAccess", type = String.class) }), @FilterDef(name = "facilityManagementParkingAccessInFilter", parameters = { @ParamDef(name = "parkingAccess", type = String.class) }), @FilterDef(name = "facilityManagementParkingFloorNInFilter", parameters = { @ParamDef(name = "parkingFloor", type = String.class) }), @FilterDef(name = "facilityManagementParkingFloorEqFilter", parameters = { @ParamDef(name = "parkingFloor", type = String.class) }), @FilterDef(name = "facilityManagementParkingFloorNEqFilter", parameters = { @ParamDef(name = "parkingFloor", type = String.class) }), @FilterDef(name = "facilityManagementParkingFloorInFilter", parameters = { @ParamDef(name = "parkingFloor", type = String.class) }), @FilterDef(name = "facilityManagementParkingSlotNumberNInFilter", parameters = { @ParamDef(name = "parkingSlotNumber", type = String.class) }), @FilterDef(name = "facilityManagementParkingSlotNumberEqFilter", parameters = { @ParamDef(name = "parkingSlotNumber", type = String.class) }), @FilterDef(name = "facilityManagementParkingSlotNumberNEqFilter", parameters = { @ParamDef(name = "parkingSlotNumber", type = String.class) }), @FilterDef(name = "facilityManagementParkingSlotNumberInFilter", parameters = { @ParamDef(name = "parkingSlotNumber", type = String.class) }), @FilterDef(name = "facilityManagementStartDateGtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "facilityManagementStartDateLtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "facilityManagementStartDateBwFilter", parameters = { @ParamDef(name = "startDate_MIN", type = String.class), @ParamDef(name = "startDate_MAX", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserUserNameNInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserUserNameEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserUserNameNEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserUserNameInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "facilityManagementCreatorUserUseridGtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementCreatorUserUseridNInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementCreatorUserUseridLtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementCreatorUserUseridLtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementCreatorUserUseridEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementCreatorUserUseridNEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementCreatorUserUseridInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementCreatorUserUseridBwFilter", parameters = { @ParamDef(name = "userid_MIN", type = Integer.class), @ParamDef(name = "userid_MAX", type = Integer.class) }), @FilterDef(name = "facilityManagementCreatorUserUseridGtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementCreatedTimeGtFilter", parameters = { @ParamDef(name = "createdTime", type = String.class) }), @FilterDef(name = "facilityManagementCreatedTimeLtFilter", parameters = { @ParamDef(name = "createdTime", type = String.class) }), @FilterDef(name = "facilityManagementCreatedTimeBwFilter", parameters = { @ParamDef(name = "createdTime_MIN", type = String.class), @ParamDef(name = "createdTime_MAX", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserUserNameNInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserUserNameEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserUserNameNEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserUserNameInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "facilityManagementLastModifierUserUseridGtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementLastModifierUserUseridNInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementLastModifierUserUseridLtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementLastModifierUserUseridLtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementLastModifierUserUseridEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementLastModifierUserUseridNEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementLastModifierUserUseridInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementLastModifierUserUseridBwFilter", parameters = { @ParamDef(name = "userid_MIN", type = Integer.class), @ParamDef(name = "userid_MAX", type = Integer.class) }), @FilterDef(name = "facilityManagementLastModifierUserUseridGtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "facilityManagementModifiedTimeGtFilter", parameters = { @ParamDef(name = "modifiedTime", type = String.class) }), @FilterDef(name = "facilityManagementModifiedTimeLtFilter", parameters = { @ParamDef(name = "modifiedTime", type = String.class) }), @FilterDef(name = "facilityManagementModifiedTimeBwFilter", parameters = { @ParamDef(name = "modifiedTime_MIN", type = String.class), @ParamDef(name = "modifiedTime_MAX", type = String.class) }), @FilterDef(name = "facilityManagementCustomerIdGtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "facilityManagementCustomerIdNInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "facilityManagementCustomerIdLtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "facilityManagementCustomerIdLtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "facilityManagementCustomerIdEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "facilityManagementCustomerIdNEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "facilityManagementCustomerIdInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "facilityManagementCustomerIdBwFilter", parameters = { @ParamDef(name = "customerId_MIN", type = Integer.class), @ParamDef(name = "customerId_MAX", type = Integer.class) }), @FilterDef(name = "facilityManagementCustomerIdGtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }) })
public class FacilityManagement extends BaseEntitySaaS {

    @Size(max = 100)
    @Basic
    @Column(name = "ACCESS_CARD_NUMBER", length = 100)
    private String accessCardNumber;

    @Size(max = 20)
    @Basic
    @Column(name = "CAR_PLATE_NUMBER", length = 20)
    private String carPlateNumber;

    @Size(max = 255)
    @Basic
    @Column(name = "COMPANY_NAME")
    private String companyName;

    @Size(max = 20)
    @Basic
    @Column(name = "CONTACT_NUMBER", length = 20)
    private String contactNumber;

    @Basic
    private boolean deleted;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "EMPLOYEE_ID", columnDefinition = "INT")
    private Employee employee;

    @Basic
    @Column(name = "END_DATE", length = 19)
    private Date endDate;

    @Size(max = 50)
    @Basic
    @Column(name = "FLOOR_NUMBER", length = 50)
    private String floorNumber;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 100)
    @Basic
    @Column(name = "NATIONAL_ID", length = 100)
    private String nationalId;

    @Size(max = 255)
    @Basic
    @Column(name = "OFFICE_BUILDING")
    private String officeBuilding;

    @Basic
    @Column(name = "PARKING_ACCESS", columnDefinition = "ENUM('Yes','No')")
    private String parkingAccess;

    @Size(max = 50)
    @Basic
    @Column(name = "PARKING_FLOOR", length = 50)
    private String parkingFloor;

    @Size(max = 100)
    @Basic
    @Column(name = "PARKING_SLOT_NUMBER", length = 100)
    private String parkingSlotNumber;

    @Basic
    @Column(name = "START_DATE", length = 19)
    private Date startDate;

    public FacilityManagement() {
    }

    public FacilityManagement(Integer id) {
        this.id = id;
    }

    public String getAccessCardNumber() {
        return accessCardNumber;
    }

    public void setAccessCardNumber(String accessCardNumber) {
        this.accessCardNumber = accessCardNumber;
    }

    public String getCarPlateNumber() {
        return carPlateNumber;
    }

    public void setCarPlateNumber(String carPlateNumber) {
        this.carPlateNumber = carPlateNumber;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public String getContactNumber() {
        return contactNumber;
    }

    public void setContactNumber(String contactNumber) {
        this.contactNumber = contactNumber;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Employee getEmployee() {
        return employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public String getFloorNumber() {
        return floorNumber;
    }

    public void setFloorNumber(String floorNumber) {
        this.floorNumber = floorNumber;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getNationalId() {
        return nationalId;
    }

    public void setNationalId(String nationalId) {
        this.nationalId = nationalId;
    }

    public String getOfficeBuilding() {
        return officeBuilding;
    }

    public void setOfficeBuilding(String officeBuilding) {
        this.officeBuilding = officeBuilding;
    }

    public String getParkingAccess() {
        return parkingAccess;
    }

    public void setParkingAccess(String parkingAccess) {
        this.parkingAccess = parkingAccess;
    }

    public String getParkingFloor() {
        return parkingFloor;
    }

    public void setParkingFloor(String parkingFloor) {
        this.parkingFloor = parkingFloor;
    }

    public String getParkingSlotNumber() {
        return parkingSlotNumber;
    }

    public void setParkingSlotNumber(String parkingSlotNumber) {
        this.parkingSlotNumber = parkingSlotNumber;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }
}

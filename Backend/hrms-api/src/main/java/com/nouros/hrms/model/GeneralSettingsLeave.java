package com.nouros.hrms.model;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "GENERAL_SETTINGS_LEAVE")
@Filters(value = { @Filter(name = "generalSettingsLeaveAddCompensatoryRequestForFutureDateEqFilter", condition = "ADD_COMPENSATORY_REQUEST_FOR_FUTURE_DATE = :addCompensatoryRequestForFutureDate"), @Filter(name = "generalSettingsLeaveAddCompensatoryRequestForFutureDateNEqFilter", condition = "ADD_COMPENSATORY_REQUEST_FOR_FUTURE_DATE != :addCompensatoryRequestForFutureDate"), @Filter(name = "generalSettingsLeaveAllowLeaveRequestUntilNextNInFilter", condition = "ALLOW_LEAVE_REQUEST_UNTIL_NEXT not in (:allowLeaveRequestUntilNext)"), @Filter(name = "generalSettingsLeaveAllowLeaveRequestUntilNextEqFilter", condition = "ALLOW_LEAVE_REQUEST_UNTIL_NEXT = :allowLeaveRequestUntilNext"), @Filter(name = "generalSettingsLeaveAllowLeaveRequestUntilNextNEqFilter", condition = "ALLOW_LEAVE_REQUEST_UNTIL_NEXT != :allowLeaveRequestUntilNext"), @Filter(name = "generalSettingsLeaveAllowLeaveRequestUntilNextInFilter", condition = "ALLOW_LEAVE_REQUEST_UNTIL_NEXT in (:allowLeaveRequestUntilNext)"), @Filter(name = "generalSettingsLeaveApplicableLeaveTypesNInFilter", condition = "APPLICABLE_LEAVE_TYPES not in (:applicableLeaveTypes)"), @Filter(name = "generalSettingsLeaveApplicableLeaveTypesEqFilter", condition = "APPLICABLE_LEAVE_TYPES = :applicableLeaveTypes"), @Filter(name = "generalSettingsLeaveApplicableLeaveTypesNEqFilter", condition = "APPLICABLE_LEAVE_TYPES != :applicableLeaveTypes"), @Filter(name = "generalSettingsLeaveApplicableLeaveTypesInFilter", condition = "APPLICABLE_LEAVE_TYPES in (:applicableLeaveTypes)"), @Filter(name = "generalSettingsLeaveCompensatoryRequestEntryModeNInFilter", condition = "COMPENSATORY_REQUEST_ENTRY_MODE not in (:compensatoryRequestEntryMode)"), @Filter(name = "generalSettingsLeaveCompensatoryRequestEntryModeEqFilter", condition = "COMPENSATORY_REQUEST_ENTRY_MODE = :compensatoryRequestEntryMode"), @Filter(name = "generalSettingsLeaveCompensatoryRequestEntryModeNEqFilter", condition = "COMPENSATORY_REQUEST_ENTRY_MODE != :compensatoryRequestEntryMode"), @Filter(name = "generalSettingsLeaveCompensatoryRequestEntryModeInFilter", condition = "COMPENSATORY_REQUEST_ENTRY_MODE in (:compensatoryRequestEntryMode)"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveGtFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE > :consecutiveLeavesConsideredAsLeave"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveNInFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE not in (:consecutiveLeavesConsideredAsLeave)"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveLtEqFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE <= :consecutiveLeavesConsideredAsLeave"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveLtFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE < :consecutiveLeavesConsideredAsLeave"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveEqFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE = :consecutiveLeavesConsideredAsLeave"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveNEqFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE != :consecutiveLeavesConsideredAsLeave"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveInFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE in (:consecutiveLeavesConsideredAsLeave)"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveBwFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE > :consecutiveLeavesConsideredAsLeave_MIN  AND CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE < :consecutiveLeavesConsideredAsLeave_MAX"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveGtEqFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE >= :consecutiveLeavesConsideredAsLeave"), @Filter(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveEqFilter", condition = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE = :consecutiveLeavesConsideredAsLeave"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysGtFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS > :creditedLeaveExpirationDays"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysNInFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS not in (:creditedLeaveExpirationDays)"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysLtEqFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS <= :creditedLeaveExpirationDays"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysLtFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS < :creditedLeaveExpirationDays"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysEqFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS = :creditedLeaveExpirationDays"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysNEqFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS != :creditedLeaveExpirationDays"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysInFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS in (:creditedLeaveExpirationDays)"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysBwFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS > :creditedLeaveExpirationDays_MIN  AND CREDITED_LEAVE_EXPIRATION_DAYS < :creditedLeaveExpirationDays_MAX"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysGtEqFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS >= :creditedLeaveExpirationDays"), @Filter(name = "generalSettingsLeaveCreditedLeaveExpirationDaysEqFilter", condition = "CREDITED_LEAVE_EXPIRATION_DAYS = :creditedLeaveExpirationDays"), @Filter(name = "generalSettingsLeaveCurrentDayAndUpcomingLeaveRequestsNInFilter", condition = "CURRENT_DAY_AND_UPCOMING_LEAVE_REQUESTS not in (:currentDayAndUpcomingLeaveRequests)"), @Filter(name = "generalSettingsLeaveCurrentDayAndUpcomingLeaveRequestsEqFilter", condition = "CURRENT_DAY_AND_UPCOMING_LEAVE_REQUESTS = :currentDayAndUpcomingLeaveRequests"), @Filter(name = "generalSettingsLeaveCurrentDayAndUpcomingLeaveRequestsNEqFilter", condition = "CURRENT_DAY_AND_UPCOMING_LEAVE_REQUESTS != :currentDayAndUpcomingLeaveRequests"), @Filter(name = "generalSettingsLeaveCurrentDayAndUpcomingLeaveRequestsInFilter", condition = "CURRENT_DAY_AND_UPCOMING_LEAVE_REQUESTS in (:currentDayAndUpcomingLeaveRequests)"), @Filter(name = "generalSettingsLeaveCustomizeEmailTemplateNInFilter", condition = "CUSTOMIZE_EMAIL_TEMPLATE not in (:customizeEmailTemplate)"), @Filter(name = "generalSettingsLeaveCustomizeEmailTemplateEqFilter", condition = "CUSTOMIZE_EMAIL_TEMPLATE = :customizeEmailTemplate"), @Filter(name = "generalSettingsLeaveCustomizeEmailTemplateNEqFilter", condition = "CUSTOMIZE_EMAIL_TEMPLATE != :customizeEmailTemplate"), @Filter(name = "generalSettingsLeaveCustomizeEmailTemplateInFilter", condition = "CUSTOMIZE_EMAIL_TEMPLATE in (:customizeEmailTemplate)"), @Filter(name = "generalSettingsLeaveDurationsAllowedNInFilter", condition = "DURATIONS_ALLOWED not in (:durationsAllowed)"), @Filter(name = "generalSettingsLeaveDurationsAllowedEqFilter", condition = "DURATIONS_ALLOWED = :durationsAllowed"), @Filter(name = "generalSettingsLeaveDurationsAllowedNEqFilter", condition = "DURATIONS_ALLOWED != :durationsAllowed"), @Filter(name = "generalSettingsLeaveDurationsAllowedInFilter", condition = "DURATIONS_ALLOWED in (:durationsAllowed)"), @Filter(name = "generalSettingsLeaveEnablePasswordProtectionEqFilter", condition = "ENABLE_PASSWORD_PROTECTION = :enablePasswordProtection"), @Filter(name = "generalSettingsLeaveEnablePasswordProtectionNEqFilter", condition = "ENABLE_PASSWORD_PROTECTION != :enablePasswordProtection"), @Filter(name = "generalSettingsLeaveEnablePayrollReportForAdminEqFilter", condition = "ENABLE_PAYROLL_REPORT_FOR_ADMIN = :enablePayrollReportForAdmin"), @Filter(name = "generalSettingsLeaveEnablePayrollReportForAdminNEqFilter", condition = "ENABLE_PAYROLL_REPORT_FOR_ADMIN != :enablePayrollReportForAdmin"), @Filter(name = "generalSettingsLeaveIdGtFilter", condition = "ID > :id"), @Filter(name = "generalSettingsLeaveIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "generalSettingsLeaveIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "generalSettingsLeaveIdLtFilter", condition = "ID < :id"), @Filter(name = "generalSettingsLeaveIdEqFilter", condition = "ID = :id"), @Filter(name = "generalSettingsLeaveIdNEqFilter", condition = "ID != :id"), @Filter(name = "generalSettingsLeaveIdInFilter", condition = "ID in (:id)"), @Filter(name = "generalSettingsLeaveIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "generalSettingsLeaveIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "generalSettingsLeaveIdEqFilter", condition = "ID = :id"), @Filter(name = "generalSettingsLeaveIncludeHolidaysEqFilter", condition = "INCLUDE_HOLIDAYS = :includeHolidays"), @Filter(name = "generalSettingsLeaveIncludeHolidaysNEqFilter", condition = "INCLUDE_HOLIDAYS != :includeHolidays"), @Filter(name = "generalSettingsLeaveIncludeWeekendsEqFilter", condition = "INCLUDE_WEEKENDS = :includeWeekends"), @Filter(name = "generalSettingsLeaveIncludeWeekendsNEqFilter", condition = "INCLUDE_WEEKENDS != :includeWeekends"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysGtFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS > :leaveCreditedOnHolidays"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysNInFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS not in (:leaveCreditedOnHolidays)"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysLtEqFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS <= :leaveCreditedOnHolidays"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysLtFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS < :leaveCreditedOnHolidays"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysEqFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS = :leaveCreditedOnHolidays"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysNEqFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS != :leaveCreditedOnHolidays"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysInFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS in (:leaveCreditedOnHolidays)"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysBwFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS > :leaveCreditedOnHolidays_MIN  AND LEAVE_CREDITED_ON_HOLIDAYS < :leaveCreditedOnHolidays_MAX"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysGtEqFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS >= :leaveCreditedOnHolidays"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnHolidaysEqFilter", condition = "LEAVE_CREDITED_ON_HOLIDAYS = :leaveCreditedOnHolidays"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendGtFilter", condition = "LEAVE_CREDITED_ON_WEEKEND > :leaveCreditedOnWeekend"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendNInFilter", condition = "LEAVE_CREDITED_ON_WEEKEND not in (:leaveCreditedOnWeekend)"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendLtEqFilter", condition = "LEAVE_CREDITED_ON_WEEKEND <= :leaveCreditedOnWeekend"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendLtFilter", condition = "LEAVE_CREDITED_ON_WEEKEND < :leaveCreditedOnWeekend"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendEqFilter", condition = "LEAVE_CREDITED_ON_WEEKEND = :leaveCreditedOnWeekend"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendNEqFilter", condition = "LEAVE_CREDITED_ON_WEEKEND != :leaveCreditedOnWeekend"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendInFilter", condition = "LEAVE_CREDITED_ON_WEEKEND in (:leaveCreditedOnWeekend)"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendBwFilter", condition = "LEAVE_CREDITED_ON_WEEKEND > :leaveCreditedOnWeekend_MIN  AND LEAVE_CREDITED_ON_WEEKEND < :leaveCreditedOnWeekend_MAX"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendGtEqFilter", condition = "LEAVE_CREDITED_ON_WEEKEND >= :leaveCreditedOnWeekend"), @Filter(name = "generalSettingsLeaveLeaveCreditedOnWeekendEqFilter", condition = "LEAVE_CREDITED_ON_WEEKEND = :leaveCreditedOnWeekend"), @Filter(name = "generalSettingsLeaveLeaveDisplayFormatNInFilter", condition = "LEAVE_DISPLAY_FORMAT not in (:leaveDisplayFormat)"), @Filter(name = "generalSettingsLeaveLeaveDisplayFormatEqFilter", condition = "LEAVE_DISPLAY_FORMAT = :leaveDisplayFormat"), @Filter(name = "generalSettingsLeaveLeaveDisplayFormatNEqFilter", condition = "LEAVE_DISPLAY_FORMAT != :leaveDisplayFormat"), @Filter(name = "generalSettingsLeaveLeaveDisplayFormatInFilter", condition = "LEAVE_DISPLAY_FORMAT in (:leaveDisplayFormat)"), @Filter(name = "generalSettingsLeaveMakeReasonForLeaveCancellationMandatoryEqFilter", condition = "MAKE_REASON_FOR_LEAVE_CANCELLATION_MANDATORY = :makeReasonForLeaveCancellationMandatory"), @Filter(name = "generalSettingsLeaveMakeReasonForLeaveCancellationMandatoryNEqFilter", condition = "MAKE_REASON_FOR_LEAVE_CANCELLATION_MANDATORY != :makeReasonForLeaveCancellationMandatory"), @Filter(name = "generalSettingsLeaveMakeReasonMandatoryEqFilter", condition = "MAKE_REASON_MANDATORY = :makeReasonMandatory"), @Filter(name = "generalSettingsLeaveMakeReasonMandatoryNEqFilter", condition = "MAKE_REASON_MANDATORY != :makeReasonMandatory"), @Filter(name = "generalSettingsLeavePastLeavesWithinCurrentPayPeriodNInFilter", condition = "PAST_LEAVES_WITHIN_CURRENT_PAY_PERIOD not in (:pastLeavesWithinCurrentPayPeriod)"), @Filter(name = "generalSettingsLeavePastLeavesWithinCurrentPayPeriodEqFilter", condition = "PAST_LEAVES_WITHIN_CURRENT_PAY_PERIOD = :pastLeavesWithinCurrentPayPeriod"), @Filter(name = "generalSettingsLeavePastLeavesWithinCurrentPayPeriodNEqFilter", condition = "PAST_LEAVES_WITHIN_CURRENT_PAY_PERIOD != :pastLeavesWithinCurrentPayPeriod"), @Filter(name = "generalSettingsLeavePastLeavesWithinCurrentPayPeriodInFilter", condition = "PAST_LEAVES_WITHIN_CURRENT_PAY_PERIOD in (:pastLeavesWithinCurrentPayPeriod)"), @Filter(name = "generalSettingsLeaveReminderEmailEqFilter", condition = "REMINDER_EMAIL = :reminderEmail"), @Filter(name = "generalSettingsLeaveReminderEmailNEqFilter", condition = "REMINDER_EMAIL != :reminderEmail"), @Filter(name = "generalSettingsLeaveResourceAvailabilityReportAccessNInFilter", condition = "RESOURCE_AVAILABILITY_REPORT_ACCESS not in (:resourceAvailabilityReportAccess)"), @Filter(name = "generalSettingsLeaveResourceAvailabilityReportAccessEqFilter", condition = "RESOURCE_AVAILABILITY_REPORT_ACCESS = :resourceAvailabilityReportAccess"), @Filter(name = "generalSettingsLeaveResourceAvailabilityReportAccessNEqFilter", condition = "RESOURCE_AVAILABILITY_REPORT_ACCESS != :resourceAvailabilityReportAccess"), @Filter(name = "generalSettingsLeaveResourceAvailabilityReportAccessInFilter", condition = "RESOURCE_AVAILABILITY_REPORT_ACCESS in (:resourceAvailabilityReportAccess)"), @Filter(name = "generalSettingsLeaveTimeInputAllowedEqFilter", condition = "TIME_INPUT_ALLOWED = :timeInputAllowed"), @Filter(name = "generalSettingsLeaveTimeInputAllowedNEqFilter", condition = "TIME_INPUT_ALLOWED != :timeInputAllowed"), @Filter(name = "generalSettingsLeaveUnitsAllowedNInFilter", condition = "UNITS_ALLOWED not in (:unitsAllowed)"), @Filter(name = "generalSettingsLeaveUnitsAllowedEqFilter", condition = "UNITS_ALLOWED = :unitsAllowed"), @Filter(name = "generalSettingsLeaveUnitsAllowedNEqFilter", condition = "UNITS_ALLOWED != :unitsAllowed"), @Filter(name = "generalSettingsLeaveUnitsAllowedInFilter", condition = "UNITS_ALLOWED in (:unitsAllowed)"), @Filter(name = "generalSettingsLeaveUnpaidLeaveMarkedAsEqFilter", condition = "UNPAID_LEAVE_MARKED_AS = :unpaidLeaveMarkedAs"), @Filter(name = "generalSettingsLeaveUnpaidLeaveMarkedAsNEqFilter", condition = "UNPAID_LEAVE_MARKED_AS != :unpaidLeaveMarkedAs"), @Filter(name = "generalSettingsLeaveWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "generalSettingsLeaveWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "generalSettingsLeaveWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "generalSettingsLeaveWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "generalSettingsLeaveWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "generalSettingsLeaveWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "generalSettingsLeaveWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "generalSettingsLeaveWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "generalSettingsLeaveWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "generalSettingsLeaveWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "generalSettingsLeaveAddCompensatoryRequestForFutureDateEqFilter", parameters = { @ParamDef(name = "addCompensatoryRequestForFutureDate", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveAddCompensatoryRequestForFutureDateNEqFilter", parameters = { @ParamDef(name = "addCompensatoryRequestForFutureDate", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveAllowLeaveRequestUntilNextNInFilter", parameters = { @ParamDef(name = "allowLeaveRequestUntilNext", type = String.class) }), @FilterDef(name = "generalSettingsLeaveAllowLeaveRequestUntilNextEqFilter", parameters = { @ParamDef(name = "allowLeaveRequestUntilNext", type = String.class) }), @FilterDef(name = "generalSettingsLeaveAllowLeaveRequestUntilNextNEqFilter", parameters = { @ParamDef(name = "allowLeaveRequestUntilNext", type = String.class) }), @FilterDef(name = "generalSettingsLeaveAllowLeaveRequestUntilNextInFilter", parameters = { @ParamDef(name = "allowLeaveRequestUntilNext", type = String.class) }), @FilterDef(name = "generalSettingsLeaveApplicableLeaveTypesNInFilter", parameters = { @ParamDef(name = "applicableLeaveTypes", type = String.class) }), @FilterDef(name = "generalSettingsLeaveApplicableLeaveTypesEqFilter", parameters = { @ParamDef(name = "applicableLeaveTypes", type = String.class) }), @FilterDef(name = "generalSettingsLeaveApplicableLeaveTypesNEqFilter", parameters = { @ParamDef(name = "applicableLeaveTypes", type = String.class) }), @FilterDef(name = "generalSettingsLeaveApplicableLeaveTypesInFilter", parameters = { @ParamDef(name = "applicableLeaveTypes", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCompensatoryRequestEntryModeNInFilter", parameters = { @ParamDef(name = "compensatoryRequestEntryMode", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCompensatoryRequestEntryModeEqFilter", parameters = { @ParamDef(name = "compensatoryRequestEntryMode", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCompensatoryRequestEntryModeNEqFilter", parameters = { @ParamDef(name = "compensatoryRequestEntryMode", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCompensatoryRequestEntryModeInFilter", parameters = { @ParamDef(name = "compensatoryRequestEntryMode", type = String.class) }), @FilterDef(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveGtFilter", parameters = { @ParamDef(name = "consecutiveLeavesConsideredAsLeave", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveNInFilter", parameters = { @ParamDef(name = "consecutiveLeavesConsideredAsLeave", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveLtEqFilter", parameters = { @ParamDef(name = "consecutiveLeavesConsideredAsLeave", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveLtFilter", parameters = { @ParamDef(name = "consecutiveLeavesConsideredAsLeave", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveEqFilter", parameters = { @ParamDef(name = "consecutiveLeavesConsideredAsLeave", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveNEqFilter", parameters = { @ParamDef(name = "consecutiveLeavesConsideredAsLeave", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveInFilter", parameters = { @ParamDef(name = "consecutiveLeavesConsideredAsLeave", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveBwFilter", parameters = { @ParamDef(name = "consecutiveLeavesConsideredAsLeave_MIN", type = Integer.class), @ParamDef(name = "consecutiveLeavesConsideredAsLeave_MAX", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveConsecutiveLeavesConsideredAsLeaveGtEqFilter", parameters = { @ParamDef(name = "consecutiveLeavesConsideredAsLeave", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCreditedLeaveExpirationDaysGtFilter", parameters = { @ParamDef(name = "creditedLeaveExpirationDays", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCreditedLeaveExpirationDaysNInFilter", parameters = { @ParamDef(name = "creditedLeaveExpirationDays", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCreditedLeaveExpirationDaysLtEqFilter", parameters = { @ParamDef(name = "creditedLeaveExpirationDays", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCreditedLeaveExpirationDaysLtFilter", parameters = { @ParamDef(name = "creditedLeaveExpirationDays", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCreditedLeaveExpirationDaysEqFilter", parameters = { @ParamDef(name = "creditedLeaveExpirationDays", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCreditedLeaveExpirationDaysNEqFilter", parameters = { @ParamDef(name = "creditedLeaveExpirationDays", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCreditedLeaveExpirationDaysInFilter", parameters = { @ParamDef(name = "creditedLeaveExpirationDays", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCreditedLeaveExpirationDaysBwFilter", parameters = { @ParamDef(name = "creditedLeaveExpirationDays_MIN", type = Integer.class), @ParamDef(name = "creditedLeaveExpirationDays_MAX", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCreditedLeaveExpirationDaysGtEqFilter", parameters = { @ParamDef(name = "creditedLeaveExpirationDays", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveCurrentDayAndUpcomingLeaveRequestsNInFilter", parameters = { @ParamDef(name = "currentDayAndUpcomingLeaveRequests", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCurrentDayAndUpcomingLeaveRequestsEqFilter", parameters = { @ParamDef(name = "currentDayAndUpcomingLeaveRequests", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCurrentDayAndUpcomingLeaveRequestsNEqFilter", parameters = { @ParamDef(name = "currentDayAndUpcomingLeaveRequests", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCurrentDayAndUpcomingLeaveRequestsInFilter", parameters = { @ParamDef(name = "currentDayAndUpcomingLeaveRequests", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCustomizeEmailTemplateNInFilter", parameters = { @ParamDef(name = "customizeEmailTemplate", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCustomizeEmailTemplateEqFilter", parameters = { @ParamDef(name = "customizeEmailTemplate", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCustomizeEmailTemplateNEqFilter", parameters = { @ParamDef(name = "customizeEmailTemplate", type = String.class) }), @FilterDef(name = "generalSettingsLeaveCustomizeEmailTemplateInFilter", parameters = { @ParamDef(name = "customizeEmailTemplate", type = String.class) }), @FilterDef(name = "generalSettingsLeaveDurationsAllowedNInFilter", parameters = { @ParamDef(name = "durationsAllowed", type = String.class) }), @FilterDef(name = "generalSettingsLeaveDurationsAllowedEqFilter", parameters = { @ParamDef(name = "durationsAllowed", type = String.class) }), @FilterDef(name = "generalSettingsLeaveDurationsAllowedNEqFilter", parameters = { @ParamDef(name = "durationsAllowed", type = String.class) }), @FilterDef(name = "generalSettingsLeaveDurationsAllowedInFilter", parameters = { @ParamDef(name = "durationsAllowed", type = String.class) }), @FilterDef(name = "generalSettingsLeaveEnablePasswordProtectionEqFilter", parameters = { @ParamDef(name = "enablePasswordProtection", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveEnablePasswordProtectionNEqFilter", parameters = { @ParamDef(name = "enablePasswordProtection", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveEnablePayrollReportForAdminEqFilter", parameters = { @ParamDef(name = "enablePayrollReportForAdmin", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveEnablePayrollReportForAdminNEqFilter", parameters = { @ParamDef(name = "enablePayrollReportForAdmin", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveIncludeHolidaysEqFilter", parameters = { @ParamDef(name = "includeHolidays", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveIncludeHolidaysNEqFilter", parameters = { @ParamDef(name = "includeHolidays", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveIncludeWeekendsEqFilter", parameters = { @ParamDef(name = "includeWeekends", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveIncludeWeekendsNEqFilter", parameters = { @ParamDef(name = "includeWeekends", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnHolidaysGtFilter", parameters = { @ParamDef(name = "leaveCreditedOnHolidays", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnHolidaysNInFilter", parameters = { @ParamDef(name = "leaveCreditedOnHolidays", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnHolidaysLtEqFilter", parameters = { @ParamDef(name = "leaveCreditedOnHolidays", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnHolidaysLtFilter", parameters = { @ParamDef(name = "leaveCreditedOnHolidays", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnHolidaysEqFilter", parameters = { @ParamDef(name = "leaveCreditedOnHolidays", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnHolidaysNEqFilter", parameters = { @ParamDef(name = "leaveCreditedOnHolidays", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnHolidaysInFilter", parameters = { @ParamDef(name = "leaveCreditedOnHolidays", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnHolidaysBwFilter", parameters = { @ParamDef(name = "leaveCreditedOnHolidays_MIN", type = Double.class), @ParamDef(name = "leaveCreditedOnHolidays_MAX", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnHolidaysGtEqFilter", parameters = { @ParamDef(name = "leaveCreditedOnHolidays", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnWeekendGtFilter", parameters = { @ParamDef(name = "leaveCreditedOnWeekend", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnWeekendNInFilter", parameters = { @ParamDef(name = "leaveCreditedOnWeekend", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnWeekendLtEqFilter", parameters = { @ParamDef(name = "leaveCreditedOnWeekend", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnWeekendLtFilter", parameters = { @ParamDef(name = "leaveCreditedOnWeekend", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnWeekendEqFilter", parameters = { @ParamDef(name = "leaveCreditedOnWeekend", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnWeekendNEqFilter", parameters = { @ParamDef(name = "leaveCreditedOnWeekend", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnWeekendInFilter", parameters = { @ParamDef(name = "leaveCreditedOnWeekend", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnWeekendBwFilter", parameters = { @ParamDef(name = "leaveCreditedOnWeekend_MIN", type = Double.class), @ParamDef(name = "leaveCreditedOnWeekend_MAX", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveCreditedOnWeekendGtEqFilter", parameters = { @ParamDef(name = "leaveCreditedOnWeekend", type = Double.class) }), @FilterDef(name = "generalSettingsLeaveLeaveDisplayFormatNInFilter", parameters = { @ParamDef(name = "leaveDisplayFormat", type = String.class) }), @FilterDef(name = "generalSettingsLeaveLeaveDisplayFormatEqFilter", parameters = { @ParamDef(name = "leaveDisplayFormat", type = String.class) }), @FilterDef(name = "generalSettingsLeaveLeaveDisplayFormatNEqFilter", parameters = { @ParamDef(name = "leaveDisplayFormat", type = String.class) }), @FilterDef(name = "generalSettingsLeaveLeaveDisplayFormatInFilter", parameters = { @ParamDef(name = "leaveDisplayFormat", type = String.class) }), @FilterDef(name = "generalSettingsLeaveMakeReasonForLeaveCancellationMandatoryEqFilter", parameters = { @ParamDef(name = "makeReasonForLeaveCancellationMandatory", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveMakeReasonForLeaveCancellationMandatoryNEqFilter", parameters = { @ParamDef(name = "makeReasonForLeaveCancellationMandatory", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveMakeReasonMandatoryEqFilter", parameters = { @ParamDef(name = "makeReasonMandatory", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveMakeReasonMandatoryNEqFilter", parameters = { @ParamDef(name = "makeReasonMandatory", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeavePastLeavesWithinCurrentPayPeriodNInFilter", parameters = { @ParamDef(name = "pastLeavesWithinCurrentPayPeriod", type = String.class) }), @FilterDef(name = "generalSettingsLeavePastLeavesWithinCurrentPayPeriodEqFilter", parameters = { @ParamDef(name = "pastLeavesWithinCurrentPayPeriod", type = String.class) }), @FilterDef(name = "generalSettingsLeavePastLeavesWithinCurrentPayPeriodNEqFilter", parameters = { @ParamDef(name = "pastLeavesWithinCurrentPayPeriod", type = String.class) }), @FilterDef(name = "generalSettingsLeavePastLeavesWithinCurrentPayPeriodInFilter", parameters = { @ParamDef(name = "pastLeavesWithinCurrentPayPeriod", type = String.class) }), @FilterDef(name = "generalSettingsLeaveReminderEmailEqFilter", parameters = { @ParamDef(name = "reminderEmail", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveReminderEmailNEqFilter", parameters = { @ParamDef(name = "reminderEmail", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveResourceAvailabilityReportAccessNInFilter", parameters = { @ParamDef(name = "resourceAvailabilityReportAccess", type = String.class) }), @FilterDef(name = "generalSettingsLeaveResourceAvailabilityReportAccessEqFilter", parameters = { @ParamDef(name = "resourceAvailabilityReportAccess", type = String.class) }), @FilterDef(name = "generalSettingsLeaveResourceAvailabilityReportAccessNEqFilter", parameters = { @ParamDef(name = "resourceAvailabilityReportAccess", type = String.class) }), @FilterDef(name = "generalSettingsLeaveResourceAvailabilityReportAccessInFilter", parameters = { @ParamDef(name = "resourceAvailabilityReportAccess", type = String.class) }), @FilterDef(name = "generalSettingsLeaveTimeInputAllowedEqFilter", parameters = { @ParamDef(name = "timeInputAllowed", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveTimeInputAllowedNEqFilter", parameters = { @ParamDef(name = "timeInputAllowed", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveUnitsAllowedNInFilter", parameters = { @ParamDef(name = "unitsAllowed", type = String.class) }), @FilterDef(name = "generalSettingsLeaveUnitsAllowedEqFilter", parameters = { @ParamDef(name = "unitsAllowed", type = String.class) }), @FilterDef(name = "generalSettingsLeaveUnitsAllowedNEqFilter", parameters = { @ParamDef(name = "unitsAllowed", type = String.class) }), @FilterDef(name = "generalSettingsLeaveUnitsAllowedInFilter", parameters = { @ParamDef(name = "unitsAllowed", type = String.class) }), @FilterDef(name = "generalSettingsLeaveUnpaidLeaveMarkedAsEqFilter", parameters = { @ParamDef(name = "unpaidLeaveMarkedAs", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveUnpaidLeaveMarkedAsNEqFilter", parameters = { @ParamDef(name = "unpaidLeaveMarkedAs", type = Boolean.class) }), @FilterDef(name = "generalSettingsLeaveWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "generalSettingsLeaveWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class GeneralSettingsLeave extends BaseEntitySaaS{

    @Basic
    @Column(name = "ADD_COMPENSATORY_REQUEST_FOR_FUTURE_DATE")
    private Boolean addCompensatoryRequestForFutureDate;

    @Basic
    @Column(name = "ALLOW_LEAVE_REQUEST_UNTIL_NEXT", columnDefinition = "ENUM", length = 13)
    private String allowLeaveRequestUntilNext;

    @Basic
    @Column(name = "APPLICABLE_LEAVE_TYPES", columnDefinition = "ENUM", length = 18)
    private String applicableLeaveTypes;

    @Basic
    @Column(name = "COMPENSATORY_REQUEST_ENTRY_MODE", columnDefinition = "ENUM", length = 9)
    private String compensatoryRequestEntryMode;

    @Basic
    @Column(name = "CONSECUTIVE_LEAVES_CONSIDERED_AS_LEAVE", columnDefinition = "INT")
    private Integer consecutiveLeavesConsideredAsLeave;

    @Basic
    @Column(name = "CREDITED_LEAVE_EXPIRATION_DAYS", columnDefinition = "INT")
    private Integer creditedLeaveExpirationDays;

    @Basic
    @Column(name = "CURRENT_DAY_AND_UPCOMING_LEAVE_REQUESTS", columnDefinition = "ENUM", length = 10)
    private String currentDayAndUpcomingLeaveRequests;

    @Basic
    @Column(name = "CUSTOMIZE_EMAIL_TEMPLATE", columnDefinition = "LONGTEXT")
    private String customizeEmailTemplate;

    @Basic
    @Column(name = "DURATIONS_ALLOWED", columnDefinition = "ENUM", length = 8)
    private String durationsAllowed;

    @Basic
    @Column(name = "ENABLE_PASSWORD_PROTECTION")
    private Boolean enablePasswordProtection;

    @Basic
    @Column(name = "ENABLE_PAYROLL_REPORT_FOR_ADMIN")
    private Boolean enablePayrollReportForAdmin;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(name = "INCLUDE_HOLIDAYS")
    private Boolean includeHolidays;

    @Basic
    @Column(name = "INCLUDE_WEEKENDS")
    private Boolean includeWeekends;

    @Basic
    @Column(name = "LEAVE_CREDITED_ON_HOLIDAYS")
    private Double leaveCreditedOnHolidays;

    @Basic
    @Column(name = "LEAVE_CREDITED_ON_WEEKEND")
    private Double leaveCreditedOnWeekend;

    @Basic
    @Column(name = "LEAVE_DISPLAY_FORMAT", columnDefinition = "ENUM", length = 9)
    private String leaveDisplayFormat;

    @Basic
    @Column(name = "MAKE_REASON_FOR_LEAVE_CANCELLATION_MANDATORY")
    private Boolean makeReasonForLeaveCancellationMandatory;

    @Basic
    @Column(name = "MAKE_REASON_MANDATORY")
    private Boolean makeReasonMandatory;

    @Basic
    @Column(name = "PAST_LEAVES_WITHIN_CURRENT_PAY_PERIOD", columnDefinition = "ENUM", length = 10)
    private String pastLeavesWithinCurrentPayPeriod;

    @Basic
    @Column(name = "REMINDER_EMAIL")
    private Boolean reminderEmail;

    @Basic
    @Column(name = "RESOURCE_AVAILABILITY_REPORT_ACCESS", columnDefinition = "ENUM", length = 10)
    private String resourceAvailabilityReportAccess;

    @Basic
    @Column(name = "TIME_INPUT_ALLOWED")
    private Boolean timeInputAllowed;

    @Basic
    @Column(name = "UNITS_ALLOWED", columnDefinition = "ENUM", length = 8)
    private String unitsAllowed;

    @Basic
    @Column(name = "UNPAID_LEAVE_MARKED_AS")
    private Boolean unpaidLeaveMarkedAs;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public GeneralSettingsLeave() {
    }

    public GeneralSettingsLeave(Integer id) {
        this.id = id;
    }

    public Boolean isAddCompensatoryRequestForFutureDate() {
        return addCompensatoryRequestForFutureDate;
    }

    public void setAddCompensatoryRequestForFutureDate(Boolean addCompensatoryRequestForFutureDate) {
        this.addCompensatoryRequestForFutureDate = addCompensatoryRequestForFutureDate;
    }

    public String getAllowLeaveRequestUntilNext() {
        return allowLeaveRequestUntilNext;
    }

    public void setAllowLeaveRequestUntilNext(String allowLeaveRequestUntilNext) {
        this.allowLeaveRequestUntilNext = allowLeaveRequestUntilNext;
    }

    public String getApplicableLeaveTypes() {
        return applicableLeaveTypes;
    }

    public void setApplicableLeaveTypes(String applicableLeaveTypes) {
        this.applicableLeaveTypes = applicableLeaveTypes;
    }

    public String getCompensatoryRequestEntryMode() {
        return compensatoryRequestEntryMode;
    }

    public void setCompensatoryRequestEntryMode(String compensatoryRequestEntryMode) {
        this.compensatoryRequestEntryMode = compensatoryRequestEntryMode;
    }

    public Integer getConsecutiveLeavesConsideredAsLeave() {
        return consecutiveLeavesConsideredAsLeave;
    }

    public void setConsecutiveLeavesConsideredAsLeave(Integer consecutiveLeavesConsideredAsLeave) {
        this.consecutiveLeavesConsideredAsLeave = consecutiveLeavesConsideredAsLeave;
    }

    public Integer getCreditedLeaveExpirationDays() {
        return creditedLeaveExpirationDays;
    }

    public void setCreditedLeaveExpirationDays(Integer creditedLeaveExpirationDays) {
        this.creditedLeaveExpirationDays = creditedLeaveExpirationDays;
    }

    public String getCurrentDayAndUpcomingLeaveRequests() {
        return currentDayAndUpcomingLeaveRequests;
    }

    public void setCurrentDayAndUpcomingLeaveRequests(String currentDayAndUpcomingLeaveRequests) {
        this.currentDayAndUpcomingLeaveRequests = currentDayAndUpcomingLeaveRequests;
    }

    public String getCustomizeEmailTemplate() {
        return customizeEmailTemplate;
    }

    public void setCustomizeEmailTemplate(String customizeEmailTemplate) {
        this.customizeEmailTemplate = customizeEmailTemplate;
    }

    public String getDurationsAllowed() {
        return durationsAllowed;
    }

    public void setDurationsAllowed(String durationsAllowed) {
        this.durationsAllowed = durationsAllowed;
    }

    public Boolean isEnablePasswordProtection() {
        return enablePasswordProtection;
    }

    public void setEnablePasswordProtection(Boolean enablePasswordProtection) {
        this.enablePasswordProtection = enablePasswordProtection;
    }

    public Boolean isEnablePayrollReportForAdmin() {
        return enablePayrollReportForAdmin;
    }

    public void setEnablePayrollReportForAdmin(Boolean enablePayrollReportForAdmin) {
        this.enablePayrollReportForAdmin = enablePayrollReportForAdmin;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Boolean isIncludeHolidays() {
        return includeHolidays;
    }

    public void setIncludeHolidays(Boolean includeHolidays) {
        this.includeHolidays = includeHolidays;
    }

    public Boolean isIncludeWeekends() {
        return includeWeekends;
    }

    public void setIncludeWeekends(Boolean includeWeekends) {
        this.includeWeekends = includeWeekends;
    }

    public Double getLeaveCreditedOnHolidays() {
        return leaveCreditedOnHolidays;
    }

    public void setLeaveCreditedOnHolidays(Double leaveCreditedOnHolidays) {
        this.leaveCreditedOnHolidays = leaveCreditedOnHolidays;
    }

    public Double getLeaveCreditedOnWeekend() {
        return leaveCreditedOnWeekend;
    }

    public void setLeaveCreditedOnWeekend(Double leaveCreditedOnWeekend) {
        this.leaveCreditedOnWeekend = leaveCreditedOnWeekend;
    }

    public String getLeaveDisplayFormat() {
        return leaveDisplayFormat;
    }

    public void setLeaveDisplayFormat(String leaveDisplayFormat) {
        this.leaveDisplayFormat = leaveDisplayFormat;
    }

    public Boolean isMakeReasonForLeaveCancellationMandatory() {
        return makeReasonForLeaveCancellationMandatory;
    }

    public void setMakeReasonForLeaveCancellationMandatory(Boolean makeReasonForLeaveCancellationMandatory) {
        this.makeReasonForLeaveCancellationMandatory = makeReasonForLeaveCancellationMandatory;
    }

    public Boolean isMakeReasonMandatory() {
        return makeReasonMandatory;
    }

    public void setMakeReasonMandatory(Boolean makeReasonMandatory) {
        this.makeReasonMandatory = makeReasonMandatory;
    }

    public String getPastLeavesWithinCurrentPayPeriod() {
        return pastLeavesWithinCurrentPayPeriod;
    }

    public void setPastLeavesWithinCurrentPayPeriod(String pastLeavesWithinCurrentPayPeriod) {
        this.pastLeavesWithinCurrentPayPeriod = pastLeavesWithinCurrentPayPeriod;
    }

    public Boolean isReminderEmail() {
        return reminderEmail;
    }

    public void setReminderEmail(Boolean reminderEmail) {
        this.reminderEmail = reminderEmail;
    }

    public String getResourceAvailabilityReportAccess() {
        return resourceAvailabilityReportAccess;
    }

    public void setResourceAvailabilityReportAccess(String resourceAvailabilityReportAccess) {
        this.resourceAvailabilityReportAccess = resourceAvailabilityReportAccess;
    }

    public Boolean isTimeInputAllowed() {
        return timeInputAllowed;
    }

    public void setTimeInputAllowed(Boolean timeInputAllowed) {
        this.timeInputAllowed = timeInputAllowed;
    }

    public String getUnitsAllowed() {
        return unitsAllowed;
    }

    public void setUnitsAllowed(String unitsAllowed) {
        this.unitsAllowed = unitsAllowed;
    }

    public Boolean isUnpaidLeaveMarkedAs() {
        return unpaidLeaveMarkedAs;
    }

    public void setUnpaidLeaveMarkedAs(Boolean unpaidLeaveMarkedAs) {
        this.unpaidLeaveMarkedAs = unpaidLeaveMarkedAs;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

package com.nouros.hrms.model;

import java.util.Date;
import java.util.List;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "CANDIDATE")
@Filters(value = { @Filter(name = "candidateAadhaarCardNumberNInFilter", condition = "AADHAAR_CARD_NUMBER not in (:aadhaarCardNumber)"), @Filter(name = "candidateAadhaarCardNumberEqFilter", condition = "AADHAAR_CARD_NUMBER = :aadhaarCardNumber"), @Filter(name = "candidateAadhaarCardNumberNEqFilter", condition = "AADHAAR_CARD_NUMBER != :aadhaarCardNumber"), @Filter(name = "candidateAadhaarCardNumberInFilter", condition = "AADHAAR_CARD_NUMBER in (:aadhaarCardNumber)"), @Filter(name = "candidateAdditionalInformationNInFilter", condition = "ADDITIONAL_INFORMATION not in (:additionalInformation)"), @Filter(name = "candidateAdditionalInformationEqFilter", condition = "ADDITIONAL_INFORMATION = :additionalInformation"), @Filter(name = "candidateAdditionalInformationNEqFilter", condition = "ADDITIONAL_INFORMATION != :additionalInformation"), @Filter(name = "candidateAdditionalInformationInFilter", condition = "ADDITIONAL_INFORMATION in (:additionalInformation)"), @Filter(name = "candidateAddressLine1NInFilter", condition = "ADDRESS_LINE1 not in (:addressLine1)"), @Filter(name = "candidateAddressLine1EqFilter", condition = "ADDRESS_LINE1 = :addressLine1"), @Filter(name = "candidateAddressLine1NEqFilter", condition = "ADDRESS_LINE1 != :addressLine1"), @Filter(name = "candidateAddressLine1InFilter", condition = "ADDRESS_LINE1 in (:addressLine1)"), @Filter(name = "candidateAddressLine11NInFilter", condition = "ADDRESS_LINE11 not in (:addressLine11)"), @Filter(name = "candidateAddressLine11EqFilter", condition = "ADDRESS_LINE11 = :addressLine11"), @Filter(name = "candidateAddressLine11NEqFilter", condition = "ADDRESS_LINE11 != :addressLine11"), @Filter(name = "candidateAddressLine11InFilter", condition = "ADDRESS_LINE11 in (:addressLine11)"), @Filter(name = "candidateAddressLine2NInFilter", condition = "ADDRESS_LINE2 not in (:addressLine2)"), @Filter(name = "candidateAddressLine2EqFilter", condition = "ADDRESS_LINE2 = :addressLine2"), @Filter(name = "candidateAddressLine2NEqFilter", condition = "ADDRESS_LINE2 != :addressLine2"), @Filter(name = "candidateAddressLine2InFilter", condition = "ADDRESS_LINE2 in (:addressLine2)"), @Filter(name = "candidateAddressLine21NInFilter", condition = "ADDRESS_LINE21 not in (:addressLine21)"), @Filter(name = "candidateAddressLine21EqFilter", condition = "ADDRESS_LINE21 = :addressLine21"), @Filter(name = "candidateAddressLine21NEqFilter", condition = "ADDRESS_LINE21 != :addressLine21"), @Filter(name = "candidateAddressLine21InFilter", condition = "ADDRESS_LINE21 in (:addressLine21)"), @Filter(name = "candidateApprovalStatusNInFilter", condition = "APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "candidateApprovalStatusEqFilter", condition = "APPROVAL_STATUS = :approvalStatus"), @Filter(name = "candidateApprovalStatusNEqFilter", condition = "APPROVAL_STATUS != :approvalStatus"), @Filter(name = "candidateApprovalStatusInFilter", condition = "APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "candidateCandidateIdNInFilter", condition = "CANDIDATE_ID not in (:candidateId)"), @Filter(name = "candidateCandidateIdEqFilter", condition = "CANDIDATE_ID = :candidateId"), @Filter(name = "candidateCandidateIdNEqFilter", condition = "CANDIDATE_ID != :candidateId"), @Filter(name = "candidateCandidateIdInFilter", condition = "CANDIDATE_ID in (:candidateId)"), @Filter(name = "candidateCityNInFilter", condition = "CITY not in (:city)"), @Filter(name = "candidateCityEqFilter", condition = "CITY = :city"), @Filter(name = "candidateCityNEqFilter", condition = "CITY != :city"), @Filter(name = "candidateCityInFilter", condition = "CITY in (:city)"), @Filter(name = "candidateCity1NInFilter", condition = "CITY1 not in (:city1)"), @Filter(name = "candidateCity1EqFilter", condition = "CITY1 = :city1"), @Filter(name = "candidateCity1NEqFilter", condition = "CITY1 != :city1"), @Filter(name = "candidateCity1InFilter", condition = "CITY1 in (:city1)"), @Filter(name = "candidateCountryNInFilter", condition = "COUNTRY not in (:country)"), @Filter(name = "candidateCountryEqFilter", condition = "COUNTRY = :country"), @Filter(name = "candidateCountryNEqFilter", condition = "COUNTRY != :country"), @Filter(name = "candidateCountryInFilter", condition = "COUNTRY in (:country)"), @Filter(name = "candidateCountry1NInFilter", condition = "COUNTRY1 not in (:country1)"), @Filter(name = "candidateCountry1EqFilter", condition = "COUNTRY1 = :country1"), @Filter(name = "candidateCountry1NEqFilter", condition = "COUNTRY1 != :country1"), @Filter(name = "candidateCountry1InFilter", condition = "COUNTRY1 in (:country1)"), @Filter(name = "candidateCurrentSalaryGtFilter", condition = "CURRENT_SALARY > :currentSalary"), @Filter(name = "candidateCurrentSalaryNInFilter", condition = "CURRENT_SALARY not in (:currentSalary)"), @Filter(name = "candidateCurrentSalaryLtEqFilter", condition = "CURRENT_SALARY <= :currentSalary"), @Filter(name = "candidateCurrentSalaryLtFilter", condition = "CURRENT_SALARY < :currentSalary"), @Filter(name = "candidateCurrentSalaryEqFilter", condition = "CURRENT_SALARY = :currentSalary"), @Filter(name = "candidateCurrentSalaryNEqFilter", condition = "CURRENT_SALARY != :currentSalary"), @Filter(name = "candidateCurrentSalaryInFilter", condition = "CURRENT_SALARY in (:currentSalary)"), @Filter(name = "candidateCurrentSalaryBwFilter", condition = "CURRENT_SALARY > :currentSalary_MIN  AND CURRENT_SALARY < :currentSalary_MAX"), @Filter(name = "candidateCurrentSalaryGtEqFilter", condition = "CURRENT_SALARY >= :currentSalary"), @Filter(name = "candidateCurrentSalaryEqFilter", condition = "CURRENT_SALARY = :currentSalary"), @Filter(name = "candidateDepartmentDepartmentCodeNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE not in (:departmentCode)"), @Filter(name = "candidateDepartmentDepartmentCodeEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE = :departmentCode)"), @Filter(name = "candidateDepartmentDepartmentCodeNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE != :departmentCode)"), @Filter(name = "candidateDepartmentDepartmentCodeInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE in (:departmentCode)"), @Filter(name = "candidateDepartmentDepartmentLeadGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD > :departmentLead)"), @Filter(name = "candidateDepartmentDepartmentLeadNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD not in (:departmentLead)"), @Filter(name = "candidateDepartmentDepartmentLeadLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD <= :departmentLead)"), @Filter(name = "candidateDepartmentDepartmentLeadLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD < :departmentLead)"), @Filter(name = "candidateDepartmentDepartmentLeadEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD = :departmentLead)"), @Filter(name = "candidateDepartmentDepartmentLeadNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD != :departmentLead)"), @Filter(name = "candidateDepartmentDepartmentLeadInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD in (:departmentLead)"), @Filter(name = "candidateDepartmentDepartmentLeadBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD > :departmentLead_MIN  AND DEPARTMENT.DEPARTMENT_LEAD < :departmentLead_MAX )"), @Filter(name = "candidateDepartmentDepartmentLeadGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD >= :departmentLead)"), @Filter(name = "candidateDepartmentIdGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id)"), @Filter(name = "candidateDepartmentIdNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID not in (:id)"), @Filter(name = "candidateDepartmentIdLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID <= :id)"), @Filter(name = "candidateDepartmentIdLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID < :id)"), @Filter(name = "candidateDepartmentIdEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID = :id)"), @Filter(name = "candidateDepartmentIdNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID != :id)"), @Filter(name = "candidateDepartmentIdInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID in (:id)"), @Filter(name = "candidateDepartmentIdBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id_MIN  AND DEPARTMENT.ID < :id_MAX )"), @Filter(name = "candidateDepartmentIdGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID >= :id)"), @Filter(name = "candidateDepartmentParentDepartmentGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT > :parentDepartment)"), @Filter(name = "candidateDepartmentParentDepartmentNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT not in (:parentDepartment)"), @Filter(name = "candidateDepartmentParentDepartmentLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT <= :parentDepartment)"), @Filter(name = "candidateDepartmentParentDepartmentLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT < :parentDepartment)"), @Filter(name = "candidateDepartmentParentDepartmentEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT = :parentDepartment)"), @Filter(name = "candidateDepartmentParentDepartmentNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT != :parentDepartment)"), @Filter(name = "candidateDepartmentParentDepartmentInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT in (:parentDepartment)"), @Filter(name = "candidateDepartmentParentDepartmentBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT > :parentDepartment_MIN  AND DEPARTMENT.PARENT_DEPARTMENT < :parentDepartment_MAX )"), @Filter(name = "candidateDepartmentParentDepartmentGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT >= :parentDepartment)"), @Filter(name = "candidateDepartmentMailAliasNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS not in (:mailAlias)"), @Filter(name = "candidateDepartmentMailAliasEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS = :mailAlias)"), @Filter(name = "candidateDepartmentMailAliasNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS != :mailAlias)"), @Filter(name = "candidateDepartmentMailAliasInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS in (:mailAlias)"), @Filter(name = "candidateDepartmentNameNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME not in (:name)"), @Filter(name = "candidateDepartmentNameEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME = :name)"), @Filter(name = "candidateDepartmentNameNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME != :name)"), @Filter(name = "candidateDepartmentNameInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME in (:name)"), @Filter(name = "candidateDepartmentApprovalStatusNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "candidateDepartmentApprovalStatusEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS = :approvalStatus)"), @Filter(name = "candidateDepartmentApprovalStatusNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS != :approvalStatus)"), @Filter(name = "candidateDepartmentApprovalStatusInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "candidateEmailIdNInFilter", condition = "EMAIL_ID not in (:emailId)"), @Filter(name = "candidateEmailIdEqFilter", condition = "EMAIL_ID = :emailId"), @Filter(name = "candidateEmailIdNEqFilter", condition = "EMAIL_ID != :emailId"), @Filter(name = "candidateEmailIdInFilter", condition = "EMAIL_ID in (:emailId)"), @Filter(name = "candidateExperienceGtFilter", condition = "EXPERIENCE > :experience"), @Filter(name = "candidateExperienceNInFilter", condition = "EXPERIENCE not in (:experience)"), @Filter(name = "candidateExperienceLtEqFilter", condition = "EXPERIENCE <= :experience"), @Filter(name = "candidateExperienceLtFilter", condition = "EXPERIENCE < :experience"), @Filter(name = "candidateExperienceEqFilter", condition = "EXPERIENCE = :experience"), @Filter(name = "candidateExperienceNEqFilter", condition = "EXPERIENCE != :experience"), @Filter(name = "candidateExperienceInFilter", condition = "EXPERIENCE in (:experience)"), @Filter(name = "candidateExperienceBwFilter", condition = "EXPERIENCE > :experience_MIN  AND EXPERIENCE < :experience_MAX"), @Filter(name = "candidateExperienceGtEqFilter", condition = "EXPERIENCE >= :experience"), @Filter(name = "candidateExperienceEqFilter", condition = "EXPERIENCE = :experience"), @Filter(name = "candidateFirstNameNInFilter", condition = "FIRST_NAME not in (:firstName)"), @Filter(name = "candidateFirstNameEqFilter", condition = "FIRST_NAME = :firstName"), @Filter(name = "candidateFirstNameNEqFilter", condition = "FIRST_NAME != :firstName"), @Filter(name = "candidateFirstNameInFilter", condition = "FIRST_NAME in (:firstName)"), @Filter(name = "candidateHighestQualificationNInFilter", condition = "HIGHEST_QUALIFICATION not in (:highestQualification)"), @Filter(name = "candidateHighestQualificationEqFilter", condition = "HIGHEST_QUALIFICATION = :highestQualification"), @Filter(name = "candidateHighestQualificationNEqFilter", condition = "HIGHEST_QUALIFICATION != :highestQualification"), @Filter(name = "candidateHighestQualificationInFilter", condition = "HIGHEST_QUALIFICATION in (:highestQualification)"), @Filter(name = "candidateIdGtFilter", condition = "ID > :id"), @Filter(name = "candidateIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "candidateIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "candidateIdLtFilter", condition = "ID < :id"), @Filter(name = "candidateIdEqFilter", condition = "ID = :id"), @Filter(name = "candidateIdNEqFilter", condition = "ID != :id"), @Filter(name = "candidateIdInFilter", condition = "ID in (:id)"), @Filter(name = "candidateIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "candidateIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "candidateIdEqFilter", condition = "ID = :id"), @Filter(name = "candidateLastNameNInFilter", condition = "LAST_NAME not in (:lastName)"), @Filter(name = "candidateLastNameEqFilter", condition = "LAST_NAME = :lastName"), @Filter(name = "candidateLastNameNEqFilter", condition = "LAST_NAME != :lastName"), @Filter(name = "candidateLastNameInFilter", condition = "LAST_NAME in (:lastName)"), @Filter(name = "candidateLocationCountryNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.COUNTRY not in (:country)"), @Filter(name = "candidateLocationCountryEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.COUNTRY = :country)"), @Filter(name = "candidateLocationCountryNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.COUNTRY != :country)"), @Filter(name = "candidateLocationCountryInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.COUNTRY in (:country)"), @Filter(name = "candidateLocationIdGtFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID > :id)"), @Filter(name = "candidateLocationIdNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID not in (:id)"), @Filter(name = "candidateLocationIdLtEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID <= :id)"), @Filter(name = "candidateLocationIdLtFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID < :id)"), @Filter(name = "candidateLocationIdEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID = :id)"), @Filter(name = "candidateLocationIdNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID != :id)"), @Filter(name = "candidateLocationIdInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID in (:id)"), @Filter(name = "candidateLocationIdBwFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID > :id_MIN  AND LOCATION.ID < :id_MAX )"), @Filter(name = "candidateLocationIdGtEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID >= :id)"), @Filter(name = "candidateLocationStateProvinceNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.STATE_PROVINCE not in (:stateProvince)"), @Filter(name = "candidateLocationStateProvinceEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.STATE_PROVINCE = :stateProvince)"), @Filter(name = "candidateLocationStateProvinceNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.STATE_PROVINCE != :stateProvince)"), @Filter(name = "candidateLocationStateProvinceInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.STATE_PROVINCE in (:stateProvince)"), @Filter(name = "candidateLocationTimeZoneNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.TIME_ZONE not in (:timeZone)"), @Filter(name = "candidateLocationTimeZoneEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.TIME_ZONE = :timeZone)"), @Filter(name = "candidateLocationTimeZoneNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.TIME_ZONE != :timeZone)"), @Filter(name = "candidateLocationTimeZoneInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.TIME_ZONE in (:timeZone)"), @Filter(name = "candidateLocationMailAliasNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.MAIL_ALIAS not in (:mailAlias)"), @Filter(name = "candidateLocationMailAliasEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.MAIL_ALIAS = :mailAlias)"), @Filter(name = "candidateLocationMailAliasNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.MAIL_ALIAS != :mailAlias)"), @Filter(name = "candidateLocationMailAliasInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.MAIL_ALIAS in (:mailAlias)"), @Filter(name = "candidateLocationNameNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME not in (:name)"), @Filter(name = "candidateLocationNameEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME = :name)"), @Filter(name = "candidateLocationNameNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME != :name)"), @Filter(name = "candidateLocationNameInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME in (:name)"), @Filter(name = "candidateLocationDescriptionNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.DESCRIPTION not in (:description)"), @Filter(name = "candidateLocationDescriptionEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.DESCRIPTION = :description)"), @Filter(name = "candidateLocationDescriptionNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.DESCRIPTION != :description)"), @Filter(name = "candidateLocationDescriptionInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.DESCRIPTION in (:description)"), @Filter(name = "candidateLocationLocationIdNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.LOCATION_ID not in (:locationId)"), @Filter(name = "candidateLocationLocationIdEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.LOCATION_ID = :locationId)"), @Filter(name = "candidateLocationLocationIdNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.LOCATION_ID != :locationId)"), @Filter(name = "candidateLocationLocationIdInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.LOCATION_ID in (:locationId)"), @Filter(name = "candidateLocationApprovalStatusNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "candidateLocationApprovalStatusEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.APPROVAL_STATUS = :approvalStatus)"), @Filter(name = "candidateLocationApprovalStatusNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.APPROVAL_STATUS != :approvalStatus)"), @Filter(name = "candidateLocationApprovalStatusInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "candidateOfficialEmailNInFilter", condition = "OFFICIAL_EMAIL not in (:officialEmail)"), @Filter(name = "candidateOfficialEmailEqFilter", condition = "OFFICIAL_EMAIL = :officialEmail"), @Filter(name = "candidateOfficialEmailNEqFilter", condition = "OFFICIAL_EMAIL != :officialEmail"), @Filter(name = "candidateOfficialEmailInFilter", condition = "OFFICIAL_EMAIL in (:officialEmail)"), @Filter(name = "candidateOnboardingStatusNInFilter", condition = "ONBOARDING_STATUS not in (:onboardingStatus)"), @Filter(name = "candidateOnboardingStatusEqFilter", condition = "ONBOARDING_STATUS = :onboardingStatus"), @Filter(name = "candidateOnboardingStatusNEqFilter", condition = "ONBOARDING_STATUS != :onboardingStatus"), @Filter(name = "candidateOnboardingStatusInFilter", condition = "ONBOARDING_STATUS in (:onboardingStatus)"), @Filter(name = "candidatePanCardNumberNInFilter", condition = "PAN_CARD_NUMBER not in (:panCardNumber)"), @Filter(name = "candidatePanCardNumberEqFilter", condition = "PAN_CARD_NUMBER = :panCardNumber"), @Filter(name = "candidatePanCardNumberNEqFilter", condition = "PAN_CARD_NUMBER != :panCardNumber"), @Filter(name = "candidatePanCardNumberInFilter", condition = "PAN_CARD_NUMBER in (:panCardNumber)"), @Filter(name = "candidatePermanentAddressNInFilter", condition = "PERMANENT_ADDRESS not in (:permanentAddress)"), @Filter(name = "candidatePermanentAddressEqFilter", condition = "PERMANENT_ADDRESS = :permanentAddress"), @Filter(name = "candidatePermanentAddressNEqFilter", condition = "PERMANENT_ADDRESS != :permanentAddress"), @Filter(name = "candidatePermanentAddressInFilter", condition = "PERMANENT_ADDRESS in (:permanentAddress)"), @Filter(name = "candidatePhoneNInFilter", condition = "PHONE not in (:phone)"), @Filter(name = "candidatePhoneEqFilter", condition = "PHONE = :phone"), @Filter(name = "candidatePhoneNEqFilter", condition = "PHONE != :phone"), @Filter(name = "candidatePhoneInFilter", condition = "PHONE in (:phone)"), @Filter(name = "candidatePostalCodeGtFilter", condition = "POSTAL_CODE > :postalCode"), @Filter(name = "candidatePostalCodeNInFilter", condition = "POSTAL_CODE not in (:postalCode)"), @Filter(name = "candidatePostalCodeLtEqFilter", condition = "POSTAL_CODE <= :postalCode"), @Filter(name = "candidatePostalCodeLtFilter", condition = "POSTAL_CODE < :postalCode"), @Filter(name = "candidatePostalCodeEqFilter", condition = "POSTAL_CODE = :postalCode"), @Filter(name = "candidatePostalCodeNEqFilter", condition = "POSTAL_CODE != :postalCode"), @Filter(name = "candidatePostalCodeInFilter", condition = "POSTAL_CODE in (:postalCode)"), @Filter(name = "candidatePostalCodeBwFilter", condition = "POSTAL_CODE > :postalCode_MIN  AND POSTAL_CODE < :postalCode_MAX"), @Filter(name = "candidatePostalCodeGtEqFilter", condition = "POSTAL_CODE >= :postalCode"), @Filter(name = "candidatePostalCodeEqFilter", condition = "POSTAL_CODE = :postalCode"), @Filter(name = "candidatePostalCode1GtFilter", condition = "POSTAL_CODE1 > :postalCode1"), @Filter(name = "candidatePostalCode1NInFilter", condition = "POSTAL_CODE1 not in (:postalCode1)"), @Filter(name = "candidatePostalCode1LtEqFilter", condition = "POSTAL_CODE1 <= :postalCode1"), @Filter(name = "candidatePostalCode1LtFilter", condition = "POSTAL_CODE1 < :postalCode1"), @Filter(name = "candidatePostalCode1EqFilter", condition = "POSTAL_CODE1 = :postalCode1"), @Filter(name = "candidatePostalCode1NEqFilter", condition = "POSTAL_CODE1 != :postalCode1"), @Filter(name = "candidatePostalCode1InFilter", condition = "POSTAL_CODE1 in (:postalCode1)"), @Filter(name = "candidatePostalCode1BwFilter", condition = "POSTAL_CODE1 > :postalCode1_MIN  AND POSTAL_CODE1 < :postalCode1_MAX"), @Filter(name = "candidatePostalCode1GtEqFilter", condition = "POSTAL_CODE1 >= :postalCode1"), @Filter(name = "candidatePostalCode1EqFilter", condition = "POSTAL_CODE1 = :postalCode1"), @Filter(name = "candidatePresentAddressNInFilter", condition = "PRESENT_ADDRESS not in (:presentAddress)"), @Filter(name = "candidatePresentAddressEqFilter", condition = "PRESENT_ADDRESS = :presentAddress"), @Filter(name = "candidatePresentAddressNEqFilter", condition = "PRESENT_ADDRESS != :presentAddress"), @Filter(name = "candidatePresentAddressInFilter", condition = "PRESENT_ADDRESS in (:presentAddress)"), @Filter(name = "candidateSkillSetNInFilter", condition = "SKILL_SET not in (:skillSet)"), @Filter(name = "candidateSkillSetEqFilter", condition = "SKILL_SET = :skillSet"), @Filter(name = "candidateSkillSetNEqFilter", condition = "SKILL_SET != :skillSet"), @Filter(name = "candidateSkillSetInFilter", condition = "SKILL_SET in (:skillSet)"), @Filter(name = "candidateSourceOfHireNInFilter", condition = "SOURCE_OF_HIRE not in (:sourceOfHire)"), @Filter(name = "candidateSourceOfHireEqFilter", condition = "SOURCE_OF_HIRE = :sourceOfHire"), @Filter(name = "candidateSourceOfHireNEqFilter", condition = "SOURCE_OF_HIRE != :sourceOfHire"), @Filter(name = "candidateSourceOfHireInFilter", condition = "SOURCE_OF_HIRE in (:sourceOfHire)"), @Filter(name = "candidateStateNInFilter", condition = "STATE not in (:state)"), @Filter(name = "candidateStateEqFilter", condition = "STATE = :state"), @Filter(name = "candidateStateNEqFilter", condition = "STATE != :state"), @Filter(name = "candidateStateInFilter", condition = "STATE in (:state)"), @Filter(name = "candidateState1NInFilter", condition = "STATE1 not in (:state1)"), @Filter(name = "candidateState1EqFilter", condition = "STATE1 = :state1"), @Filter(name = "candidateState1NEqFilter", condition = "STATE1 != :state1"), @Filter(name = "candidateState1InFilter", condition = "STATE1 in (:state1)"), @Filter(name = "candidateTentativeJoiningDateGtFilter", condition = "TENTATIVE_JOINING_DATE > (SELECT DATE_FORMAT(:tentativeJoiningDate, '%Y-%m-%d'))"), @Filter(name = "candidateTentativeJoiningDateLtFilter", condition = "TENTATIVE_JOINING_DATE < (SELECT DATE_FORMAT(:tentativeJoiningDate, '%Y-%m-%d'))"), @Filter(name = "candidateTentativeJoiningDateBwFilter", condition = "TENTATIVE_JOINING_DATE >(SELECT DATE_FORMAT(:tentativeJoiningDate_MIN, '%Y-%m-%d')) AND TENTATIVE_JOINING_DATE <(SELECT DATE_FORMAT(:tentativeJoiningDate_MAX, '%Y-%m-%d'))"), @Filter(name = "candidateTitleNInFilter", condition = "TITLE not in (:title)"), @Filter(name = "candidateTitleEqFilter", condition = "TITLE = :title"), @Filter(name = "candidateTitleNEqFilter", condition = "TITLE != :title"), @Filter(name = "candidateTitleInFilter", condition = "TITLE in (:title)"), @Filter(name = "candidateUanNumberNInFilter", condition = "UAN_NUMBER not in (:uanNumber)"), @Filter(name = "candidateUanNumberEqFilter", condition = "UAN_NUMBER = :uanNumber"), @Filter(name = "candidateUanNumberNEqFilter", condition = "UAN_NUMBER != :uanNumber"), @Filter(name = "candidateUanNumberInFilter", condition = "UAN_NUMBER in (:uanNumber)"), @Filter(name = "candidateWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "candidateWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "candidateWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "candidateWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "candidateWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "candidateWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "candidateWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "candidateWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "candidateWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "candidateWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "candidateProcessInstanceIdNInFilter", condition = "PROCESS_INSTANCE_ID not in (:processInstanceId)"), @Filter(name = "candidateProcessInstanceIdEqFilter", condition = "PROCESS_INSTANCE_ID = :processInstanceId"), @Filter(name = "candidateProcessInstanceIdNEqFilter", condition = "PROCESS_INSTANCE_ID != :processInstanceId"), @Filter(name = "candidateProcessInstanceIdInFilter", condition = "PROCESS_INSTANCE_ID in (:processInstanceId)"), @Filter(name = "candidateWorkflowStageNInFilter", condition = "WORKFLOW_STAGE not in (:workflowStage)"), @Filter(name = "candidateWorkflowStageEqFilter", condition = "WORKFLOW_STAGE = :workflowStage"), @Filter(name = "candidateWorkflowStageNEqFilter", condition = "WORKFLOW_STAGE != :workflowStage"), @Filter(name = "candidateWorkflowStageInFilter", condition = "WORKFLOW_STAGE in (:workflowStage)"), @Filter(name = "candidateAssignedToMeFilterAll", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in(:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName or WORKFLOW_ACTION.ROLE_NAME =:roleName)"), @Filter(name = "candidateAssignedToMeFilterAgUn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"), @Filter(name = "candidateAssignedToMeFilterAgRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName)  or WORKFLOW_ACTION.ROLE_NAME =:roleName)"), @Filter(name = "candidateAssignedToMeFilterUnRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME in (:assigneeGroupName) or  WORKFLOW_ACTION.ROLE_NAME =:roleName)"), @Filter(name = "candidateAssignedToMeFilterAg", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName))"), @Filter(name = "candidateAssignedToMeFilterAu", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"), @Filter(name = "candidateAssignedToMeFilterRn", condition = "ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ROLE_NAME =:roleName)") })
@FilterDefs(value = { @FilterDef(name = "candidateAssignedToMeFilterAll", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class), @ParamDef(name = "assigneeUserName", type = String.class), @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "candidateAssignedToMeFilterAgUn", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class), @ParamDef(name = "assigneeUserName", type = String.class) }), @FilterDef(name = "candidateAssignedToMeFilterAgRn", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class), @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "candidateAssignedToMeFilterUnRn", parameters = { @ParamDef(name = "assigneeUserName", type = String.class), @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "candidateAssignedToMeFilterAg", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class) }), @FilterDef(name = "candidateAssignedToMeFilterAu", parameters = { @ParamDef(name = "assigneeUserName", type = String.class) }), @FilterDef(name = "candidateAssignedToMeFilterRn", parameters = { @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "candidateAadhaarCardNumberNInFilter", parameters = { @ParamDef(name = "aadhaarCardNumber", type = String.class) }), @FilterDef(name = "candidateAadhaarCardNumberEqFilter", parameters = { @ParamDef(name = "aadhaarCardNumber", type = String.class) }), @FilterDef(name = "candidateAadhaarCardNumberNEqFilter", parameters = { @ParamDef(name = "aadhaarCardNumber", type = String.class) }), @FilterDef(name = "candidateAadhaarCardNumberInFilter", parameters = { @ParamDef(name = "aadhaarCardNumber", type = String.class) }), @FilterDef(name = "candidateAdditionalInformationNInFilter", parameters = { @ParamDef(name = "additionalInformation", type = String.class) }), @FilterDef(name = "candidateAdditionalInformationEqFilter", parameters = { @ParamDef(name = "additionalInformation", type = String.class) }), @FilterDef(name = "candidateAdditionalInformationNEqFilter", parameters = { @ParamDef(name = "additionalInformation", type = String.class) }), @FilterDef(name = "candidateAdditionalInformationInFilter", parameters = { @ParamDef(name = "additionalInformation", type = String.class) }), @FilterDef(name = "candidateAddressLine1NInFilter", parameters = { @ParamDef(name = "addressLine1", type = String.class) }), @FilterDef(name = "candidateAddressLine1EqFilter", parameters = { @ParamDef(name = "addressLine1", type = String.class) }), @FilterDef(name = "candidateAddressLine1NEqFilter", parameters = { @ParamDef(name = "addressLine1", type = String.class) }), @FilterDef(name = "candidateAddressLine1InFilter", parameters = { @ParamDef(name = "addressLine1", type = String.class) }), @FilterDef(name = "candidateAddressLine11NInFilter", parameters = { @ParamDef(name = "addressLine11", type = String.class) }), @FilterDef(name = "candidateAddressLine11EqFilter", parameters = { @ParamDef(name = "addressLine11", type = String.class) }), @FilterDef(name = "candidateAddressLine11NEqFilter", parameters = { @ParamDef(name = "addressLine11", type = String.class) }), @FilterDef(name = "candidateAddressLine11InFilter", parameters = { @ParamDef(name = "addressLine11", type = String.class) }), @FilterDef(name = "candidateAddressLine2NInFilter", parameters = { @ParamDef(name = "addressLine2", type = String.class) }), @FilterDef(name = "candidateAddressLine2EqFilter", parameters = { @ParamDef(name = "addressLine2", type = String.class) }), @FilterDef(name = "candidateAddressLine2NEqFilter", parameters = { @ParamDef(name = "addressLine2", type = String.class) }), @FilterDef(name = "candidateAddressLine2InFilter", parameters = { @ParamDef(name = "addressLine2", type = String.class) }), @FilterDef(name = "candidateAddressLine21NInFilter", parameters = { @ParamDef(name = "addressLine21", type = String.class) }), @FilterDef(name = "candidateAddressLine21EqFilter", parameters = { @ParamDef(name = "addressLine21", type = String.class) }), @FilterDef(name = "candidateAddressLine21NEqFilter", parameters = { @ParamDef(name = "addressLine21", type = String.class) }), @FilterDef(name = "candidateAddressLine21InFilter", parameters = { @ParamDef(name = "addressLine21", type = String.class) }), @FilterDef(name = "candidateApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateCandidateIdNInFilter", parameters = { @ParamDef(name = "candidateId", type = String.class) }), @FilterDef(name = "candidateCandidateIdEqFilter", parameters = { @ParamDef(name = "candidateId", type = String.class) }), @FilterDef(name = "candidateCandidateIdNEqFilter", parameters = { @ParamDef(name = "candidateId", type = String.class) }), @FilterDef(name = "candidateCandidateIdInFilter", parameters = { @ParamDef(name = "candidateId", type = String.class) }), @FilterDef(name = "candidateCityNInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "candidateCityEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "candidateCityNEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "candidateCityInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "candidateCity1NInFilter", parameters = { @ParamDef(name = "city1", type = String.class) }), @FilterDef(name = "candidateCity1EqFilter", parameters = { @ParamDef(name = "city1", type = String.class) }), @FilterDef(name = "candidateCity1NEqFilter", parameters = { @ParamDef(name = "city1", type = String.class) }), @FilterDef(name = "candidateCity1InFilter", parameters = { @ParamDef(name = "city1", type = String.class) }), @FilterDef(name = "candidateCountryNInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "candidateCountryEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "candidateCountryNEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "candidateCountryInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "candidateCountry1NInFilter", parameters = { @ParamDef(name = "country1", type = String.class) }), @FilterDef(name = "candidateCountry1EqFilter", parameters = { @ParamDef(name = "country1", type = String.class) }), @FilterDef(name = "candidateCountry1NEqFilter", parameters = { @ParamDef(name = "country1", type = String.class) }), @FilterDef(name = "candidateCountry1InFilter", parameters = { @ParamDef(name = "country1", type = String.class) }), @FilterDef(name = "candidateCurrentSalaryGtFilter", parameters = { @ParamDef(name = "currentSalary", type = Double.class) }), @FilterDef(name = "candidateCurrentSalaryNInFilter", parameters = { @ParamDef(name = "currentSalary", type = Double.class) }), @FilterDef(name = "candidateCurrentSalaryLtEqFilter", parameters = { @ParamDef(name = "currentSalary", type = Double.class) }), @FilterDef(name = "candidateCurrentSalaryLtFilter", parameters = { @ParamDef(name = "currentSalary", type = Double.class) }), @FilterDef(name = "candidateCurrentSalaryEqFilter", parameters = { @ParamDef(name = "currentSalary", type = Double.class) }), @FilterDef(name = "candidateCurrentSalaryNEqFilter", parameters = { @ParamDef(name = "currentSalary", type = Double.class) }), @FilterDef(name = "candidateCurrentSalaryInFilter", parameters = { @ParamDef(name = "currentSalary", type = Double.class) }), @FilterDef(name = "candidateCurrentSalaryBwFilter", parameters = { @ParamDef(name = "currentSalary_MIN", type = Double.class), @ParamDef(name = "currentSalary_MAX", type = Double.class) }), @FilterDef(name = "candidateCurrentSalaryGtEqFilter", parameters = { @ParamDef(name = "currentSalary", type = Double.class) }), @FilterDef(name = "candidateDepartmentDepartmentCodeNInFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "candidateDepartmentDepartmentCodeEqFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "candidateDepartmentDepartmentCodeNEqFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "candidateDepartmentDepartmentCodeInFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "candidateDepartmentDepartmentLeadGtFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "candidateDepartmentDepartmentLeadNInFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "candidateDepartmentDepartmentLeadLtEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "candidateDepartmentDepartmentLeadLtFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "candidateDepartmentDepartmentLeadEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "candidateDepartmentDepartmentLeadNEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "candidateDepartmentDepartmentLeadInFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "candidateDepartmentDepartmentLeadBwFilter", parameters = { @ParamDef(name = "departmentLead_MIN", type = Integer.class), @ParamDef(name = "departmentLead_MAX", type = Integer.class) }), @FilterDef(name = "candidateDepartmentDepartmentLeadGtEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "candidateDepartmentIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateDepartmentIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateDepartmentIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateDepartmentIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateDepartmentIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateDepartmentIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateDepartmentIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateDepartmentIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "candidateDepartmentIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateDepartmentParentDepartmentGtFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "candidateDepartmentParentDepartmentNInFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "candidateDepartmentParentDepartmentLtEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "candidateDepartmentParentDepartmentLtFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "candidateDepartmentParentDepartmentEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "candidateDepartmentParentDepartmentNEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "candidateDepartmentParentDepartmentInFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "candidateDepartmentParentDepartmentBwFilter", parameters = { @ParamDef(name = "parentDepartment_MIN", type = Integer.class), @ParamDef(name = "parentDepartment_MAX", type = Integer.class) }), @FilterDef(name = "candidateDepartmentParentDepartmentGtEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "candidateDepartmentMailAliasNInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "candidateDepartmentMailAliasEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "candidateDepartmentMailAliasNEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "candidateDepartmentMailAliasInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "candidateDepartmentNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "candidateDepartmentNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "candidateDepartmentNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "candidateDepartmentNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "candidateDepartmentApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateDepartmentApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateDepartmentApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateDepartmentApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateEmailIdNInFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "candidateEmailIdEqFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "candidateEmailIdNEqFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "candidateEmailIdInFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "candidateExperienceGtFilter", parameters = { @ParamDef(name = "experience", type = Integer.class) }), @FilterDef(name = "candidateExperienceNInFilter", parameters = { @ParamDef(name = "experience", type = Integer.class) }), @FilterDef(name = "candidateExperienceLtEqFilter", parameters = { @ParamDef(name = "experience", type = Integer.class) }), @FilterDef(name = "candidateExperienceLtFilter", parameters = { @ParamDef(name = "experience", type = Integer.class) }), @FilterDef(name = "candidateExperienceEqFilter", parameters = { @ParamDef(name = "experience", type = Integer.class) }), @FilterDef(name = "candidateExperienceNEqFilter", parameters = { @ParamDef(name = "experience", type = Integer.class) }), @FilterDef(name = "candidateExperienceInFilter", parameters = { @ParamDef(name = "experience", type = Integer.class) }), @FilterDef(name = "candidateExperienceBwFilter", parameters = { @ParamDef(name = "experience_MIN", type = Integer.class), @ParamDef(name = "experience_MAX", type = Integer.class) }), @FilterDef(name = "candidateExperienceGtEqFilter", parameters = { @ParamDef(name = "experience", type = Integer.class) }), @FilterDef(name = "candidateFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "candidateFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "candidateFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "candidateFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "candidateHighestQualificationNInFilter", parameters = { @ParamDef(name = "highestQualification", type = String.class) }), @FilterDef(name = "candidateHighestQualificationEqFilter", parameters = { @ParamDef(name = "highestQualification", type = String.class) }), @FilterDef(name = "candidateHighestQualificationNEqFilter", parameters = { @ParamDef(name = "highestQualification", type = String.class) }), @FilterDef(name = "candidateHighestQualificationInFilter", parameters = { @ParamDef(name = "highestQualification", type = String.class) }), @FilterDef(name = "candidateIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "candidateIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "candidateLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "candidateLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "candidateLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "candidateLocationCountryNInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "candidateLocationCountryEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "candidateLocationCountryNEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "candidateLocationCountryInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "candidateLocationIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateLocationIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateLocationIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateLocationIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateLocationIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateLocationIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateLocationIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateLocationIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "candidateLocationIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "candidateLocationStateProvinceNInFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "candidateLocationStateProvinceEqFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "candidateLocationStateProvinceNEqFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "candidateLocationStateProvinceInFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "candidateLocationTimeZoneNInFilter", parameters = { @ParamDef(name = "timeZone", type = String.class) }), @FilterDef(name = "candidateLocationTimeZoneEqFilter", parameters = { @ParamDef(name = "timeZone", type = String.class) }), @FilterDef(name = "candidateLocationTimeZoneNEqFilter", parameters = { @ParamDef(name = "timeZone", type = String.class) }), @FilterDef(name = "candidateLocationTimeZoneInFilter", parameters = { @ParamDef(name = "timeZone", type = String.class) }), @FilterDef(name = "candidateLocationMailAliasNInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "candidateLocationMailAliasEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "candidateLocationMailAliasNEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "candidateLocationMailAliasInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "candidateLocationNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "candidateLocationNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "candidateLocationNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "candidateLocationNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "candidateLocationDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "candidateLocationDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "candidateLocationDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "candidateLocationDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "candidateLocationLocationIdNInFilter", parameters = { @ParamDef(name = "locationId", type = String.class) }), @FilterDef(name = "candidateLocationLocationIdEqFilter", parameters = { @ParamDef(name = "locationId", type = String.class) }), @FilterDef(name = "candidateLocationLocationIdNEqFilter", parameters = { @ParamDef(name = "locationId", type = String.class) }), @FilterDef(name = "candidateLocationLocationIdInFilter", parameters = { @ParamDef(name = "locationId", type = String.class) }), @FilterDef(name = "candidateLocationApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateLocationApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateLocationApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateLocationApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "candidateOfficialEmailNInFilter", parameters = { @ParamDef(name = "officialEmail", type = String.class) }), @FilterDef(name = "candidateOfficialEmailEqFilter", parameters = { @ParamDef(name = "officialEmail", type = String.class) }), @FilterDef(name = "candidateOfficialEmailNEqFilter", parameters = { @ParamDef(name = "officialEmail", type = String.class) }), @FilterDef(name = "candidateOfficialEmailInFilter", parameters = { @ParamDef(name = "officialEmail", type = String.class) }), @FilterDef(name = "candidateOnboardingStatusNInFilter", parameters = { @ParamDef(name = "onboardingStatus", type = String.class) }), @FilterDef(name = "candidateOnboardingStatusEqFilter", parameters = { @ParamDef(name = "onboardingStatus", type = String.class) }), @FilterDef(name = "candidateOnboardingStatusNEqFilter", parameters = { @ParamDef(name = "onboardingStatus", type = String.class) }), @FilterDef(name = "candidateOnboardingStatusInFilter", parameters = { @ParamDef(name = "onboardingStatus", type = String.class) }), @FilterDef(name = "candidatePanCardNumberNInFilter", parameters = { @ParamDef(name = "panCardNumber", type = String.class) }), @FilterDef(name = "candidatePanCardNumberEqFilter", parameters = { @ParamDef(name = "panCardNumber", type = String.class) }), @FilterDef(name = "candidatePanCardNumberNEqFilter", parameters = { @ParamDef(name = "panCardNumber", type = String.class) }), @FilterDef(name = "candidatePanCardNumberInFilter", parameters = { @ParamDef(name = "panCardNumber", type = String.class) }), @FilterDef(name = "candidatePermanentAddressNInFilter", parameters = { @ParamDef(name = "permanentAddress", type = String.class) }), @FilterDef(name = "candidatePermanentAddressEqFilter", parameters = { @ParamDef(name = "permanentAddress", type = String.class) }), @FilterDef(name = "candidatePermanentAddressNEqFilter", parameters = { @ParamDef(name = "permanentAddress", type = String.class) }), @FilterDef(name = "candidatePermanentAddressInFilter", parameters = { @ParamDef(name = "permanentAddress", type = String.class) }), @FilterDef(name = "candidatePhoneNInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "candidatePhoneEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "candidatePhoneNEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "candidatePhoneInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "candidatePostalCodeGtFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "candidatePostalCodeNInFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "candidatePostalCodeLtEqFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "candidatePostalCodeLtFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "candidatePostalCodeEqFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "candidatePostalCodeNEqFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "candidatePostalCodeInFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "candidatePostalCodeBwFilter", parameters = { @ParamDef(name = "postalCode_MIN", type = Integer.class), @ParamDef(name = "postalCode_MAX", type = Integer.class) }), @FilterDef(name = "candidatePostalCodeGtEqFilter", parameters = { @ParamDef(name = "postalCode", type = Integer.class) }), @FilterDef(name = "candidatePostalCode1GtFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "candidatePostalCode1NInFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "candidatePostalCode1LtEqFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "candidatePostalCode1LtFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "candidatePostalCode1EqFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "candidatePostalCode1NEqFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "candidatePostalCode1InFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "candidatePostalCode1BwFilter", parameters = { @ParamDef(name = "postalCode1_MIN", type = Integer.class), @ParamDef(name = "postalCode1_MAX", type = Integer.class) }), @FilterDef(name = "candidatePostalCode1GtEqFilter", parameters = { @ParamDef(name = "postalCode1", type = Integer.class) }), @FilterDef(name = "candidatePresentAddressNInFilter", parameters = { @ParamDef(name = "presentAddress", type = String.class) }), @FilterDef(name = "candidatePresentAddressEqFilter", parameters = { @ParamDef(name = "presentAddress", type = String.class) }), @FilterDef(name = "candidatePresentAddressNEqFilter", parameters = { @ParamDef(name = "presentAddress", type = String.class) }), @FilterDef(name = "candidatePresentAddressInFilter", parameters = { @ParamDef(name = "presentAddress", type = String.class) }), @FilterDef(name = "candidateSkillSetNInFilter", parameters = { @ParamDef(name = "skillSet", type = String.class) }), @FilterDef(name = "candidateSkillSetEqFilter", parameters = { @ParamDef(name = "skillSet", type = String.class) }), @FilterDef(name = "candidateSkillSetNEqFilter", parameters = { @ParamDef(name = "skillSet", type = String.class) }), @FilterDef(name = "candidateSkillSetInFilter", parameters = { @ParamDef(name = "skillSet", type = String.class) }), @FilterDef(name = "candidateSourceOfHireNInFilter", parameters = { @ParamDef(name = "sourceOfHire", type = String.class) }), @FilterDef(name = "candidateSourceOfHireEqFilter", parameters = { @ParamDef(name = "sourceOfHire", type = String.class) }), @FilterDef(name = "candidateSourceOfHireNEqFilter", parameters = { @ParamDef(name = "sourceOfHire", type = String.class) }), @FilterDef(name = "candidateSourceOfHireInFilter", parameters = { @ParamDef(name = "sourceOfHire", type = String.class) }), @FilterDef(name = "candidateStateNInFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "candidateStateEqFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "candidateStateNEqFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "candidateStateInFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "candidateState1NInFilter", parameters = { @ParamDef(name = "state1", type = String.class) }), @FilterDef(name = "candidateState1EqFilter", parameters = { @ParamDef(name = "state1", type = String.class) }), @FilterDef(name = "candidateState1NEqFilter", parameters = { @ParamDef(name = "state1", type = String.class) }), @FilterDef(name = "candidateState1InFilter", parameters = { @ParamDef(name = "state1", type = String.class) }), @FilterDef(name = "candidateTentativeJoiningDateGtFilter", parameters = { @ParamDef(name = "tentativeJoiningDate", type = String.class) }), @FilterDef(name = "candidateTentativeJoiningDateLtFilter", parameters = { @ParamDef(name = "tentativeJoiningDate", type = String.class) }), @FilterDef(name = "candidateTentativeJoiningDateBwFilter", parameters = { @ParamDef(name = "tentativeJoiningDate_MIN", type = String.class), @ParamDef(name = "tentativeJoiningDate_MAX", type = String.class) }), @FilterDef(name = "candidateTitleNInFilter", parameters = { @ParamDef(name = "title", type = String.class) }), @FilterDef(name = "candidateTitleEqFilter", parameters = { @ParamDef(name = "title", type = String.class) }), @FilterDef(name = "candidateTitleNEqFilter", parameters = { @ParamDef(name = "title", type = String.class) }), @FilterDef(name = "candidateTitleInFilter", parameters = { @ParamDef(name = "title", type = String.class) }), @FilterDef(name = "candidateUanNumberNInFilter", parameters = { @ParamDef(name = "uanNumber", type = String.class) }), @FilterDef(name = "candidateUanNumberEqFilter", parameters = { @ParamDef(name = "uanNumber", type = String.class) }), @FilterDef(name = "candidateUanNumberNEqFilter", parameters = { @ParamDef(name = "uanNumber", type = String.class) }), @FilterDef(name = "candidateUanNumberInFilter", parameters = { @ParamDef(name = "uanNumber", type = String.class) }), @FilterDef(name = "candidateWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "candidateWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "candidateWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "candidateWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "candidateWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "candidateWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "candidateWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "candidateWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "candidateWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "candidateProcessInstanceIdNInFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "candidateProcessInstanceIdEqFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "candidateProcessInstanceIdNEqFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "candidateProcessInstanceIdInFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "candidateWorkflowStageNInFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }), @FilterDef(name = "candidateWorkflowStageEqFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }), @FilterDef(name = "candidateWorkflowStageNEqFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }), @FilterDef(name = "candidateWorkflowStageInFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }) })
public class Candidate extends BaseEntitySaaS{

    @Size(max = 20)
    @Basic
    @Column(name = "AADHAAR_CARD_NUMBER", length = 20)
    private String aadhaarCardNumber;

    @Basic
    @Column(name = "ADDITIONAL_INFORMATION", columnDefinition = "LONGTEXT")
    private String additionalInformation;

    @Size(max = 100)
    @Basic
    @Column(name = "ADDRESS_LINE1", length = 100)
    private String addressLine1;
    
    @Size(max = 50)
    @Basic
    @Column(name = "CITIZENSHIP")
    private String citizenship;

    @Size(max = 100)
    @Basic
    @Column(name = "ADDRESS_LINE11", length = 100)
    private String addressLine11;

    @Size(max = 100)
    @Basic
    @Column(name = "ADDRESS_LINE2", length = 100)
    private String addressLine2;
     
    @Size(max = 100)
    @Basic
    @Column(name = "CANDIDATE_PHOTO")
    private String candidatePhoto;

    @Size(max = 100)
    @Basic
    @Column(name = "ATTACHMENT1")
    private String attachment1;
    
    @Size(max = 100)
    @Basic
    @Column(name = "ATTACHMENT2")
    private String attachment2;
    
    @Size(max = 100)
    @Basic
    @Column(name = "ADDRESS_LINE21", length = 100)
    private String addressLine21;

    @Basic
    @Column(name = "APPROVAL_STATUS('Pending','Approved','Reject','Under-Review','Closed','On Hold')", columnDefinition = "ENUM", length = 12)
    private String approvalStatus;

    @Basic
    @Column(name = "CANDIDATE_ID", length = 100)
    private String candidateId;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String city;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String city1;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String country;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String country1;

    @Basic
    @Column(name = "CURRENT_SALARY")
    private Double currentSalary;

    @Basic
    private boolean deleted;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "DEPARTMENT_ID", columnDefinition = "INT")
    private Department department;

    @Size(max = 100)
    @Basic
    @Column(name = "EMAIL_ID", length = 100, unique = true)
    private String emailId;

    @Basic
    @Column(columnDefinition = "INT")
    private Integer experience;

    @Size(max = 50)
    @Basic
    @Column(name = "FIRST_NAME", length = 50)
    private String firstName;

    @Size(max = 50)
    @Basic
    @Column(name = "HIGHEST_QUALIFICATION", length = 50)
    private String highestQualification;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 50)
    @Basic
    @Column(name = "LAST_NAME", length = 50)
    private String lastName;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "LOCATION_ID", columnDefinition = "INT")
    private Location location;

    @Size(max = 100)
    @Basic
    @Column(name = "OFFICIAL_EMAIL", length = 100)
    private String officialEmail;

    @Basic
    @Column(name = "ONBOARDING_STATUS", columnDefinition = "ENUM('Pending','In-progress','Completed','Probationary-Period','Extended-Onboarding','On-Hold','Exited-During-Onboarding')", length = 24)
    private String onboardingStatus;

    @Size(max = 20)
    @Basic
    @Column(name = "PAN_CARD_NUMBER", length = 20)
    private String panCardNumber;

    @Basic
    @Column(name = "PERMANENT_ADDRESS", columnDefinition = "LONGTEXT")
    private String permanentAddress;

    @Size(max = 20)
    @Basic
    @Column(length = 20)
    private String phone;

    @Basic
    @Column(name = "POSTAL_CODE", columnDefinition = "INT")
    private Integer postalCode;

    @Basic
    @Column(name = "POSTAL_CODE1", columnDefinition = "INT")
    private Integer postalCode1;

    @Basic
    @Column(name = "PRESENT_ADDRESS", columnDefinition = "LONGTEXT")
    private String presentAddress;

    @Size(max = 100)
    @Basic
    @Column(name = "SKILL_SET", length = 100)
    private String skillSet;

    @Size(max = 100)
    @Basic
    @Column(name = "SOURCE_OF_HIRE", length = 100)
    private String sourceOfHire;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String state;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String state1;

    @Basic
    @Column(name = "TENTATIVE_JOINING_DATE", length = 19)
    private Date tentativeJoiningDate;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String title;

    @Size(max = 20)
    @Basic
    @Column(name = "UAN_NUMBER", length = 20)
    private String uanNumber;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;
    
    @Size(max = 250)
    @Column(name = "TEXT1", length = 250)
    private String text1;
    
    @Size(max = 250)
    @Column(name = "TEXT2", length = 250)
    private String text2;
    
    @Size(max = 250)
    @Column(name = "TEXT3", length = 250)
    private String text3;
    
    @Size(max = 250)
    @Column(name = "TEXT4", length = 250)
    private String text4;
    
    @Size(max = 250)
    @Column(name = "TEXT5", length = 250)
    private String text5;
    
    @Size(max = 250)
    @Column(name = "TEXT6", length = 250)
    private String text6;
    
    @Size(max = 250)
    @Column(name = "TEXT7", length = 250)
    private String text7;
    
    @Size(max = 250)
    @Column(name = "TEXT8", length = 250)
    private String text8;
    
    @Size(max = 250)
    @Column(name = "TEXT9", length = 250)
    private String text9;
    
    @Size(max = 250)
    @Column(name = "TEXT10", length = 250)
    private String text10;
   
    
    public String getText1() {
		return text1;
	}

	public void setText1(String text1) {
		this.text1 = text1;
	}

	public String getText2() {
		return text2;
	}

	public void setText2(String text2) {
		this.text2 = text2;
	}

	public String getText3() {
		return text3;
	}

	public void setText3(String text3) {
		this.text3 = text3;
	}

	public String getText4() {
		return text4;
	}

	public void setText4(String text4) {
		this.text4 = text4;
	}

	public String getText5() {
		return text5;
	}

	public void setText5(String text5) {
		this.text5 = text5;
	}

	public String getText6() {
		return text6;
	}

	public void setText6(String text6) {
		this.text6 = text6;
	}

	public String getText7() {
		return text7;
	}

	public void setText7(String text7) {
		this.text7 = text7;
	}

	public String getText8() {
		return text8;
	}

	public void setText8(String text8) {
		this.text8 = text8;
	}

	public String getText9() {
		return text9;
	}

	public void setText9(String text9) {
		this.text9 = text9;
	}

	public String getText10() {
		return text10;
	}

	public void setText10(String text10) {
		this.text10 = text10;
	}

	public Candidate() {
    }

    public Candidate(Integer id) {
        this.id = id;
    }

    public String getAadhaarCardNumber() {
        return aadhaarCardNumber;
    }

    public void setAadhaarCardNumber(String aadhaarCardNumber) {
        this.aadhaarCardNumber = aadhaarCardNumber;
    }

    public String getAdditionalInformation() {
        return additionalInformation;
    }

    public void setAdditionalInformation(String additionalInformation) {
        this.additionalInformation = additionalInformation;
    }

    public String getAddressLine1() {
        return addressLine1;
    }

    public void setAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
    }

    public String getAddressLine11() {
        return addressLine11;
    }

    public void setAddressLine11(String addressLine11) {
        this.addressLine11 = addressLine11;
    }

    public String getAddressLine2() {
        return addressLine2;
    }

    public void setAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
    }

    public String getAddressLine21() {
        return addressLine21;
    }

    public void setAddressLine21(String addressLine21) {
        this.addressLine21 = addressLine21;
    }

    public String getApprovalStatus() {
        return approvalStatus;
    }

    public void setApprovalStatus(String approvalStatus) {
        this.approvalStatus = approvalStatus;
    }
    
    public String getCandidatePhoto() {
		return candidatePhoto;
	}

	public void setCandidatePhoto(String candidatePhoto) {
		this.candidatePhoto = candidatePhoto;
	}

	public String getCandidateId() {
        return candidateId;
    }

    public void setCandidateId(String candidateId) {
        this.candidateId = candidateId;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getCity1() {
        return city1;
    }

    public void setCity1(String city1) {
        this.city1 = city1;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getCitizenship() {
		return citizenship;
	}

	public void setCitizenship(String citizenship) {
		this.citizenship = citizenship;
	}

	public String getCountry1() {
        return country1;
    }

    public void setCountry1(String country1) {
        this.country1 = country1;
    }

    public Double getCurrentSalary() {
        return currentSalary;
    }

    public void setCurrentSalary(Double currentSalary) {
        this.currentSalary = currentSalary;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Department getDepartment() {
        return department;
    }

    public void setDepartment(Department department) {
        this.department = department;
    }

    public String getEmailId() {
        return emailId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public Integer getExperience() {
        return experience;
    }

    public void setExperience(Integer experience) {
        this.experience = experience;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getHighestQualification() {
        return highestQualification;
    }

    public void setHighestQualification(String highestQualification) {
        this.highestQualification = highestQualification;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Location getLocation() {
        return location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    public String getOfficialEmail() {
        return officialEmail;
    }

    public void setOfficialEmail(String officialEmail) {
        this.officialEmail = officialEmail;
    }

    public String getOnboardingStatus() {
        return onboardingStatus;
    }

    public void setOnboardingStatus(String onboardingStatus) {
        this.onboardingStatus = onboardingStatus;
    }

    public String getPanCardNumber() {
        return panCardNumber;
    }

    public void setPanCardNumber(String panCardNumber) {
        this.panCardNumber = panCardNumber;
    }

    public String getPermanentAddress() {
        return permanentAddress;
    }

    public void setPermanentAddress(String permanentAddress) {
        this.permanentAddress = permanentAddress;
    }

    
    public String getAttachment2() {
		return attachment2;
	}

	public void setAttachment2(String attachment2) {
		this.attachment2 = attachment2;
	}

	public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public Integer getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(Integer postalCode) {
        this.postalCode = postalCode;
    }

    public Integer getPostalCode1() {
        return postalCode1;
    }

    public void setPostalCode1(Integer postalCode1) {
        this.postalCode1 = postalCode1;
    }

    public String getPresentAddress() {
        return presentAddress;
    }

    public void setPresentAddress(String presentAddress) {
        this.presentAddress = presentAddress;
    }

    public String getSkillSet() {
        return skillSet;
    }

    public void setSkillSet(String skillSet) {
        this.skillSet = skillSet;
    }

    public String getSourceOfHire() {
        return sourceOfHire;
    }

    public void setSourceOfHire(String sourceOfHire) {
        this.sourceOfHire = sourceOfHire;
    }

    public String getAttachment1() {
		return attachment1;
	}

	public void setAttachment1(String attachment1) {
		this.attachment1 = attachment1;
	}

	public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getState1() {
        return state1;
    }

    public void setState1(String state1) {
        this.state1 = state1;
    }

    public Date getTentativeJoiningDate() {
        return tentativeJoiningDate;
    }

    public void setTentativeJoiningDate(Date tentativeJoiningDate) {
        this.tentativeJoiningDate = tentativeJoiningDate;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUanNumber() {
        return uanNumber;
    }

    public void setUanNumber(String uanNumber) {
        this.uanNumber = uanNumber;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }

    @Column(name = "PROCESS_INSTANCE_ID")
    private String processInstanceId;

    @Column(name = "WORKFLOW_STAGE")
    private String workflowStage;

    public String getProcessInstanceId() {
        return processInstanceId;
    }

    public void setProcessInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
    }

    public String getWorkflowStage() {
        return workflowStage;
    }

    public void setWorkflowStage(String workflowStage) {
        this.workflowStage = workflowStage;
    }

    public List<WorkflowActions> getActions() {
        return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class).getWorkflowActions(id, "Candidate");
    }
}

package com.nouros.hrms.model;

import java.util.Date;
import java.util.List;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.nouros.payrollmanagement.model.EmployeeSalaryStructure.EmployeeMobileType;
import com.nouros.payrollmanagement.model.EmployeeSalaryStructure.FrequencyType;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "OFFERS")
@Filters(value = {
		@Filter(name = "offersApplicantCountryNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY not in (:country)"),
		@Filter(name = "offersApplicantCountryEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY = :country)"),
		@Filter(name = "offersApplicantCountryNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY != :country)"),
		@Filter(name = "offersApplicantCountryInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.COUNTRY in (:country)"),
		@Filter(name = "offersApplicantCurrentSalaryGtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY > :currentSalary)"),
		@Filter(name = "offersApplicantCurrentSalaryNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY not in (:currentSalary)"),
		@Filter(name = "offersApplicantCurrentSalaryLtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY <= :currentSalary)"),
		@Filter(name = "offersApplicantCurrentSalaryLtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY < :currentSalary)"),
		@Filter(name = "offersApplicantCurrentSalaryEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY = :currentSalary)"),
		@Filter(name = "offersApplicantCurrentSalaryNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY != :currentSalary)"),
		@Filter(name = "offersApplicantCurrentSalaryInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY in (:currentSalary)"),
		@Filter(name = "offersApplicantCurrentSalaryBwFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY > :currentSalary_MIN  AND APPLICANT.CURRENT_SALARY < :currentSalary_MAX )"),
		@Filter(name = "offersApplicantCurrentSalaryGtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_SALARY >= :currentSalary)"),
		@Filter(name = "offersApplicantPostalCodeNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE not in (:postalCode)"),
		@Filter(name = "offersApplicantPostalCodeEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE = :postalCode)"),
		@Filter(name = "offersApplicantPostalCodeNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE != :postalCode)"),
		@Filter(name = "offersApplicantPostalCodeInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.POSTAL_CODE in (:postalCode)"),
		@Filter(name = "offersApplicantApplciantSourceNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE not in (:applciantSource)"),
		@Filter(name = "offersApplicantApplciantSourceEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE = :applciantSource)"),
		@Filter(name = "offersApplicantApplciantSourceNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE != :applciantSource)"),
		@Filter(name = "offersApplicantApplciantSourceInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.APPLCIANT_SOURCE in (:applciantSource)"),
		@Filter(name = "offersApplicantEmailIdNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID not in (:emailId)"),
		@Filter(name = "offersApplicantEmailIdEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID = :emailId)"),
		@Filter(name = "offersApplicantEmailIdNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID != :emailId)"),
		@Filter(name = "offersApplicantEmailIdInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EMAIL_ID in (:emailId)"),
		@Filter(name = "offersApplicantCandidateOwnerNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER not in (:candidateOwner)"),
		@Filter(name = "offersApplicantCandidateOwnerEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER = :candidateOwner)"),
		@Filter(name = "offersApplicantCandidateOwnerNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER != :candidateOwner)"),
		@Filter(name = "offersApplicantCandidateOwnerInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_OWNER in (:candidateOwner)"),
		@Filter(name = "offersApplicantProvinceNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE not in (:province)"),
		@Filter(name = "offersApplicantProvinceEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE = :province)"),
		@Filter(name = "offersApplicantProvinceNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE != :province)"),
		@Filter(name = "offersApplicantProvinceInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PROVINCE in (:province)"),
		@Filter(name = "offersApplicantExpectedSalaryGtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY > :expectedSalary)"),
		@Filter(name = "offersApplicantExpectedSalaryNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY not in (:expectedSalary)"),
		@Filter(name = "offersApplicantExpectedSalaryLtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY <= :expectedSalary)"),
		@Filter(name = "offersApplicantExpectedSalaryLtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY < :expectedSalary)"),
		@Filter(name = "offersApplicantExpectedSalaryEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY = :expectedSalary)"),
		@Filter(name = "offersApplicantExpectedSalaryNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY != :expectedSalary)"),
		@Filter(name = "offersApplicantExpectedSalaryInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY in (:expectedSalary)"),
		@Filter(name = "offersApplicantExpectedSalaryBwFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY > :expectedSalary_MIN  AND APPLICANT.EXPECTED_SALARY < :expectedSalary_MAX )"),
		@Filter(name = "offersApplicantExpectedSalaryGtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPECTED_SALARY >= :expectedSalary)"),
		@Filter(name = "offersApplicantIdGtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID > :id)"),
		@Filter(name = "offersApplicantIdNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID not in (:id)"),
		@Filter(name = "offersApplicantIdLtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID <= :id)"),
		@Filter(name = "offersApplicantIdLtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID < :id)"),
		@Filter(name = "offersApplicantIdEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID = :id)"),
		@Filter(name = "offersApplicantIdNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID != :id)"),
		@Filter(name = "offersApplicantIdInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID in (:id)"),
		@Filter(name = "offersApplicantIdBwFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID > :id_MIN  AND APPLICANT.ID < :id_MAX )"),
		@Filter(name = "offersApplicantIdGtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.ID >= :id)"),
		@Filter(name = "offersApplicantFaxNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX not in (:fax)"),
		@Filter(name = "offersApplicantFaxEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX = :fax)"),
		@Filter(name = "offersApplicantFaxNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX != :fax)"),
		@Filter(name = "offersApplicantFaxInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FAX in (:fax)"),
		@Filter(name = "offersApplicantCurrentEmployerNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER not in (:currentEmployer)"),
		@Filter(name = "offersApplicantCurrentEmployerEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER = :currentEmployer)"),
		@Filter(name = "offersApplicantCurrentEmployerNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER != :currentEmployer)"),
		@Filter(name = "offersApplicantCurrentEmployerInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_EMPLOYER in (:currentEmployer)"),
		@Filter(name = "offersApplicantCandidateSourceNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE not in (:candidateSource)"),
		@Filter(name = "offersApplicantCandidateSourceEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE = :candidateSource)"),
		@Filter(name = "offersApplicantCandidateSourceNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE != :candidateSource)"),
		@Filter(name = "offersApplicantCandidateSourceInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_SOURCE in (:candidateSource)"),
		@Filter(name = "offersApplicantFirstNameNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME not in (:firstName)"),
		@Filter(name = "offersApplicantFirstNameEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME = :firstName)"),
		@Filter(name = "offersApplicantFirstNameNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME != :firstName)"),
		@Filter(name = "offersApplicantFirstNameInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.FIRST_NAME in (:firstName)"),
		@Filter(name = "offersApplicantPhoneNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE not in (:phone)"),
		@Filter(name = "offersApplicantPhoneEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE = :phone)"),
		@Filter(name = "offersApplicantPhoneNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE != :phone)"),
		@Filter(name = "offersApplicantPhoneInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PHONE in (:phone)"),
		@Filter(name = "offersApplicantUniqueIdCandidateNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE not in (:uniqueIdCandidate)"),
		@Filter(name = "offersApplicantUniqueIdCandidateEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE = :uniqueIdCandidate)"),
		@Filter(name = "offersApplicantUniqueIdCandidateNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE != :uniqueIdCandidate)"),
		@Filter(name = "offersApplicantUniqueIdCandidateInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.UNIQUE_ID_CANDIDATE in (:uniqueIdCandidate)"),
		@Filter(name = "offersApplicantLastNameNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME not in (:lastName)"),
		@Filter(name = "offersApplicantLastNameEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME = :lastName)"),
		@Filter(name = "offersApplicantLastNameNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME != :lastName)"),
		@Filter(name = "offersApplicantLastNameInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.LAST_NAME in (:lastName)"),
		@Filter(name = "offersApplicantSecondaryEmailNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL not in (:secondaryEmail)"),
		@Filter(name = "offersApplicantSecondaryEmailEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL = :secondaryEmail)"),
		@Filter(name = "offersApplicantSecondaryEmailNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL != :secondaryEmail)"),
		@Filter(name = "offersApplicantSecondaryEmailInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SECONDARY_EMAIL in (:secondaryEmail)"),
		@Filter(name = "offersApplicantHighestQualificationNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION not in (:highestQualification)"),
		@Filter(name = "offersApplicantHighestQualificationEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION = :highestQualification)"),
		@Filter(name = "offersApplicantHighestQualificationNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION != :highestQualification)"),
		@Filter(name = "offersApplicantHighestQualificationInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.HIGHEST_QUALIFICATION in (:highestQualification)"),
		@Filter(name = "offersApplicantCityNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY not in (:city)"),
		@Filter(name = "offersApplicantCityEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY = :city)"),
		@Filter(name = "offersApplicantCityNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY != :city)"),
		@Filter(name = "offersApplicantCityInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CITY in (:city)"),
		@Filter(name = "offersApplicantCandidateStatusNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS not in (:candidateStatus)"),
		@Filter(name = "offersApplicantCandidateStatusEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS = :candidateStatus)"),
		@Filter(name = "offersApplicantCandidateStatusNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS != :candidateStatus)"),
		@Filter(name = "offersApplicantCandidateStatusInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CANDIDATE_STATUS in (:candidateStatus)"),
		@Filter(name = "offersApplicantExperienceInYearsGtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS > :experienceInYears)"),
		@Filter(name = "offersApplicantExperienceInYearsNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS not in (:experienceInYears)"),
		@Filter(name = "offersApplicantExperienceInYearsLtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS <= :experienceInYears)"),
		@Filter(name = "offersApplicantExperienceInYearsLtFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS < :experienceInYears)"),
		@Filter(name = "offersApplicantExperienceInYearsEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS = :experienceInYears)"),
		@Filter(name = "offersApplicantExperienceInYearsNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS != :experienceInYears)"),
		@Filter(name = "offersApplicantExperienceInYearsInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS in (:experienceInYears)"),
		@Filter(name = "offersApplicantExperienceInYearsBwFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS > :experienceInYears_MIN  AND APPLICANT.EXPERIENCE_IN_YEARS < :experienceInYears_MAX )"),
		@Filter(name = "offersApplicantExperienceInYearsGtEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.EXPERIENCE_IN_YEARS >= :experienceInYears)"),
		@Filter(name = "offersApplicantPresentAddressNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS not in (:presentAddress)"),
		@Filter(name = "offersApplicantPresentAddressEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS = :presentAddress)"),
		@Filter(name = "offersApplicantPresentAddressNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS != :presentAddress)"),
		@Filter(name = "offersApplicantPresentAddressInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.PRESENT_ADDRESS in (:presentAddress)"),
		@Filter(name = "offersApplicantStreetNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET not in (:street)"),
		@Filter(name = "offersApplicantStreetEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET = :street)"),
		@Filter(name = "offersApplicantStreetNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET != :street)"),
		@Filter(name = "offersApplicantStreetInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.STREET in (:street)"),
		@Filter(name = "offersApplicantCurrentJobTitleNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE not in (:currentJobTitle)"),
		@Filter(name = "offersApplicantCurrentJobTitleEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE = :currentJobTitle)"),
		@Filter(name = "offersApplicantCurrentJobTitleNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE != :currentJobTitle)"),
		@Filter(name = "offersApplicantCurrentJobTitleInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.CURRENT_JOB_TITLE in (:currentJobTitle)"),
		@Filter(name = "offersApplicantWebsiteNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE not in (:website)"),
		@Filter(name = "offersApplicantWebsiteEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE = :website)"),
		@Filter(name = "offersApplicantWebsiteNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE != :website)"),
		@Filter(name = "offersApplicantWebsiteInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.WEBSITE in (:website)"),
		@Filter(name = "offersApplicantSkillSetNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET not in (:skillSet)"),
		@Filter(name = "offersApplicantSkillSetEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET = :skillSet)"),
		@Filter(name = "offersApplicantSkillSetNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET != :skillSet)"),
		@Filter(name = "offersApplicantSkillSetInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.SKILL_SET in (:skillSet)"),
		@Filter(name = "offersApplicantMobileNInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE not in (:mobile)"),
		@Filter(name = "offersApplicantMobileEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE = :mobile)"),
		@Filter(name = "offersApplicantMobileNEqFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE != :mobile)"),
		@Filter(name = "offersApplicantMobileInFilter", condition = "CANDIDATE_ID in (select APPLICANT.id from APPLICANT where APPLICANT.MOBILE in (:mobile)"),
		@Filter(name = "offersCompensationAmountGtFilter", condition = "COMPENSATION_AMOUNT > :compensationAmount"),
		@Filter(name = "offersCompensationAmountNInFilter", condition = "COMPENSATION_AMOUNT not in (:compensationAmount)"),
		@Filter(name = "offersCompensationAmountLtEqFilter", condition = "COMPENSATION_AMOUNT <= :compensationAmount"),
		@Filter(name = "offersCompensationAmountLtFilter", condition = "COMPENSATION_AMOUNT < :compensationAmount"),
		@Filter(name = "offersCompensationAmountEqFilter", condition = "COMPENSATION_AMOUNT = :compensationAmount"),
		@Filter(name = "offersCompensationAmountNEqFilter", condition = "COMPENSATION_AMOUNT != :compensationAmount"),
		@Filter(name = "offersCompensationAmountInFilter", condition = "COMPENSATION_AMOUNT in (:compensationAmount)"),
		@Filter(name = "offersCompensationAmountBwFilter", condition = "COMPENSATION_AMOUNT > :compensationAmount_MIN  AND COMPENSATION_AMOUNT < :compensationAmount_MAX"),
		@Filter(name = "offersCompensationAmountGtEqFilter", condition = "COMPENSATION_AMOUNT >= :compensationAmount"),
		@Filter(name = "offersCompensationAmountEqFilter", condition = "COMPENSATION_AMOUNT = :compensationAmount"),
		@Filter(name = "offersDepartmentDepartmentCodeNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE not in (:departmentCode)"),
		@Filter(name = "offersDepartmentDepartmentCodeEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE = :departmentCode)"),
		@Filter(name = "offersDepartmentDepartmentCodeNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE != :departmentCode)"),
		@Filter(name = "offersDepartmentDepartmentCodeInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE in (:departmentCode)"),
		@Filter(name = "offersDepartmentDepartmentLeadGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD > :departmentLead)"),
		@Filter(name = "offersDepartmentDepartmentLeadNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD not in (:departmentLead)"),
		@Filter(name = "offersDepartmentDepartmentLeadLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD <= :departmentLead)"),
		@Filter(name = "offersDepartmentDepartmentLeadLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD < :departmentLead)"),
		@Filter(name = "offersDepartmentDepartmentLeadEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD = :departmentLead)"),
		@Filter(name = "offersDepartmentDepartmentLeadNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD != :departmentLead)"),
		@Filter(name = "offersDepartmentDepartmentLeadInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD in (:departmentLead)"),
		@Filter(name = "offersDepartmentDepartmentLeadBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD > :departmentLead_MIN  AND DEPARTMENT.DEPARTMENT_LEAD < :departmentLead_MAX )"),
		@Filter(name = "offersDepartmentDepartmentLeadGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD >= :departmentLead)"),
		@Filter(name = "offersDepartmentIdGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id)"),
		@Filter(name = "offersDepartmentIdNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID not in (:id)"),
		@Filter(name = "offersDepartmentIdLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID <= :id)"),
		@Filter(name = "offersDepartmentIdLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID < :id)"),
		@Filter(name = "offersDepartmentIdEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID = :id)"),
		@Filter(name = "offersDepartmentIdNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID != :id)"),
		@Filter(name = "offersDepartmentIdInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID in (:id)"),
		@Filter(name = "offersDepartmentIdBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id_MIN  AND DEPARTMENT.ID < :id_MAX )"),
		@Filter(name = "offersDepartmentIdGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID >= :id)"),
		@Filter(name = "offersDepartmentParentDepartmentGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT > :parentDepartment)"),
		@Filter(name = "offersDepartmentParentDepartmentNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT not in (:parentDepartment)"),
		@Filter(name = "offersDepartmentParentDepartmentLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT <= :parentDepartment)"),
		@Filter(name = "offersDepartmentParentDepartmentLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT < :parentDepartment)"),
		@Filter(name = "offersDepartmentParentDepartmentEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT = :parentDepartment)"),
		@Filter(name = "offersDepartmentParentDepartmentNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT != :parentDepartment)"),
		@Filter(name = "offersDepartmentParentDepartmentInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT in (:parentDepartment)"),
		@Filter(name = "offersDepartmentParentDepartmentBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT > :parentDepartment_MIN  AND DEPARTMENT.PARENT_DEPARTMENT < :parentDepartment_MAX )"),
		@Filter(name = "offersDepartmentParentDepartmentGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT >= :parentDepartment)"),
		@Filter(name = "offersDepartmentMailAliasNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS not in (:mailAlias)"),
		@Filter(name = "offersDepartmentMailAliasEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS = :mailAlias)"),
		@Filter(name = "offersDepartmentMailAliasNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS != :mailAlias)"),
		@Filter(name = "offersDepartmentMailAliasInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS in (:mailAlias)"),
		@Filter(name = "offersDepartmentNameNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME not in (:name)"),
		@Filter(name = "offersDepartmentNameEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME = :name)"),
		@Filter(name = "offersDepartmentNameNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME != :name)"),
		@Filter(name = "offersDepartmentNameInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME in (:name)"),
		@Filter(name = "offersDepartmentApprovalStatusNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS not in (:approvalStatus)"),
		@Filter(name = "offersDepartmentApprovalStatusEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS = :approvalStatus)"),
		@Filter(name = "offersDepartmentApprovalStatusNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS != :approvalStatus)"),
		@Filter(name = "offersDepartmentApprovalStatusInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS in (:approvalStatus)"),
		@Filter(name = "offersEmploymentTypeNInFilter", condition = "EMPLOYMENT_TYPE not in (:employmentType)"),
		@Filter(name = "offersEmploymentTypeEqFilter", condition = "EMPLOYMENT_TYPE = :employmentType"),
		@Filter(name = "offersEmploymentTypeNEqFilter", condition = "EMPLOYMENT_TYPE != :employmentType"),
		@Filter(name = "offersEmploymentTypeInFilter", condition = "EMPLOYMENT_TYPE in (:employmentType)"),
		@Filter(name = "offersExpectedJoiningDateGtFilter", condition = "EXPECTED_JOINING_DATE > (SELECT DATE_FORMAT(:expectedJoiningDate, '%Y-%m-%d'))"),
		@Filter(name = "offersExpectedJoiningDateLtFilter", condition = "EXPECTED_JOINING_DATE < (SELECT DATE_FORMAT(:expectedJoiningDate, '%Y-%m-%d'))"),
		@Filter(name = "offersExpectedJoiningDateBwFilter", condition = "EXPECTED_JOINING_DATE >(SELECT DATE_FORMAT(:expectedJoiningDate_MIN, '%Y-%m-%d')) AND EXPECTED_JOINING_DATE <(SELECT DATE_FORMAT(:expectedJoiningDate_MAX, '%Y-%m-%d'))"),
		@Filter(name = "offersIdGtFilter", condition = "ID > :id"),
		@Filter(name = "offersIdNInFilter", condition = "ID not in (:id)"),
		@Filter(name = "offersIdLtEqFilter", condition = "ID <= :id"),
		@Filter(name = "offersIdLtFilter", condition = "ID < :id"),
		@Filter(name = "offersIdEqFilter", condition = "ID = :id"),
		@Filter(name = "offersIdNEqFilter", condition = "ID != :id"),
		@Filter(name = "offersIdInFilter", condition = "ID in (:id)"),
		@Filter(name = "offersIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"),
		@Filter(name = "offersIdGtEqFilter", condition = "ID >= :id"),
		@Filter(name = "offersIdEqFilter", condition = "ID = :id"),
		@Filter(name = "offersJobOpeningCountryNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY not in (:country)"),
		@Filter(name = "offersJobOpeningCountryEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY = :country)"),
		@Filter(name = "offersJobOpeningCountryNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY != :country)"),
		@Filter(name = "offersJobOpeningCountryInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.COUNTRY in (:country)"),
		@Filter(name = "offersJobOpeningAttachment3NInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 not in (:attachment3)"),
		@Filter(name = "offersJobOpeningAttachment3EqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 = :attachment3)"),
		@Filter(name = "offersJobOpeningAttachment3NEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 != :attachment3)"),
		@Filter(name = "offersJobOpeningAttachment3InFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT3 in (:attachment3)"),
		@Filter(name = "offersJobOpeningWorkExperienceNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE not in (:workExperience)"),
		@Filter(name = "offersJobOpeningWorkExperienceEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE = :workExperience)"),
		@Filter(name = "offersJobOpeningWorkExperienceNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE != :workExperience)"),
		@Filter(name = "offersJobOpeningWorkExperienceInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.WORK_EXPERIENCE in (:workExperience)"),
		@Filter(name = "offersJobOpeningPostingTitleNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE not in (:postingTitle)"),
		@Filter(name = "offersJobOpeningPostingTitleEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE = :postingTitle)"),
		@Filter(name = "offersJobOpeningPostingTitleNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE != :postingTitle)"),
		@Filter(name = "offersJobOpeningPostingTitleInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTING_TITLE in (:postingTitle)"),
		@Filter(name = "offersJobOpeningSkillsNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS not in (:skills)"),
		@Filter(name = "offersJobOpeningSkillsEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS = :skills)"),
		@Filter(name = "offersJobOpeningSkillsNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS != :skills)"),
		@Filter(name = "offersJobOpeningSkillsInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SKILLS in (:skills)"),
		@Filter(name = "offersJobOpeningDateOpenedGtFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DATE_OPENED > (SELECT DATE_FORMAT(:dateOpened, '%Y-%m-%d'))))"),
		@Filter(name = "offersJobOpeningDateOpenedLtFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DATE_OPENED < (SELECT DATE_FORMAT(:dateOpened, '%Y-%m-%d'))))"),
		@Filter(name = "offersJobOpeningDateOpenedBwFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DATE_OPENED > (SELECT DATE_FORMAT(:dateOpened_MIN , '%Y-%m-%d')) AND JOB_OPENING.DATE_OPENED < (SELECT DATE_FORMAT(:dateOpened_MAX , '%Y-%m-%d')))"),
		@Filter(name = "offersJobOpeningProvinceNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE not in (:province)"),
		@Filter(name = "offersJobOpeningProvinceEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE = :province)"),
		@Filter(name = "offersJobOpeningProvinceNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE != :province)"),
		@Filter(name = "offersJobOpeningProvinceInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.PROVINCE in (:province)"),
		@Filter(name = "offersJobOpeningIdGtFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID > :id)"),
		@Filter(name = "offersJobOpeningIdNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID not in (:id)"),
		@Filter(name = "offersJobOpeningIdLtEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID <= :id)"),
		@Filter(name = "offersJobOpeningIdLtFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID < :id)"),
		@Filter(name = "offersJobOpeningIdEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID = :id)"),
		@Filter(name = "offersJobOpeningIdNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID != :id)"),
		@Filter(name = "offersJobOpeningIdInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID in (:id)"),
		@Filter(name = "offersJobOpeningIdBwFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID > :id_MIN  AND JOB_OPENING.ID < :id_MAX )"),
		@Filter(name = "offersJobOpeningIdGtEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ID >= :id)"),
		@Filter(name = "offersJobOpeningAttachment2NInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 not in (:attachment2)"),
		@Filter(name = "offersJobOpeningAttachment2EqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 = :attachment2)"),
		@Filter(name = "offersJobOpeningAttachment2NEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 != :attachment2)"),
		@Filter(name = "offersJobOpeningAttachment2InFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT2 in (:attachment2)"),
		@Filter(name = "offersJobOpeningAttachment1NInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 not in (:attachment1)"),
		@Filter(name = "offersJobOpeningAttachment1EqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 = :attachment1)"),
		@Filter(name = "offersJobOpeningAttachment1NEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 != :attachment1)"),
		@Filter(name = "offersJobOpeningAttachment1InFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ATTACHMENT1 in (:attachment1)"),
		@Filter(name = "offersJobOpeningTargetClossingDateGtFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.TARGET_CLOSSING_DATE > (SELECT DATE_FORMAT(:targetClossingDate, '%Y-%m-%d'))))"),
		@Filter(name = "offersJobOpeningTargetClossingDateLtFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.TARGET_CLOSSING_DATE < (SELECT DATE_FORMAT(:targetClossingDate, '%Y-%m-%d'))))"),
		@Filter(name = "offersJobOpeningTargetClossingDateBwFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.TARGET_CLOSSING_DATE > (SELECT DATE_FORMAT(:targetClossingDate_MIN , '%Y-%m-%d')) AND JOB_OPENING.TARGET_CLOSSING_DATE < (SELECT DATE_FORMAT(:targetClossingDate_MAX , '%Y-%m-%d')))"),
		@Filter(name = "offersJobOpeningJobOpeningStatusNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS not in (:jobOpeningStatus)"),
		@Filter(name = "offersJobOpeningJobOpeningStatusEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS = :jobOpeningStatus)"),
		@Filter(name = "offersJobOpeningJobOpeningStatusNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS != :jobOpeningStatus)"),
		@Filter(name = "offersJobOpeningJobOpeningStatusInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_OPENING_STATUS in (:jobOpeningStatus)"),
		@Filter(name = "offersJobOpeningHiringManagerNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER not in (:hiringManager)"),
		@Filter(name = "offersJobOpeningHiringManagerEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER = :hiringManager)"),
		@Filter(name = "offersJobOpeningHiringManagerNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER != :hiringManager)"),
		@Filter(name = "offersJobOpeningHiringManagerInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.HIRING_MANAGER in (:hiringManager)"),
		@Filter(name = "offersJobOpeningJobIdNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID not in (:jobId)"),
		@Filter(name = "offersJobOpeningJobIdEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID = :jobId)"),
		@Filter(name = "offersJobOpeningJobIdNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID != :jobId)"),
		@Filter(name = "offersJobOpeningJobIdInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_ID in (:jobId)"),
		@Filter(name = "offersJobOpeningAssignedrecruiterNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER not in (:assignedrecruiter)"),
		@Filter(name = "offersJobOpeningAssignedrecruiterEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER = :assignedrecruiter)"),
		@Filter(name = "offersJobOpeningAssignedrecruiterNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER != :assignedrecruiter)"),
		@Filter(name = "offersJobOpeningAssignedrecruiterInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ASSIGNEDRECRUITER in (:assignedrecruiter)"),
		@Filter(name = "offersJobOpeningOpenPositionsGtFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS > :openPositions)"),
		@Filter(name = "offersJobOpeningOpenPositionsNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS not in (:openPositions)"),
		@Filter(name = "offersJobOpeningOpenPositionsLtEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS <= :openPositions)"),
		@Filter(name = "offersJobOpeningOpenPositionsLtFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS < :openPositions)"),
		@Filter(name = "offersJobOpeningOpenPositionsEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS = :openPositions)"),
		@Filter(name = "offersJobOpeningOpenPositionsNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS != :openPositions)"),
		@Filter(name = "offersJobOpeningOpenPositionsInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS in (:openPositions)"),
		@Filter(name = "offersJobOpeningOpenPositionsBwFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS > :openPositions_MIN  AND JOB_OPENING.OPEN_POSITIONS < :openPositions_MAX )"),
		@Filter(name = "offersJobOpeningOpenPositionsGtEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.OPEN_POSITIONS >= :openPositions)"),
		@Filter(name = "offersJobOpeningCityNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY not in (:city)"),
		@Filter(name = "offersJobOpeningCityEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY = :city)"),
		@Filter(name = "offersJobOpeningCityNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY != :city)"),
		@Filter(name = "offersJobOpeningCityInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.CITY in (:city)"),
		@Filter(name = "offersJobOpeningIndustryNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY not in (:industry)"),
		@Filter(name = "offersJobOpeningIndustryEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY = :industry)"),
		@Filter(name = "offersJobOpeningIndustryNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY != :industry)"),
		@Filter(name = "offersJobOpeningIndustryInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.INDUSTRY in (:industry)"),
		@Filter(name = "offersJobOpeningPostalcodeNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE not in (:postalcode)"),
		@Filter(name = "offersJobOpeningPostalcodeEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE = :postalcode)"),
		@Filter(name = "offersJobOpeningPostalcodeNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE != :postalcode)"),
		@Filter(name = "offersJobOpeningPostalcodeInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.POSTALCODE in (:postalcode)"),
		@Filter(name = "offersJobOpeningJobTypeNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE not in (:jobType)"),
		@Filter(name = "offersJobOpeningJobTypeEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE = :jobType)"),
		@Filter(name = "offersJobOpeningJobTypeNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE != :jobType)"),
		@Filter(name = "offersJobOpeningJobTypeInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.JOB_TYPE in (:jobType)"),
		@Filter(name = "offersJobOpeningSalaryRangeNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE not in (:salaryRange)"),
		@Filter(name = "offersJobOpeningSalaryRangeEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE = :salaryRange)"),
		@Filter(name = "offersJobOpeningSalaryRangeNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE != :salaryRange)"),
		@Filter(name = "offersJobOpeningSalaryRangeInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.SALARY_RANGE in (:salaryRange)"),
		@Filter(name = "offersJobOpeningAddressNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS not in (:address)"),
		@Filter(name = "offersJobOpeningAddressEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS = :address)"),
		@Filter(name = "offersJobOpeningAddressNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS != :address)"),
		@Filter(name = "offersJobOpeningAddressInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.ADDRESS in (:address)"),
		@Filter(name = "offersJobOpeningIsRemoteNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE not in (:isRemote)"),
		@Filter(name = "offersJobOpeningIsRemoteEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE = :isRemote)"),
		@Filter(name = "offersJobOpeningIsRemoteNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE != :isRemote)"),
		@Filter(name = "offersJobOpeningIsRemoteInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.IS_REMOTE in (:isRemote)"),
		@Filter(name = "offersJobOpeningDescriptionRequirementsNInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS not in (:descriptionRequirements)"),
		@Filter(name = "offersJobOpeningDescriptionRequirementsEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS = :descriptionRequirements)"),
		@Filter(name = "offersJobOpeningDescriptionRequirementsNEqFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS != :descriptionRequirements)"),
		@Filter(name = "offersJobOpeningDescriptionRequirementsInFilter", condition = "POSTING_TITLE in (select JOB_OPENING.id from JOB_OPENING where JOB_OPENING.DESCRIPTION_REQUIREMENTS in (:descriptionRequirements)"),
		@Filter(name = "offersOfferOwnerNInFilter", condition = "OFFER_OWNER not in (:offerOwner)"),
		@Filter(name = "offersOfferOwnerEqFilter", condition = "OFFER_OWNER = :offerOwner"),
		@Filter(name = "offersOfferOwnerNEqFilter", condition = "OFFER_OWNER != :offerOwner"),
		@Filter(name = "offersOfferOwnerInFilter", condition = "OFFER_OWNER in (:offerOwner)"),
		@Filter(name = "offersOffersExpiryGtFilter", condition = "OFFERS_EXPIRY > (SELECT DATE_FORMAT(:offersExpiry, '%Y-%m-%d'))"),
		@Filter(name = "offersOffersExpiryLtFilter", condition = "OFFERS_EXPIRY < (SELECT DATE_FORMAT(:offersExpiry, '%Y-%m-%d'))"),
		@Filter(name = "offersOffersExpiryBwFilter", condition = "OFFERS_EXPIRY >(SELECT DATE_FORMAT(:offersExpiry_MIN, '%Y-%m-%d')) AND OFFERS_EXPIRY <(SELECT DATE_FORMAT(:offersExpiry_MAX, '%Y-%m-%d'))"),
		@Filter(name = "offersWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"),
		@Filter(name = "offersWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"),
		@Filter(name = "offersWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"),
		@Filter(name = "offersWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"),
		@Filter(name = "offersWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"),
		@Filter(name = "offersWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"),
		@Filter(name = "offersWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"),
		@Filter(name = "offersWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"),
		@Filter(name = "offersWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"),
		@Filter(name = "offersWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = {
		@FilterDef(name = "offersApplicantCountryNInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "offersApplicantCountryEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "offersApplicantCountryNEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "offersApplicantCountryInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "offersApplicantCurrentSalaryGtFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantCurrentSalaryNInFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantCurrentSalaryLtEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantCurrentSalaryLtFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantCurrentSalaryEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantCurrentSalaryNEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantCurrentSalaryInFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantCurrentSalaryBwFilter", parameters = {
				@ParamDef(name = "currentSalary_MIN", type = Integer.class),
				@ParamDef(name = "currentSalary_MAX", type = Integer.class) }),
		@FilterDef(name = "offersApplicantCurrentSalaryGtEqFilter", parameters = {
				@ParamDef(name = "currentSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantPostalCodeNInFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "offersApplicantPostalCodeEqFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "offersApplicantPostalCodeNEqFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "offersApplicantPostalCodeInFilter", parameters = {
				@ParamDef(name = "postalCode", type = String.class) }),
		@FilterDef(name = "offersApplicantApplciantSourceNInFilter", parameters = {
				@ParamDef(name = "applciantSource", type = String.class) }),
		@FilterDef(name = "offersApplicantApplciantSourceEqFilter", parameters = {
				@ParamDef(name = "applciantSource", type = String.class) }),
		@FilterDef(name = "offersApplicantApplciantSourceNEqFilter", parameters = {
				@ParamDef(name = "applciantSource", type = String.class) }),
		@FilterDef(name = "offersApplicantApplciantSourceInFilter", parameters = {
				@ParamDef(name = "applciantSource", type = String.class) }),
		@FilterDef(name = "offersApplicantEmailIdNInFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "offersApplicantEmailIdEqFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "offersApplicantEmailIdNEqFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "offersApplicantEmailIdInFilter", parameters = {
				@ParamDef(name = "emailId", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateOwnerNInFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateOwnerEqFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateOwnerNEqFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateOwnerInFilter", parameters = {
				@ParamDef(name = "candidateOwner", type = String.class) }),
		@FilterDef(name = "offersApplicantProvinceNInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "offersApplicantProvinceEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "offersApplicantProvinceNEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "offersApplicantProvinceInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "offersApplicantExpectedSalaryGtFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExpectedSalaryNInFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExpectedSalaryLtEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExpectedSalaryLtFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExpectedSalaryEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExpectedSalaryNEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExpectedSalaryInFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExpectedSalaryBwFilter", parameters = {
				@ParamDef(name = "expectedSalary_MIN", type = Integer.class),
				@ParamDef(name = "expectedSalary_MAX", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExpectedSalaryGtEqFilter", parameters = {
				@ParamDef(name = "expectedSalary", type = Integer.class) }),
		@FilterDef(name = "offersApplicantIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersApplicantIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersApplicantIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersApplicantIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersApplicantIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersApplicantIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersApplicantIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersApplicantIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class),
				@ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "offersApplicantIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersApplicantFaxNInFilter", parameters = { @ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "offersApplicantFaxEqFilter", parameters = { @ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "offersApplicantFaxNEqFilter", parameters = { @ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "offersApplicantFaxInFilter", parameters = { @ParamDef(name = "fax", type = String.class) }),
		@FilterDef(name = "offersApplicantCurrentEmployerNInFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "offersApplicantCurrentEmployerEqFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "offersApplicantCurrentEmployerNEqFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "offersApplicantCurrentEmployerInFilter", parameters = {
				@ParamDef(name = "currentEmployer", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateSourceNInFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateSourceEqFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateSourceNEqFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateSourceInFilter", parameters = {
				@ParamDef(name = "candidateSource", type = String.class) }),
		@FilterDef(name = "offersApplicantFirstNameNInFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "offersApplicantFirstNameEqFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "offersApplicantFirstNameNEqFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "offersApplicantFirstNameInFilter", parameters = {
				@ParamDef(name = "firstName", type = String.class) }),
		@FilterDef(name = "offersApplicantPhoneNInFilter", parameters = {
				@ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "offersApplicantPhoneEqFilter", parameters = {
				@ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "offersApplicantPhoneNEqFilter", parameters = {
				@ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "offersApplicantPhoneInFilter", parameters = {
				@ParamDef(name = "phone", type = String.class) }),
		@FilterDef(name = "offersApplicantUniqueIdCandidateNInFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "offersApplicantUniqueIdCandidateEqFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "offersApplicantUniqueIdCandidateNEqFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "offersApplicantUniqueIdCandidateInFilter", parameters = {
				@ParamDef(name = "uniqueIdCandidate", type = String.class) }),
		@FilterDef(name = "offersApplicantLastNameNInFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "offersApplicantLastNameEqFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "offersApplicantLastNameNEqFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "offersApplicantLastNameInFilter", parameters = {
				@ParamDef(name = "lastName", type = String.class) }),
		@FilterDef(name = "offersApplicantSecondaryEmailNInFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "offersApplicantSecondaryEmailEqFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "offersApplicantSecondaryEmailNEqFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "offersApplicantSecondaryEmailInFilter", parameters = {
				@ParamDef(name = "secondaryEmail", type = String.class) }),
		@FilterDef(name = "offersApplicantHighestQualificationNInFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "offersApplicantHighestQualificationEqFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "offersApplicantHighestQualificationNEqFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "offersApplicantHighestQualificationInFilter", parameters = {
				@ParamDef(name = "highestQualification", type = String.class) }),
		@FilterDef(name = "offersApplicantCityNInFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "offersApplicantCityEqFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "offersApplicantCityNEqFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "offersApplicantCityInFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateStatusNInFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateStatusEqFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateStatusNEqFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "offersApplicantCandidateStatusInFilter", parameters = {
				@ParamDef(name = "candidateStatus", type = String.class) }),
		@FilterDef(name = "offersApplicantExperienceInYearsGtFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExperienceInYearsNInFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExperienceInYearsLtEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExperienceInYearsLtFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExperienceInYearsEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExperienceInYearsNEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExperienceInYearsInFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExperienceInYearsBwFilter", parameters = {
				@ParamDef(name = "experienceInYears_MIN", type = Integer.class),
				@ParamDef(name = "experienceInYears_MAX", type = Integer.class) }),
		@FilterDef(name = "offersApplicantExperienceInYearsGtEqFilter", parameters = {
				@ParamDef(name = "experienceInYears", type = Integer.class) }),
		@FilterDef(name = "offersApplicantPresentAddressNInFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "offersApplicantPresentAddressEqFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "offersApplicantPresentAddressNEqFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "offersApplicantPresentAddressInFilter", parameters = {
				@ParamDef(name = "presentAddress", type = String.class) }),
		@FilterDef(name = "offersApplicantStreetNInFilter", parameters = {
				@ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "offersApplicantStreetEqFilter", parameters = {
				@ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "offersApplicantStreetNEqFilter", parameters = {
				@ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "offersApplicantStreetInFilter", parameters = {
				@ParamDef(name = "street", type = String.class) }),
		@FilterDef(name = "offersApplicantCurrentJobTitleNInFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "offersApplicantCurrentJobTitleEqFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "offersApplicantCurrentJobTitleNEqFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "offersApplicantCurrentJobTitleInFilter", parameters = {
				@ParamDef(name = "currentJobTitle", type = String.class) }),
		@FilterDef(name = "offersApplicantWebsiteNInFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "offersApplicantWebsiteEqFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "offersApplicantWebsiteNEqFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "offersApplicantWebsiteInFilter", parameters = {
				@ParamDef(name = "website", type = String.class) }),
		@FilterDef(name = "offersApplicantSkillSetNInFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "offersApplicantSkillSetEqFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "offersApplicantSkillSetNEqFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "offersApplicantSkillSetInFilter", parameters = {
				@ParamDef(name = "skillSet", type = String.class) }),
		@FilterDef(name = "offersApplicantMobileNInFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "offersApplicantMobileEqFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "offersApplicantMobileNEqFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "offersApplicantMobileInFilter", parameters = {
				@ParamDef(name = "mobile", type = String.class) }),
		@FilterDef(name = "offersCompensationAmountGtFilter", parameters = {
				@ParamDef(name = "compensationAmount", type = Double.class) }),
		@FilterDef(name = "offersCompensationAmountNInFilter", parameters = {
				@ParamDef(name = "compensationAmount", type = Double.class) }),
		@FilterDef(name = "offersCompensationAmountLtEqFilter", parameters = {
				@ParamDef(name = "compensationAmount", type = Double.class) }),
		@FilterDef(name = "offersCompensationAmountLtFilter", parameters = {
				@ParamDef(name = "compensationAmount", type = Double.class) }),
		@FilterDef(name = "offersCompensationAmountEqFilter", parameters = {
				@ParamDef(name = "compensationAmount", type = Double.class) }),
		@FilterDef(name = "offersCompensationAmountNEqFilter", parameters = {
				@ParamDef(name = "compensationAmount", type = Double.class) }),
		@FilterDef(name = "offersCompensationAmountInFilter", parameters = {
				@ParamDef(name = "compensationAmount", type = Double.class) }),
		@FilterDef(name = "offersCompensationAmountBwFilter", parameters = {
				@ParamDef(name = "compensationAmount_MIN", type = Double.class),
				@ParamDef(name = "compensationAmount_MAX", type = Double.class) }),
		@FilterDef(name = "offersCompensationAmountGtEqFilter", parameters = {
				@ParamDef(name = "compensationAmount", type = Double.class) }),
		@FilterDef(name = "offersDepartmentDepartmentCodeNInFilter", parameters = {
				@ParamDef(name = "departmentCode", type = String.class) }),
		@FilterDef(name = "offersDepartmentDepartmentCodeEqFilter", parameters = {
				@ParamDef(name = "departmentCode", type = String.class) }),
		@FilterDef(name = "offersDepartmentDepartmentCodeNEqFilter", parameters = {
				@ParamDef(name = "departmentCode", type = String.class) }),
		@FilterDef(name = "offersDepartmentDepartmentCodeInFilter", parameters = {
				@ParamDef(name = "departmentCode", type = String.class) }),
		@FilterDef(name = "offersDepartmentDepartmentLeadGtFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentDepartmentLeadNInFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentDepartmentLeadLtEqFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentDepartmentLeadLtFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentDepartmentLeadEqFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentDepartmentLeadNEqFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentDepartmentLeadInFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentDepartmentLeadBwFilter", parameters = {
				@ParamDef(name = "departmentLead_MIN", type = Integer.class),
				@ParamDef(name = "departmentLead_MAX", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentDepartmentLeadGtEqFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentIdLtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class),
				@ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentIdGtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentParentDepartmentGtFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentParentDepartmentNInFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentParentDepartmentLtEqFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentParentDepartmentLtFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentParentDepartmentEqFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentParentDepartmentNEqFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentParentDepartmentInFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentParentDepartmentBwFilter", parameters = {
				@ParamDef(name = "parentDepartment_MIN", type = Integer.class),
				@ParamDef(name = "parentDepartment_MAX", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentParentDepartmentGtEqFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "offersDepartmentMailAliasNInFilter", parameters = {
				@ParamDef(name = "mailAlias", type = String.class) }),
		@FilterDef(name = "offersDepartmentMailAliasEqFilter", parameters = {
				@ParamDef(name = "mailAlias", type = String.class) }),
		@FilterDef(name = "offersDepartmentMailAliasNEqFilter", parameters = {
				@ParamDef(name = "mailAlias", type = String.class) }),
		@FilterDef(name = "offersDepartmentMailAliasInFilter", parameters = {
				@ParamDef(name = "mailAlias", type = String.class) }),
		@FilterDef(name = "offersDepartmentNameNInFilter", parameters = {
				@ParamDef(name = "name", type = String.class) }),
		@FilterDef(name = "offersDepartmentNameEqFilter", parameters = {
				@ParamDef(name = "name", type = String.class) }),
		@FilterDef(name = "offersDepartmentNameNEqFilter", parameters = {
				@ParamDef(name = "name", type = String.class) }),
		@FilterDef(name = "offersDepartmentNameInFilter", parameters = {
				@ParamDef(name = "name", type = String.class) }),
		@FilterDef(name = "offersDepartmentApprovalStatusNInFilter", parameters = {
				@ParamDef(name = "approvalStatus", type = String.class) }),
		@FilterDef(name = "offersDepartmentApprovalStatusEqFilter", parameters = {
				@ParamDef(name = "approvalStatus", type = String.class) }),
		@FilterDef(name = "offersDepartmentApprovalStatusNEqFilter", parameters = {
				@ParamDef(name = "approvalStatus", type = String.class) }),
		@FilterDef(name = "offersDepartmentApprovalStatusInFilter", parameters = {
				@ParamDef(name = "approvalStatus", type = String.class) }),
		@FilterDef(name = "offersEmploymentTypeNInFilter", parameters = {
				@ParamDef(name = "employmentType", type = String.class) }),
		@FilterDef(name = "offersEmploymentTypeEqFilter", parameters = {
				@ParamDef(name = "employmentType", type = String.class) }),
		@FilterDef(name = "offersEmploymentTypeNEqFilter", parameters = {
				@ParamDef(name = "employmentType", type = String.class) }),
		@FilterDef(name = "offersEmploymentTypeInFilter", parameters = {
				@ParamDef(name = "employmentType", type = String.class) }),
		@FilterDef(name = "offersExpectedJoiningDateGtFilter", parameters = {
				@ParamDef(name = "expectedJoiningDate", type = String.class) }),
		@FilterDef(name = "offersExpectedJoiningDateLtFilter", parameters = {
				@ParamDef(name = "expectedJoiningDate", type = String.class) }),
		@FilterDef(name = "offersExpectedJoiningDateBwFilter", parameters = {
				@ParamDef(name = "expectedJoiningDate_MIN", type = String.class),
				@ParamDef(name = "expectedJoiningDate_MAX", type = String.class) }),
		@FilterDef(name = "offersIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class),
				@ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "offersIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningCountryNInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "offersJobOpeningCountryEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "offersJobOpeningCountryNEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "offersJobOpeningCountryInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment3NInFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment3EqFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment3NEqFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment3InFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "offersJobOpeningWorkExperienceNInFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "offersJobOpeningWorkExperienceEqFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "offersJobOpeningWorkExperienceNEqFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "offersJobOpeningWorkExperienceInFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "offersJobOpeningPostingTitleNInFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "offersJobOpeningPostingTitleEqFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "offersJobOpeningPostingTitleNEqFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "offersJobOpeningPostingTitleInFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "offersJobOpeningSkillsNInFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "offersJobOpeningSkillsEqFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "offersJobOpeningSkillsNEqFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "offersJobOpeningSkillsInFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "offersJobOpeningDateOpenedGtFilter", parameters = {
				@ParamDef(name = "dateOpened", type = String.class) }),
		@FilterDef(name = "offersJobOpeningDateOpenedLtFilter", parameters = {
				@ParamDef(name = "dateOpened", type = String.class) }),
		@FilterDef(name = "offersJobOpeningDateOpenedBwFilter", parameters = {
				@ParamDef(name = "dateOpened_MIN", type = String.class),
				@ParamDef(name = "dateOpened_MAX", type = String.class) }),
		@FilterDef(name = "offersJobOpeningProvinceNInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "offersJobOpeningProvinceEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "offersJobOpeningProvinceNEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "offersJobOpeningProvinceInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "offersJobOpeningIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningIdLtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class),
				@ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningIdGtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningAttachment2NInFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment2EqFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment2NEqFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment2InFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment1NInFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment1EqFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment1NEqFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAttachment1InFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "offersJobOpeningTargetClossingDateGtFilter", parameters = {
				@ParamDef(name = "targetClossingDate", type = String.class) }),
		@FilterDef(name = "offersJobOpeningTargetClossingDateLtFilter", parameters = {
				@ParamDef(name = "targetClossingDate", type = String.class) }),
		@FilterDef(name = "offersJobOpeningTargetClossingDateBwFilter", parameters = {
				@ParamDef(name = "targetClossingDate_MIN", type = String.class),
				@ParamDef(name = "targetClossingDate_MAX", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobOpeningStatusNInFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobOpeningStatusEqFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobOpeningStatusNEqFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobOpeningStatusInFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "offersJobOpeningHiringManagerNInFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "offersJobOpeningHiringManagerEqFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "offersJobOpeningHiringManagerNEqFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "offersJobOpeningHiringManagerInFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobIdNInFilter", parameters = {
				@ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobIdEqFilter", parameters = {
				@ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobIdNEqFilter", parameters = {
				@ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobIdInFilter", parameters = {
				@ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAssignedrecruiterNInFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAssignedrecruiterEqFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAssignedrecruiterNEqFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAssignedrecruiterInFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "offersJobOpeningOpenPositionsGtFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningOpenPositionsNInFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningOpenPositionsLtEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningOpenPositionsLtFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningOpenPositionsEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningOpenPositionsNEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningOpenPositionsInFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningOpenPositionsBwFilter", parameters = {
				@ParamDef(name = "openPositions_MIN", type = Integer.class),
				@ParamDef(name = "openPositions_MAX", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningOpenPositionsGtEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "offersJobOpeningCityNInFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "offersJobOpeningCityEqFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "offersJobOpeningCityNEqFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "offersJobOpeningCityInFilter", parameters = {
				@ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "offersJobOpeningIndustryNInFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "offersJobOpeningIndustryEqFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "offersJobOpeningIndustryNEqFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "offersJobOpeningIndustryInFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "offersJobOpeningPostalcodeNInFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "offersJobOpeningPostalcodeEqFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "offersJobOpeningPostalcodeNEqFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "offersJobOpeningPostalcodeInFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobTypeNInFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobTypeEqFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobTypeNEqFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "offersJobOpeningJobTypeInFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "offersJobOpeningSalaryRangeNInFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "offersJobOpeningSalaryRangeEqFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "offersJobOpeningSalaryRangeNEqFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "offersJobOpeningSalaryRangeInFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAddressNInFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAddressEqFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAddressNEqFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "offersJobOpeningAddressInFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "offersJobOpeningIsRemoteNInFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "offersJobOpeningIsRemoteEqFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "offersJobOpeningIsRemoteNEqFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "offersJobOpeningIsRemoteInFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "offersJobOpeningDescriptionRequirementsNInFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "offersJobOpeningDescriptionRequirementsEqFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "offersJobOpeningDescriptionRequirementsNEqFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "offersJobOpeningDescriptionRequirementsInFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "offersOfferOwnerNInFilter", parameters = {
				@ParamDef(name = "offerOwner", type = String.class) }),
		@FilterDef(name = "offersOfferOwnerEqFilter", parameters = {
				@ParamDef(name = "offerOwner", type = String.class) }),
		@FilterDef(name = "offersOfferOwnerNEqFilter", parameters = {
				@ParamDef(name = "offerOwner", type = String.class) }),
		@FilterDef(name = "offersOfferOwnerInFilter", parameters = {
				@ParamDef(name = "offerOwner", type = String.class) }),
		@FilterDef(name = "offersOffersExpiryGtFilter", parameters = {
				@ParamDef(name = "offersExpiry", type = String.class) }),
		@FilterDef(name = "offersOffersExpiryLtFilter", parameters = {
				@ParamDef(name = "offersExpiry", type = String.class) }),
		@FilterDef(name = "offersOffersExpiryBwFilter", parameters = {
				@ParamDef(name = "offersExpiry_MIN", type = String.class),
				@ParamDef(name = "offersExpiry_MAX", type = String.class) }),
		@FilterDef(name = "offersWorkspaceIdGtFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "offersWorkspaceIdNInFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "offersWorkspaceIdLtEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "offersWorkspaceIdLtFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "offersWorkspaceIdEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "offersWorkspaceIdNEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "offersWorkspaceIdInFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "offersWorkspaceIdBwFilter", parameters = {
				@ParamDef(name = "workspaceId_MIN", type = Integer.class),
				@ParamDef(name = "workspaceId_MAX", type = Integer.class) }),
		@FilterDef(name = "offersWorkspaceIdGtEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Offers extends BaseEntitySaaS{

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "APPLICANT_ID", columnDefinition = "INT")
	private Applicant applicant;

	@Basic
	@Column(name = "COMPENSATION_AMOUNT")
	private Double compensationAmount;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "DEPARTMENT_ID", columnDefinition = "INT")
	private Department department;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "JOB_APPLICATION_ID", columnDefinition = "INT")
	private JobApplication jobApplication;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "DESIGNATION_ID", columnDefinition = "INT")
	private Designation designation;

	@Basic
	@Column(name = "EMPLOYMENT_TYPE", columnDefinition = "ENUM", length = 7)
	private String employmentType;

	@Basic
	@Column(name = "OFFER_STATUS", columnDefinition = "ENUM", length = 3)
	private String offerStatus;

	@Basic
	@Column(name = "OFFER_REJECT_REASON", columnDefinition = "ENUM", length = 6)
	private String offerRejectReason;

	@Basic
	@Column(name = "EXPECTED_JOINING_DATE", length = 19)
	private Date expectedJoiningDate;

	@GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
	@Id
	@Column(columnDefinition = "INT")
	private Integer id;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "POSTING_TITLE", columnDefinition = "INT")
	private JobOpening jobOpening;

	@Size(max = 255)
	@Basic
	@Column(name = "OFFER_OWNER")
	private String offerOwner;

	@Size(max = 200)
	@Basic
	@Column(length = 200, name = "OFFER_LETTER")
	private String offerLetter;

	@Basic
	@Column(name = "OFFERS_EXPIRY", length = 19)
	private Date offersExpiry;

	@Basic
	@Column(name = "WORKSPACE_ID", columnDefinition = "INT")
	private Integer workspaceId;

	@Column(name = "PROCESS_INSTANCE_ID")
	private String processInstanceId;

	@Column(name = "WORKFLOW_STAGE")
	private String workflowStage;

	@Basic
	@Column(name = "OFFER_EMAIL_SENT")
	private boolean isOfferEmailSent;

	@Basic
	@Column(name = "SECURITY_EMAIL_SENT")
	private boolean isSecurityEmailSent;

	@Basic
	@Column(name = "BASIC_SALARY")
	private Double basicSalary;

	@Basic
	@Column(name = "CRITICAL_SKILLS")
	private Double criticalSkills;

	@Basic
	@Column(name = "DELETED")
	private boolean deleted;

	@Basic
	@Column(name = "END_DATE", length = 19)
	private Date endDate;

	@Basic
	@Column(name = "HRA")
	private Double hra;

	@Size(max = 10)
	@Basic
	@Column(name = "LOCAL_CURRENCY")
	private String localCurrency;

	@Basic
	@Column(name = "MOBILE_ALLOWANCE")
	private Double mobileAllowance;

	@Basic
	@Column(name = "OVERBASE")
	private Double overbase;

	@Basic
	@Column(name = "OVERTIME")
	private Double overtime;

	@Basic
	@Column(name = "GROSS_SALARY")
	private Double grossSalary;

	public enum FrequencyType {
		MONTHLY, HOURLY, WEEKLY
	}

	public enum EmployeeMobileType {
		EMPLOYEE_MOBILE_PLAN, COMPANY_MOBILE_PLAN, COMPANY_MOBILE
	}

	@Basic
	@Column(name = "PAY_FREQUENCY")
	@Enumerated(EnumType.STRING)
	private FrequencyType payFrequency;

	@Basic
	@Column(name = "EMPLOYEE_MOBILE_FLAG")
	@Enumerated(EnumType.STRING)
	private EmployeeMobileType employeeMobileFlag;

	@Basic
	@Column(name = "PAY_RATE")
	private Double payRate;

	@Basic
	@Column(name = "RELOCATION_ALLOWANCE")
	private Double relocationAllowance;

	@Basic
	@Column(name = "RELOCATION_ALLOWANCE_DATE", length = 19)
	private Date relocationAllowanceDate;

	@Basic
	@Column(name = "SIGN_UP_BONUS")
	private Double signUpBonus;

	@Basic
	@Column(name = "NEGO_PCT_OVERBASE")
	private Double negoPctOverbase;

	@Basic
	@Column(name = "NEGO_PCT_CRITICAL")
	private Double negoPctCritical;

	@Basic
	@Column(name = "SIGN_UP_BONUS_DATE", length = 19)
	private Date signUpBonusDate;

	@Basic
	@Column(name = "START_DATE", length = 19)
	private Date startDate;

	@Basic
	@Column(name = "STI")
	private Double sti;

	@Basic
	@Column(name = "STI_DATE", length = 19)
	private Date stiDate;

	@Basic
	@Column(name = "TA")
	private Double ta;

	@Basic
	@Column(name = "YEARLY_BASIC_SALARY")
	private Double yearlyBasicSalary;

	@Basic
	@Column(name = "YEARLY_OVERBASE")
	private Double yearlyOverbase;

	@Basic
	@Column(name = "YEARLY_CRITICAL_SKILLS")
	private Double yearlyCriticalSkills;

	@Basic
	@Column(name = "YEARLY_HRA")
	private Double yearlyHra;

	@Basic
	@Column(name = "YEARLY_TA")
	private Double yearlyTa;

	@Basic
	@Column(name = "YEARLY_MOBILE_ALLOWANCE")
	private Double yearlyMobileAllowance;

	@Basic
	@Column(name = "YEARLY_GROSS_SALARY")
	private Double yearlyGrossSalary;

	public boolean isOfferEmailSent() {
		return isOfferEmailSent;
	}

	public void setOfferEmailSent(boolean isOfferEmailSent) {
		this.isOfferEmailSent = isOfferEmailSent;
	}

	public boolean isSecurityEmailSent() {
		return isSecurityEmailSent;
	}

	public void setSecurityEmailSent(boolean isSecurityEmailSent) {
		this.isSecurityEmailSent = isSecurityEmailSent;
	}

	public Offers() {
	}

	public Offers(Integer id) {
		this.id = id;
	}

	public Applicant getApplicant() {
		return applicant;
	}

	public void setApplicant(Applicant applicant) {
		this.applicant = applicant;
	}

	public Double getCompensationAmount() {
		return compensationAmount;
	}

	public void setCompensationAmount(Double compensationAmount) {
		this.compensationAmount = compensationAmount;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	public String getEmploymentType() {
		return employmentType;
	}

	public void setEmploymentType(String employmentType) {
		this.employmentType = employmentType;
	}

	public Date getExpectedJoiningDate() {
		return expectedJoiningDate;
	}

	public void setExpectedJoiningDate(Date expectedJoiningDate) {
		this.expectedJoiningDate = expectedJoiningDate;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public JobOpening getJobOpening() {
		return jobOpening;
	}

	public void setJobOpening(JobOpening jobOpening) {
		this.jobOpening = jobOpening;
	}

	public String getOfferOwner() {
		return offerOwner;
	}

	public void setOfferOwner(String offerOwner) {
		this.offerOwner = offerOwner;
	}

	public Date getOffersExpiry() {
		return offersExpiry;
	}

	public String getOfferLetter() {
		return offerLetter;
	}

	public JobApplication getJobApplication() {
		return jobApplication;
	}

	public void setJobApplication(JobApplication jobApplication) {
		this.jobApplication = jobApplication;
	}

	public void setOfferLetter(String offerLetter) {
		this.offerLetter = offerLetter;
	}

	public void setOffersExpiry(Date offersExpiry) {
		this.offersExpiry = offersExpiry;
	}

	public Integer getWorkspaceId() {
		return workspaceId;
	}

	public void setWorkspaceId(Integer workspaceId) {
		this.workspaceId = workspaceId;
	}

	public String getProcessInstanceId() {
		return processInstanceId;
	}

	public void setProcessInstanceId(String processInstanceId) {
		this.processInstanceId = processInstanceId;
	}

	public Designation getDesignation() {
		return designation;
	}

	public void setDesignation(Designation designation) {
		this.designation = designation;
	}

	public String getOfferStatus() {
		return offerStatus;
	}

	public void setOfferStatus(String offerStatus) {
		this.offerStatus = offerStatus;
	}

	public String getOfferRejectReason() {
		return offerRejectReason;
	}

	public void setOfferRejectReason(String offerRejectReason) {
		this.offerRejectReason = offerRejectReason;
	}

	public String getWorkflowStage() {
		return workflowStage;
	}

	public void setWorkflowStage(String workflowStage) {
		this.workflowStage = workflowStage;
	}

	public List<WorkflowActions> getActions() {
		return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class)
				.getWorkflowActions(id, "Offers");
	}

	public Double getBasicSalary() {
		return basicSalary;
	}

	public void setBasicSalary(Double basicSalary) {
		this.basicSalary = basicSalary;
	}

	public Double getCriticalSkills() {
		return criticalSkills;
	}

	public void setCriticalSkills(Double criticalSkills) {
		this.criticalSkills = criticalSkills;
	}

	public boolean isDeleted() {
		return deleted;
	}

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	public Date getEndDate() {
		return endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	public Double getHra() {
		return hra;
	}

	public void setHra(Double hra) {
		this.hra = hra;
	}

	public String getLocalCurrency() {
		return localCurrency;
	}

	public void setLocalCurrency(String localCurrency) {
		this.localCurrency = localCurrency;
	}

	public Double getMobileAllowance() {
		return mobileAllowance;
	}

	public void setMobileAllowance(Double mobileAllowance) {
		this.mobileAllowance = mobileAllowance;
	}

	public Double getOverbase() {
		return overbase;
	}

	public void setOverbase(Double overbase) {
		this.overbase = overbase;
	}

	public Double getOvertime() {
		return overtime;
	}

	public void setOvertime(Double overtime) {
		this.overtime = overtime;
	}

	public Double getGrossSalary() {
		return grossSalary;
	}

	public void setGrossSalary(Double grossSalary) {
		this.grossSalary = grossSalary;
	}

	public FrequencyType getPayFrequency() {
		return payFrequency;
	}

	public void setPayFrequency(FrequencyType payFrequency) {
		this.payFrequency = payFrequency;
	}

	public EmployeeMobileType getEmployeeMobileFlag() {
		return employeeMobileFlag;
	}

	public void setEmployeeMobileFlag(EmployeeMobileType employeeMobileFlag) {
		this.employeeMobileFlag = employeeMobileFlag;
	}

	public Double getPayRate() {
		return payRate;
	}

	public void setPayRate(Double payRate) {
		this.payRate = payRate;
	}

	public Double getRelocationAllowance() {
		return relocationAllowance;
	}

	public void setRelocationAllowance(Double relocationAllowance) {
		this.relocationAllowance = relocationAllowance;
	}

	public Date getRelocationAllowanceDate() {
		return relocationAllowanceDate;
	}

	public void setRelocationAllowanceDate(Date relocationAllowanceDate) {
		this.relocationAllowanceDate = relocationAllowanceDate;
	}

	public Double getSignUpBonus() {
		return signUpBonus;
	}

	public void setSignUpBonus(Double signUpBonus) {
		this.signUpBonus = signUpBonus;
	}

	public Double getNegoPctOverbase() {
		return negoPctOverbase;
	}

	public void setNegoPctOverbase(Double negoPctOverbase) {
		this.negoPctOverbase = negoPctOverbase;
	}

	public Double getNegoPctCritical() {
		return negoPctCritical;
	}

	public void setNegoPctCritical(Double negoPctCritical) {
		this.negoPctCritical = negoPctCritical;
	}

	public Date getSignUpBonusDate() {
		return signUpBonusDate;
	}

	public void setSignUpBonusDate(Date signUpBonusDate) {
		this.signUpBonusDate = signUpBonusDate;
	}

	public Date getStartDate() {
		return startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	public Double getSti() {
		return sti;
	}

	public void setSti(Double sti) {
		this.sti = sti;
	}

	public Date getStiDate() {
		return stiDate;
	}

	public void setStiDate(Date stiDate) {
		this.stiDate = stiDate;
	}

	public Double getTa() {
		return ta;
	}

	public void setTa(Double ta) {
		this.ta = ta;
	}

	public Double getYearlyBasicSalary() {
		return yearlyBasicSalary;
	}

	public void setYearlyBasicSalary(Double yearlyBasicSalary) {
		this.yearlyBasicSalary = yearlyBasicSalary;
	}

	public Double getYearlyOverbase() {
		return yearlyOverbase;
	}

	public void setYearlyOverbase(Double yearlyOverbase) {
		this.yearlyOverbase = yearlyOverbase;
	}

	public Double getYearlyCriticalSkills() {
		return yearlyCriticalSkills;
	}

	public void setYearlyCriticalSkills(Double yearlyCriticalSkills) {
		this.yearlyCriticalSkills = yearlyCriticalSkills;
	}

	public Double getYearlyHra() {
		return yearlyHra;
	}

	public void setYearlyHra(Double yearlyHra) {
		this.yearlyHra = yearlyHra;
	}

	public Double getYearlyTa() {
		return yearlyTa;
	}

	public void setYearlyTa(Double yearlyTa) {
		this.yearlyTa = yearlyTa;
	}

	public Double getYearlyMobileAllowance() {
		return yearlyMobileAllowance;
	}

	public void setYearlyMobileAllowance(Double yearlyMobileAllowance) {
		this.yearlyMobileAllowance = yearlyMobileAllowance;
	}

	public Double getYearlyGrossSalary() {
		return yearlyGrossSalary;
	}

	public void setYearlyGrossSalary(Double yearlyGrossSalary) {
		this.yearlyGrossSalary = yearlyGrossSalary;
	}

}

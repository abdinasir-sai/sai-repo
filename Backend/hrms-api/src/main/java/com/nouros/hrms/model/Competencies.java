package com.nouros.hrms.model;

import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "COMPETENCIES")
@Filters(value = { @Filter(name = "competenciesActualLevelGtFilter", condition = "ACTUAL_LEVEL > :actualLevel"), @Filter(name = "competenciesActualLevelNInFilter", condition = "ACTUAL_LEVEL not in (:actualLevel)"), @Filter(name = "competenciesActualLevelLtEqFilter", condition = "ACTUAL_LEVEL <= :actualLevel"), @Filter(name = "competenciesActualLevelLtFilter", condition = "ACTUAL_LEVEL < :actualLevel"), @Filter(name = "competenciesActualLevelEqFilter", condition = "ACTUAL_LEVEL = :actualLevel"), @Filter(name = "competenciesActualLevelNEqFilter", condition = "ACTUAL_LEVEL != :actualLevel"), @Filter(name = "competenciesActualLevelInFilter", condition = "ACTUAL_LEVEL in (:actualLevel)"), @Filter(name = "competenciesActualLevelBwFilter", condition = "ACTUAL_LEVEL > :actualLevel_MIN  AND ACTUAL_LEVEL < :actualLevel_MAX"), @Filter(name = "competenciesActualLevelGtEqFilter", condition = "ACTUAL_LEVEL >= :actualLevel"), @Filter(name = "competenciesActualLevelEqFilter", condition = "ACTUAL_LEVEL = :actualLevel"), @Filter(name = "competenciesCompetencyNameNInFilter", condition = "COMPETENCY_NAME not in (:competencyName)"), @Filter(name = "competenciesCompetencyNameEqFilter", condition = "COMPETENCY_NAME = :competencyName"), @Filter(name = "competenciesCompetencyNameNEqFilter", condition = "COMPETENCY_NAME != :competencyName"), @Filter(name = "competenciesCompetencyNameInFilter", condition = "COMPETENCY_NAME in (:competencyName)"), @Filter(name = "competenciesDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "competenciesDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "competenciesDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "competenciesDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "competenciesIdGtFilter", condition = "ID > :id"), @Filter(name = "competenciesIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "competenciesIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "competenciesIdLtFilter", condition = "ID < :id"), @Filter(name = "competenciesIdEqFilter", condition = "ID = :id"), @Filter(name = "competenciesIdNEqFilter", condition = "ID != :id"), @Filter(name = "competenciesIdInFilter", condition = "ID in (:id)"), @Filter(name = "competenciesIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "competenciesIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "competenciesIdEqFilter", condition = "ID = :id"), @Filter(name = "competenciesRequiredLevelGtFilter", condition = "REQUIRED_LEVEL > :requiredLevel"), @Filter(name = "competenciesRequiredLevelNInFilter", condition = "REQUIRED_LEVEL not in (:requiredLevel)"), @Filter(name = "competenciesRequiredLevelLtEqFilter", condition = "REQUIRED_LEVEL <= :requiredLevel"), @Filter(name = "competenciesRequiredLevelLtFilter", condition = "REQUIRED_LEVEL < :requiredLevel"), @Filter(name = "competenciesRequiredLevelEqFilter", condition = "REQUIRED_LEVEL = :requiredLevel"), @Filter(name = "competenciesRequiredLevelNEqFilter", condition = "REQUIRED_LEVEL != :requiredLevel"), @Filter(name = "competenciesRequiredLevelInFilter", condition = "REQUIRED_LEVEL in (:requiredLevel)"), @Filter(name = "competenciesRequiredLevelBwFilter", condition = "REQUIRED_LEVEL > :requiredLevel_MIN  AND REQUIRED_LEVEL < :requiredLevel_MAX"), @Filter(name = "competenciesRequiredLevelGtEqFilter", condition = "REQUIRED_LEVEL >= :requiredLevel"), @Filter(name = "competenciesRequiredLevelEqFilter", condition = "REQUIRED_LEVEL = :requiredLevel"), @Filter(name = "competenciesWeightageGtFilter", condition = "WEIGHTAGE > :weightage"), @Filter(name = "competenciesWeightageNInFilter", condition = "WEIGHTAGE not in (:weightage)"), @Filter(name = "competenciesWeightageLtEqFilter", condition = "WEIGHTAGE <= :weightage"), @Filter(name = "competenciesWeightageLtFilter", condition = "WEIGHTAGE < :weightage"), @Filter(name = "competenciesWeightageEqFilter", condition = "WEIGHTAGE = :weightage"), @Filter(name = "competenciesWeightageNEqFilter", condition = "WEIGHTAGE != :weightage"), @Filter(name = "competenciesWeightageInFilter", condition = "WEIGHTAGE in (:weightage)"), @Filter(name = "competenciesWeightageBwFilter", condition = "WEIGHTAGE > :weightage_MIN  AND WEIGHTAGE < :weightage_MAX"), @Filter(name = "competenciesWeightageGtEqFilter", condition = "WEIGHTAGE >= :weightage"), @Filter(name = "competenciesWeightageEqFilter", condition = "WEIGHTAGE = :weightage"), @Filter(name = "competenciesWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "competenciesWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "competenciesWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "competenciesWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "competenciesWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "competenciesWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "competenciesWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "competenciesWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "competenciesWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "competenciesWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "competenciesActualLevelGtFilter", parameters = { @ParamDef(name = "actualLevel", type = Integer.class) }), @FilterDef(name = "competenciesActualLevelNInFilter", parameters = { @ParamDef(name = "actualLevel", type = Integer.class) }), @FilterDef(name = "competenciesActualLevelLtEqFilter", parameters = { @ParamDef(name = "actualLevel", type = Integer.class) }), @FilterDef(name = "competenciesActualLevelLtFilter", parameters = { @ParamDef(name = "actualLevel", type = Integer.class) }), @FilterDef(name = "competenciesActualLevelEqFilter", parameters = { @ParamDef(name = "actualLevel", type = Integer.class) }), @FilterDef(name = "competenciesActualLevelNEqFilter", parameters = { @ParamDef(name = "actualLevel", type = Integer.class) }), @FilterDef(name = "competenciesActualLevelInFilter", parameters = { @ParamDef(name = "actualLevel", type = Integer.class) }), @FilterDef(name = "competenciesActualLevelBwFilter", parameters = { @ParamDef(name = "actualLevel_MIN", type = Integer.class), @ParamDef(name = "actualLevel_MAX", type = Integer.class) }), @FilterDef(name = "competenciesActualLevelGtEqFilter", parameters = { @ParamDef(name = "actualLevel", type = Integer.class) }), @FilterDef(name = "competenciesCompetencyNameNInFilter", parameters = { @ParamDef(name = "competencyName", type = String.class) }), @FilterDef(name = "competenciesCompetencyNameEqFilter", parameters = { @ParamDef(name = "competencyName", type = String.class) }), @FilterDef(name = "competenciesCompetencyNameNEqFilter", parameters = { @ParamDef(name = "competencyName", type = String.class) }), @FilterDef(name = "competenciesCompetencyNameInFilter", parameters = { @ParamDef(name = "competencyName", type = String.class) }), @FilterDef(name = "competenciesDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "competenciesDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "competenciesDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "competenciesDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "competenciesIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "competenciesIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "competenciesIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "competenciesIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "competenciesIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "competenciesIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "competenciesIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "competenciesIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "competenciesIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "competenciesRequiredLevelGtFilter", parameters = { @ParamDef(name = "requiredLevel", type = Integer.class) }), @FilterDef(name = "competenciesRequiredLevelNInFilter", parameters = { @ParamDef(name = "requiredLevel", type = Integer.class) }), @FilterDef(name = "competenciesRequiredLevelLtEqFilter", parameters = { @ParamDef(name = "requiredLevel", type = Integer.class) }), @FilterDef(name = "competenciesRequiredLevelLtFilter", parameters = { @ParamDef(name = "requiredLevel", type = Integer.class) }), @FilterDef(name = "competenciesRequiredLevelEqFilter", parameters = { @ParamDef(name = "requiredLevel", type = Integer.class) }), @FilterDef(name = "competenciesRequiredLevelNEqFilter", parameters = { @ParamDef(name = "requiredLevel", type = Integer.class) }), @FilterDef(name = "competenciesRequiredLevelInFilter", parameters = { @ParamDef(name = "requiredLevel", type = Integer.class) }), @FilterDef(name = "competenciesRequiredLevelBwFilter", parameters = { @ParamDef(name = "requiredLevel_MIN", type = Integer.class), @ParamDef(name = "requiredLevel_MAX", type = Integer.class) }), @FilterDef(name = "competenciesRequiredLevelGtEqFilter", parameters = { @ParamDef(name = "requiredLevel", type = Integer.class) }), @FilterDef(name = "competenciesWeightageGtFilter", parameters = { @ParamDef(name = "weightage", type = Double.class) }), @FilterDef(name = "competenciesWeightageNInFilter", parameters = { @ParamDef(name = "weightage", type = Double.class) }), @FilterDef(name = "competenciesWeightageLtEqFilter", parameters = { @ParamDef(name = "weightage", type = Double.class) }), @FilterDef(name = "competenciesWeightageLtFilter", parameters = { @ParamDef(name = "weightage", type = Double.class) }), @FilterDef(name = "competenciesWeightageEqFilter", parameters = { @ParamDef(name = "weightage", type = Double.class) }), @FilterDef(name = "competenciesWeightageNEqFilter", parameters = { @ParamDef(name = "weightage", type = Double.class) }), @FilterDef(name = "competenciesWeightageInFilter", parameters = { @ParamDef(name = "weightage", type = Double.class) }), @FilterDef(name = "competenciesWeightageBwFilter", parameters = { @ParamDef(name = "weightage_MIN", type = Double.class), @ParamDef(name = "weightage_MAX", type = Double.class) }), @FilterDef(name = "competenciesWeightageGtEqFilter", parameters = { @ParamDef(name = "weightage", type = Double.class) }), @FilterDef(name = "competenciesWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "competenciesWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "competenciesWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "competenciesWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "competenciesWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "competenciesWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "competenciesWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "competenciesWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "competenciesWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Competencies extends BaseEntitySaaS{

    @Basic
    @Column(name = "ACTUAL_LEVEL", columnDefinition = "INT")
    private Integer actualLevel;

    @Size(max = 200)
    @Basic
    @Column(name = "COMPETENCY_NAME", length = 200)
    private String competencyName;

    @Basic
    @Column(columnDefinition = "LONGTEXT")
    private String description;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.EmployeeCompetenciesDetails.class, mappedBy = "competencies", cascade = CascadeType.MERGE)
    private Set<EmployeeCompetenciesDetails> employeeCompetenciesDetails = new HashSet<>();

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(name = "REQUIRED_LEVEL", columnDefinition = "INT")
    private Integer requiredLevel;

    @Basic
    private Double weightage;
    

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public Competencies() {
    }

    public Competencies(Integer id) {
        this.id = id;
    }

    public Integer getActualLevel() {
        return actualLevel;
    }

    public void setActualLevel(Integer actualLevel) {
        this.actualLevel = actualLevel;
    }

    public String getCompetencyName() {
        return competencyName;
    }

    public void setCompetencyName(String competencyName) {
        this.competencyName = competencyName;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Set<EmployeeCompetenciesDetails> getEmployeeCompetenciesDetails() {
        return employeeCompetenciesDetails;
    }

    public void setEmployeeCompetenciesDetails(Set<EmployeeCompetenciesDetails> employeeCompetenciesDetails) {
        this.employeeCompetenciesDetails = employeeCompetenciesDetails;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getRequiredLevel() {
        return requiredLevel;
    }

    public void setRequiredLevel(Integer requiredLevel) {
        this.requiredLevel = requiredLevel;
    }

    public Double getWeightage() {
        return weightage;
    }

    public void setWeightage(Double weightage) {
        this.weightage = weightage;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }

    
}

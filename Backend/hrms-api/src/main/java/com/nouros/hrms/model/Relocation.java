/* (C)2024 */
package com.nouros.hrms.model;

import java.util.Date;

import org.hibernate.envers.Audited;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@Audited
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "RELOCATION")
//@Filters(value = { @Filter(name = "relocationAccommodationNInFilter", condition = "ACCOMMODATION not in (:accommodation)"), @Filter(name = "relocationAccommodationEqFilter", condition = "ACCOMMODATION = :accommodation"), @Filter(name = "relocationAccommodationNEqFilter", condition = "ACCOMMODATION != :accommodation"), @Filter(name = "relocationAccommodationInFilter", condition = "ACCOMMODATION in (:accommodation)"), @Filter(name = "relocationAirlineNInFilter", condition = "AIRLINE not in (:airline)"), @Filter(name = "relocationAirlineEqFilter", condition = "AIRLINE = :airline"), @Filter(name = "relocationAirlineNEqFilter", condition = "AIRLINE != :airline"), @Filter(name = "relocationAirlineInFilter", condition = "AIRLINE in (:airline)"), @Filter(name = "relocationArrivingAirportCityNInFilter", condition = "ARRIVING_AIRPORT_CITY not in (:arrivingAirportCity)"), @Filter(name = "relocationArrivingAirportCityEqFilter", condition = "ARRIVING_AIRPORT_CITY = :arrivingAirportCity"), @Filter(name = "relocationArrivingAirportCityNEqFilter", condition = "ARRIVING_AIRPORT_CITY != :arrivingAirportCity"), @Filter(name = "relocationArrivingAirportCityInFilter", condition = "ARRIVING_AIRPORT_CITY in (:arrivingAirportCity)"), @Filter(name = "relocationArrivingCountryNInFilter", condition = "ARRIVING_COUNTRY not in (:arrivingCountry)"), @Filter(name = "relocationArrivingCountryEqFilter", condition = "ARRIVING_COUNTRY = :arrivingCountry"), @Filter(name = "relocationArrivingCountryNEqFilter", condition = "ARRIVING_COUNTRY != :arrivingCountry"), @Filter(name = "relocationArrivingCountryInFilter", condition = "ARRIVING_COUNTRY in (:arrivingCountry)"), @Filter(name = "relocationAttachmentNInFilter", condition = "ATTACHMENT not in (:attachment)"), @Filter(name = "relocationAttachmentEqFilter", condition = "ATTACHMENT = :attachment"), @Filter(name = "relocationAttachmentNEqFilter", condition = "ATTACHMENT != :attachment"), @Filter(name = "relocationAttachmentInFilter", condition = "ATTACHMENT in (:attachment)"), @Filter(name = "relocationCheckInTimeAndDateGtFilter", condition = "CHECK_IN_TIME_AND_DATE > (SELECT DATE_FORMAT(:checkInTimeAndDate, '%Y-%m-%d'))"), @Filter(name = "relocationCheckInTimeAndDateLtFilter", condition = "CHECK_IN_TIME_AND_DATE < (SELECT DATE_FORMAT(:checkInTimeAndDate, '%Y-%m-%d'))"), @Filter(name = "relocationCheckInTimeAndDateBwFilter", condition = "CHECK_IN_TIME_AND_DATE >(SELECT DATE_FORMAT(:checkInTimeAndDate_MIN, '%Y-%m-%d')) AND CHECK_IN_TIME_AND_DATE <(SELECT DATE_FORMAT(:checkInTimeAndDate_MAX, '%Y-%m-%d'))"), @Filter(name = "relocationCheckOutTimeAndDateGtFilter", condition = "CHECK_OUT_TIME_AND_DATE > (SELECT DATE_FORMAT(:checkOutTimeAndDate, '%Y-%m-%d'))"), @Filter(name = "relocationCheckOutTimeAndDateLtFilter", condition = "CHECK_OUT_TIME_AND_DATE < (SELECT DATE_FORMAT(:checkOutTimeAndDate, '%Y-%m-%d'))"), @Filter(name = "relocationCheckOutTimeAndDateBwFilter", condition = "CHECK_OUT_TIME_AND_DATE >(SELECT DATE_FORMAT(:checkOutTimeAndDate_MIN, '%Y-%m-%d')) AND CHECK_OUT_TIME_AND_DATE <(SELECT DATE_FORMAT(:checkOutTimeAndDate_MAX, '%Y-%m-%d'))"), @Filter(name = "relocationCommentNInFilter", condition = "COMMENT not in (:comment)"), @Filter(name = "relocationCommentEqFilter", condition = "COMMENT = :comment"), @Filter(name = "relocationCommentNEqFilter", condition = "COMMENT != :comment"), @Filter(name = "relocationCommentInFilter", condition = "COMMENT in (:comment)"), @Filter(name = "relocationDeletedEqFilter", condition = "DELETED = :deleted"), @Filter(name = "relocationDeletedNEqFilter", condition = "DELETED != :deleted"), @Filter(name = "relocationDepartingAirportCityNInFilter", condition = "DEPARTING_AIRPORT_CITY not in (:departingAirportCity)"), @Filter(name = "relocationDepartingAirportCityEqFilter", condition = "DEPARTING_AIRPORT_CITY = :departingAirportCity"), @Filter(name = "relocationDepartingAirportCityNEqFilter", condition = "DEPARTING_AIRPORT_CITY != :departingAirportCity"), @Filter(name = "relocationDepartingAirportCityInFilter", condition = "DEPARTING_AIRPORT_CITY in (:departingAirportCity)"), @Filter(name = "relocationDepartingCountryNInFilter", condition = "DEPARTING_COUNTRY not in (:departingCountry)"), @Filter(name = "relocationDepartingCountryEqFilter", condition = "DEPARTING_COUNTRY = :departingCountry"), @Filter(name = "relocationDepartingCountryNEqFilter", condition = "DEPARTING_COUNTRY != :departingCountry"), @Filter(name = "relocationDepartingCountryInFilter", condition = "DEPARTING_COUNTRY in (:departingCountry)"), @Filter(name = "relocationEligibleTicketClassNInFilter", condition = "ELIGIBLE_TICKET_CLASS not in (:eligibleTicketClass)"), @Filter(name = "relocationEligibleTicketClassEqFilter", condition = "ELIGIBLE_TICKET_CLASS = :eligibleTicketClass"), @Filter(name = "relocationEligibleTicketClassNEqFilter", condition = "ELIGIBLE_TICKET_CLASS != :eligibleTicketClass"), @Filter(name = "relocationEligibleTicketClassInFilter", condition = "ELIGIBLE_TICKET_CLASS in (:eligibleTicketClass)"), @Filter(name = "relocationEmployeeIdGtFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id)"), @Filter(name = "relocationEmployeeIdNInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID not in (:id)"), @Filter(name = "relocationEmployeeIdLtEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID <= :id)"), @Filter(name = "relocationEmployeeIdLtFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID < :id)"), @Filter(name = "relocationEmployeeIdEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID = :id)"), @Filter(name = "relocationEmployeeIdNEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID != :id)"), @Filter(name = "relocationEmployeeIdInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID in (:id)"), @Filter(name = "relocationEmployeeIdBwFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id_MIN  AND EMPLOYEE.ID < :id_MAX )"), @Filter(name = "relocationEmployeeIdGtEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID >= :id)"), @Filter(name = "relocationEmployeeName2NInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 not in (:name2)"), @Filter(name = "relocationEmployeeName2EqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 = :name2)"), @Filter(name = "relocationEmployeeName2NEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 != :name2)"), @Filter(name = "relocationEmployeeName2InFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 in (:name2)"), @Filter(name = "relocationEmployeeName1NInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 not in (:name1)"), @Filter(name = "relocationEmployeeName1EqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 = :name1)"), @Filter(name = "relocationEmployeeName1NEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 != :name1)"), @Filter(name = "relocationEmployeeName1InFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 in (:name1)"), @Filter(name = "relocationFlightCostGtFilter", condition = "FLIGHT_COST > :flightCost"), @Filter(name = "relocationFlightCostNInFilter", condition = "FLIGHT_COST not in (:flightCost)"), @Filter(name = "relocationFlightCostLtEqFilter", condition = "FLIGHT_COST <= :flightCost"), @Filter(name = "relocationFlightCostLtFilter", condition = "FLIGHT_COST < :flightCost"), @Filter(name = "relocationFlightCostEqFilter", condition = "FLIGHT_COST = :flightCost"), @Filter(name = "relocationFlightCostNEqFilter", condition = "FLIGHT_COST != :flightCost"), @Filter(name = "relocationFlightCostInFilter", condition = "FLIGHT_COST in (:flightCost)"), @Filter(name = "relocationFlightCostBwFilter", condition = "FLIGHT_COST > :flightCost_MIN  AND FLIGHT_COST < :flightCost_MAX"), @Filter(name = "relocationFlightCostGtEqFilter", condition = "FLIGHT_COST >= :flightCost"), @Filter(name = "relocationFlightCostEqFilter", condition = "FLIGHT_COST = :flightCost"), @Filter(name = "relocationFlightDurationNInFilter", condition = "FLIGHT_DURATION not in (:flightDuration)"), @Filter(name = "relocationFlightDurationEqFilter", condition = "FLIGHT_DURATION = :flightDuration"), @Filter(name = "relocationFlightDurationNEqFilter", condition = "FLIGHT_DURATION != :flightDuration"), @Filter(name = "relocationFlightDurationInFilter", condition = "FLIGHT_DURATION in (:flightDuration)"), @Filter(name = "relocationFlightTimeGtFilter", condition = "FLIGHT_TIME > (SELECT DATE_FORMAT(:flightTime, '%Y-%m-%d'))"), @Filter(name = "relocationFlightTimeLtFilter", condition = "FLIGHT_TIME < (SELECT DATE_FORMAT(:flightTime, '%Y-%m-%d'))"), @Filter(name = "relocationFlightTimeBwFilter", condition = "FLIGHT_TIME >(SELECT DATE_FORMAT(:flightTime_MIN, '%Y-%m-%d')) AND FLIGHT_TIME <(SELECT DATE_FORMAT(:flightTime_MAX, '%Y-%m-%d'))"), @Filter(name = "relocationHotelCostGtFilter", condition = "HOTEL_COST > :hotelCost"), @Filter(name = "relocationHotelCostNInFilter", condition = "HOTEL_COST not in (:hotelCost)"), @Filter(name = "relocationHotelCostLtEqFilter", condition = "HOTEL_COST <= :hotelCost"), @Filter(name = "relocationHotelCostLtFilter", condition = "HOTEL_COST < :hotelCost"), @Filter(name = "relocationHotelCostEqFilter", condition = "HOTEL_COST = :hotelCost"), @Filter(name = "relocationHotelCostNEqFilter", condition = "HOTEL_COST != :hotelCost"), @Filter(name = "relocationHotelCostInFilter", condition = "HOTEL_COST in (:hotelCost)"), @Filter(name = "relocationHotelCostBwFilter", condition = "HOTEL_COST > :hotelCost_MIN  AND HOTEL_COST < :hotelCost_MAX"), @Filter(name = "relocationHotelCostGtEqFilter", condition = "HOTEL_COST >= :hotelCost"), @Filter(name = "relocationHotelCostEqFilter", condition = "HOTEL_COST = :hotelCost"), @Filter(name = "relocationHotelLocationNInFilter", condition = "HOTEL_LOCATION not in (:hotelLocation)"), @Filter(name = "relocationHotelLocationEqFilter", condition = "HOTEL_LOCATION = :hotelLocation"), @Filter(name = "relocationHotelLocationNEqFilter", condition = "HOTEL_LOCATION != :hotelLocation"), @Filter(name = "relocationHotelLocationInFilter", condition = "HOTEL_LOCATION in (:hotelLocation)"), @Filter(name = "relocationHotelNameNInFilter", condition = "HOTEL_NAME not in (:hotelName)"), @Filter(name = "relocationHotelNameEqFilter", condition = "HOTEL_NAME = :hotelName"), @Filter(name = "relocationHotelNameNEqFilter", condition = "HOTEL_NAME != :hotelName"), @Filter(name = "relocationHotelNameInFilter", condition = "HOTEL_NAME in (:hotelName)"), @Filter(name = "relocationIdGtFilter", condition = "ID > :id"), @Filter(name = "relocationIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "relocationIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "relocationIdLtFilter", condition = "ID < :id"), @Filter(name = "relocationIdEqFilter", condition = "ID = :id"), @Filter(name = "relocationIdNEqFilter", condition = "ID != :id"), @Filter(name = "relocationIdInFilter", condition = "ID in (:id)"), @Filter(name = "relocationIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "relocationIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "relocationIdEqFilter", condition = "ID = :id"), @Filter(name = "relocationPreferredTravelDateGtFilter", condition = "PREFERRED_TRAVEL_DATE > (SELECT DATE_FORMAT(:preferredTravelDate, '%Y-%m-%d'))"), @Filter(name = "relocationPreferredTravelDateLtFilter", condition = "PREFERRED_TRAVEL_DATE < (SELECT DATE_FORMAT(:preferredTravelDate, '%Y-%m-%d'))"), @Filter(name = "relocationPreferredTravelDateBwFilter", condition = "PREFERRED_TRAVEL_DATE >(SELECT DATE_FORMAT(:preferredTravelDate_MIN, '%Y-%m-%d')) AND PREFERRED_TRAVEL_DATE <(SELECT DATE_FORMAT(:preferredTravelDate_MAX, '%Y-%m-%d'))"), @Filter(name = "relocationPreferredTravelTimeGtFilter", condition = "PREFERRED_TRAVEL_TIME > (SELECT DATE_FORMAT(:preferredTravelTime, '%Y-%m-%d'))"), @Filter(name = "relocationPreferredTravelTimeLtFilter", condition = "PREFERRED_TRAVEL_TIME < (SELECT DATE_FORMAT(:preferredTravelTime, '%Y-%m-%d'))"), @Filter(name = "relocationPreferredTravelTimeBwFilter", condition = "PREFERRED_TRAVEL_TIME >(SELECT DATE_FORMAT(:preferredTravelTime_MIN, '%Y-%m-%d')) AND PREFERRED_TRAVEL_TIME <(SELECT DATE_FORMAT(:preferredTravelTime_MAX, '%Y-%m-%d'))"), @Filter(name = "relocationRelocationStatusNInFilter", condition = "RELOCATION_STATUS not in (:relocationStatus)"), @Filter(name = "relocationRelocationStatusEqFilter", condition = "RELOCATION_STATUS = :relocationStatus"), @Filter(name = "relocationRelocationStatusNEqFilter", condition = "RELOCATION_STATUS != :relocationStatus"), @Filter(name = "relocationRelocationStatusInFilter", condition = "RELOCATION_STATUS in (:relocationStatus)"), @Filter(name = "relocationTransitAirportsNInFilter", condition = "TRANSIT_AIRPORTS not in (:transitAirports)"), @Filter(name = "relocationTransitAirportsEqFilter", condition = "TRANSIT_AIRPORTS = :transitAirports"), @Filter(name = "relocationTransitAirportsNEqFilter", condition = "TRANSIT_AIRPORTS != :transitAirports"), @Filter(name = "relocationTransitAirportsInFilter", condition = "TRANSIT_AIRPORTS in (:transitAirports)"), @Filter(name = "relocationTransitPeriodEndDateGtFilter", condition = "TRANSIT_PERIOD_END_DATE > (SELECT DATE_FORMAT(:transitPeriodEndDate, '%Y-%m-%d'))"), @Filter(name = "relocationTransitPeriodEndDateLtFilter", condition = "TRANSIT_PERIOD_END_DATE < (SELECT DATE_FORMAT(:transitPeriodEndDate, '%Y-%m-%d'))"), @Filter(name = "relocationTransitPeriodEndDateBwFilter", condition = "TRANSIT_PERIOD_END_DATE >(SELECT DATE_FORMAT(:transitPeriodEndDate_MIN, '%Y-%m-%d')) AND TRANSIT_PERIOD_END_DATE <(SELECT DATE_FORMAT(:transitPeriodEndDate_MAX, '%Y-%m-%d'))"), @Filter(name = "relocationTransitPeriodStartDateGtFilter", condition = "TRANSIT_PERIOD_START_DATE > (SELECT DATE_FORMAT(:transitPeriodStartDate, '%Y-%m-%d'))"), @Filter(name = "relocationTransitPeriodStartDateLtFilter", condition = "TRANSIT_PERIOD_START_DATE < (SELECT DATE_FORMAT(:transitPeriodStartDate, '%Y-%m-%d'))"), @Filter(name = "relocationTransitPeriodStartDateBwFilter", condition = "TRANSIT_PERIOD_START_DATE >(SELECT DATE_FORMAT(:transitPeriodStartDate_MIN, '%Y-%m-%d')) AND TRANSIT_PERIOD_START_DATE <(SELECT DATE_FORMAT(:transitPeriodStartDate_MAX, '%Y-%m-%d'))"), @Filter(name = "relocationCreatorUserFirstNameNInFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME not in (:firstName)"), @Filter(name = "relocationCreatorUserFirstNameEqFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME = :firstName)"), @Filter(name = "relocationCreatorUserFirstNameNEqFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME != :firstName)"), @Filter(name = "relocationCreatorUserFirstNameInFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME in (:firstName)"), @Filter(name = "relocationCreatorUserLastNameNInFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME not in (:lastName)"), @Filter(name = "relocationCreatorUserLastNameEqFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME = :lastName)"), @Filter(name = "relocationCreatorUserLastNameNEqFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME != :lastName)"), @Filter(name = "relocationCreatorUserLastNameInFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME in (:lastName)"), @Filter(name = "relocationCreatorUserMiddleNameNInFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME not in (:middleName)"), @Filter(name = "relocationCreatorUserMiddleNameEqFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME = :middleName)"), @Filter(name = "relocationCreatorUserMiddleNameNEqFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME != :middleName)"), @Filter(name = "relocationCreatorUserMiddleNameInFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME in (:middleName)"), @Filter(name = "relocationCreatorUserUserNameNInFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME not in (:userName)"), @Filter(name = "relocationCreatorUserUserNameEqFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME = :userName)"), @Filter(name = "relocationCreatorUserUserNameNEqFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME != :userName)"), @Filter(name = "relocationCreatorUserUserNameInFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME in (:userName)"), @Filter(name = "relocationCreatorUserUseridGtFilter", condition = "creator in (select USER.id from USER where USER.USERID > :userid)"), @Filter(name = "relocationCreatorUserUseridNInFilter", condition = "creator in (select USER.id from USER where USER.USERID not in (:userid)"), @Filter(name = "relocationCreatorUserUseridLtEqFilter", condition = "creator in (select USER.id from USER where USER.USERID <= :userid)"), @Filter(name = "relocationCreatorUserUseridLtFilter", condition = "creator in (select USER.id from USER where USER.USERID < :userid)"), @Filter(name = "relocationCreatorUserUseridEqFilter", condition = "creator in (select USER.id from USER where USER.USERID = :userid)"), @Filter(name = "relocationCreatorUserUseridNEqFilter", condition = "creator in (select USER.id from USER where USER.USERID != :userid)"), @Filter(name = "relocationCreatorUserUseridInFilter", condition = "creator in (select USER.id from USER where USER.USERID in (:userid)"), @Filter(name = "relocationCreatorUserUseridBwFilter", condition = "creator in (select USER.id from USER where USER.USERID > :userid_MIN  AND USER.USERID < :userid_MAX )"), @Filter(name = "relocationCreatorUserUseridGtEqFilter", condition = "creator in (select USER.id from USER where USER.USERID >= :userid)"), @Filter(name = "relocationCreatedTimeGtFilter", condition = "CREATED_TIME > (SELECT DATE_FORMAT(:createdTime, '%Y-%m-%d'))"), @Filter(name = "relocationCreatedTimeLtFilter", condition = "CREATED_TIME < (SELECT DATE_FORMAT(:createdTime, '%Y-%m-%d'))"), @Filter(name = "relocationCreatedTimeBwFilter", condition = "CREATED_TIME >(SELECT DATE_FORMAT(:createdTime_MIN, '%Y-%m-%d')) AND CREATED_TIME <(SELECT DATE_FORMAT(:createdTime_MAX, '%Y-%m-%d'))"), @Filter(name = "relocationLastModifierUserFirstNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME not in (:firstName)"), @Filter(name = "relocationLastModifierUserFirstNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME = :firstName)"), @Filter(name = "relocationLastModifierUserFirstNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME != :firstName)"), @Filter(name = "relocationLastModifierUserFirstNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME in (:firstName)"), @Filter(name = "relocationLastModifierUserLastNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME not in (:lastName)"), @Filter(name = "relocationLastModifierUserLastNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME = :lastName)"), @Filter(name = "relocationLastModifierUserLastNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME != :lastName)"), @Filter(name = "relocationLastModifierUserLastNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME in (:lastName)"), @Filter(name = "relocationLastModifierUserMiddleNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME not in (:middleName)"), @Filter(name = "relocationLastModifierUserMiddleNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME = :middleName)"), @Filter(name = "relocationLastModifierUserMiddleNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME != :middleName)"), @Filter(name = "relocationLastModifierUserMiddleNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME in (:middleName)"), @Filter(name = "relocationLastModifierUserUserNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME not in (:userName)"), @Filter(name = "relocationLastModifierUserUserNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME = :userName)"), @Filter(name = "relocationLastModifierUserUserNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME != :userName)"), @Filter(name = "relocationLastModifierUserUserNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME in (:userName)"), @Filter(name = "relocationLastModifierUserUseridGtFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID > :userid)"), @Filter(name = "relocationLastModifierUserUseridNInFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID not in (:userid)"), @Filter(name = "relocationLastModifierUserUseridLtEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID <= :userid)"), @Filter(name = "relocationLastModifierUserUseridLtFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID < :userid)"), @Filter(name = "relocationLastModifierUserUseridEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID = :userid)"), @Filter(name = "relocationLastModifierUserUseridNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID != :userid)"), @Filter(name = "relocationLastModifierUserUseridInFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID in (:userid)"), @Filter(name = "relocationLastModifierUserUseridBwFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID > :userid_MIN  AND USER.USERID < :userid_MAX )"), @Filter(name = "relocationLastModifierUserUseridGtEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID >= :userid)"), @Filter(name = "relocationModifiedTimeGtFilter", condition = "MODIFIED_TIME > (SELECT DATE_FORMAT(:modifiedTime, '%Y-%m-%d'))"), @Filter(name = "relocationModifiedTimeLtFilter", condition = "MODIFIED_TIME < (SELECT DATE_FORMAT(:modifiedTime, '%Y-%m-%d'))"), @Filter(name = "relocationModifiedTimeBwFilter", condition = "MODIFIED_TIME >(SELECT DATE_FORMAT(:modifiedTime_MIN, '%Y-%m-%d')) AND MODIFIED_TIME <(SELECT DATE_FORMAT(:modifiedTime_MAX, '%Y-%m-%d'))"), @Filter(name = "relocationCustomerIdGtFilter", condition = "CUSTOMER_ID > :customerId"), @Filter(name = "relocationCustomerIdNInFilter", condition = "CUSTOMER_ID not in (:customerId)"), @Filter(name = "relocationCustomerIdLtEqFilter", condition = "CUSTOMER_ID <= :customerId"), @Filter(name = "relocationCustomerIdLtFilter", condition = "CUSTOMER_ID < :customerId"), @Filter(name = "relocationCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId"), @Filter(name = "relocationCustomerIdNEqFilter", condition = "CUSTOMER_ID != :customerId"), @Filter(name = "relocationCustomerIdInFilter", condition = "CUSTOMER_ID in (:customerId)"), @Filter(name = "relocationCustomerIdBwFilter", condition = "CUSTOMER_ID > :customerId_MIN  AND CUSTOMER_ID < :customerId_MAX"), @Filter(name = "relocationCustomerIdGtEqFilter", condition = "CUSTOMER_ID >= :customerId"), @Filter(name = "relocationCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId") })
//@FilterDefs(value = { @FilterDef(name = "relocationAccommodationNInFilter", parameters = { @ParamDef(name = "accommodation", type = String.class) }), @FilterDef(name = "relocationAccommodationEqFilter", parameters = { @ParamDef(name = "accommodation", type = String.class) }), @FilterDef(name = "relocationAccommodationNEqFilter", parameters = { @ParamDef(name = "accommodation", type = String.class) }), @FilterDef(name = "relocationAccommodationInFilter", parameters = { @ParamDef(name = "accommodation", type = String.class) }), @FilterDef(name = "relocationAirlineNInFilter", parameters = { @ParamDef(name = "airline", type = String.class) }), @FilterDef(name = "relocationAirlineEqFilter", parameters = { @ParamDef(name = "airline", type = String.class) }), @FilterDef(name = "relocationAirlineNEqFilter", parameters = { @ParamDef(name = "airline", type = String.class) }), @FilterDef(name = "relocationAirlineInFilter", parameters = { @ParamDef(name = "airline", type = String.class) }), @FilterDef(name = "relocationArrivingAirportCityNInFilter", parameters = { @ParamDef(name = "arrivingAirportCity", type = String.class) }), @FilterDef(name = "relocationArrivingAirportCityEqFilter", parameters = { @ParamDef(name = "arrivingAirportCity", type = String.class) }), @FilterDef(name = "relocationArrivingAirportCityNEqFilter", parameters = { @ParamDef(name = "arrivingAirportCity", type = String.class) }), @FilterDef(name = "relocationArrivingAirportCityInFilter", parameters = { @ParamDef(name = "arrivingAirportCity", type = String.class) }), @FilterDef(name = "relocationArrivingCountryNInFilter", parameters = { @ParamDef(name = "arrivingCountry", type = String.class) }), @FilterDef(name = "relocationArrivingCountryEqFilter", parameters = { @ParamDef(name = "arrivingCountry", type = String.class) }), @FilterDef(name = "relocationArrivingCountryNEqFilter", parameters = { @ParamDef(name = "arrivingCountry", type = String.class) }), @FilterDef(name = "relocationArrivingCountryInFilter", parameters = { @ParamDef(name = "arrivingCountry", type = String.class) }), @FilterDef(name = "relocationAttachmentNInFilter", parameters = { @ParamDef(name = "attachment", type = String.class) }), @FilterDef(name = "relocationAttachmentEqFilter", parameters = { @ParamDef(name = "attachment", type = String.class) }), @FilterDef(name = "relocationAttachmentNEqFilter", parameters = { @ParamDef(name = "attachment", type = String.class) }), @FilterDef(name = "relocationAttachmentInFilter", parameters = { @ParamDef(name = "attachment", type = String.class) }), @FilterDef(name = "relocationCheckInTimeAndDateGtFilter", parameters = { @ParamDef(name = "checkInTimeAndDate", type = String.class) }), @FilterDef(name = "relocationCheckInTimeAndDateLtFilter", parameters = { @ParamDef(name = "checkInTimeAndDate", type = String.class) }), @FilterDef(name = "relocationCheckInTimeAndDateBwFilter", parameters = { @ParamDef(name = "checkInTimeAndDate_MIN", type = String.class), @ParamDef(name = "checkInTimeAndDate_MAX", type = String.class) }), @FilterDef(name = "relocationCheckOutTimeAndDateGtFilter", parameters = { @ParamDef(name = "checkOutTimeAndDate", type = String.class) }), @FilterDef(name = "relocationCheckOutTimeAndDateLtFilter", parameters = { @ParamDef(name = "checkOutTimeAndDate", type = String.class) }), @FilterDef(name = "relocationCheckOutTimeAndDateBwFilter", parameters = { @ParamDef(name = "checkOutTimeAndDate_MIN", type = String.class), @ParamDef(name = "checkOutTimeAndDate_MAX", type = String.class) }), @FilterDef(name = "relocationCommentNInFilter", parameters = { @ParamDef(name = "comment", type = String.class) }), @FilterDef(name = "relocationCommentEqFilter", parameters = { @ParamDef(name = "comment", type = String.class) }), @FilterDef(name = "relocationCommentNEqFilter", parameters = { @ParamDef(name = "comment", type = String.class) }), @FilterDef(name = "relocationCommentInFilter", parameters = { @ParamDef(name = "comment", type = String.class) }), @FilterDef(name = "relocationDeletedEqFilter", parameters = { @ParamDef(name = "deleted", type = boolean.class) }), @FilterDef(name = "relocationDeletedNEqFilter", parameters = { @ParamDef(name = "deleted", type = boolean.class) }), @FilterDef(name = "relocationDepartingAirportCityNInFilter", parameters = { @ParamDef(name = "departingAirportCity", type = String.class) }), @FilterDef(name = "relocationDepartingAirportCityEqFilter", parameters = { @ParamDef(name = "departingAirportCity", type = String.class) }), @FilterDef(name = "relocationDepartingAirportCityNEqFilter", parameters = { @ParamDef(name = "departingAirportCity", type = String.class) }), @FilterDef(name = "relocationDepartingAirportCityInFilter", parameters = { @ParamDef(name = "departingAirportCity", type = String.class) }), @FilterDef(name = "relocationDepartingCountryNInFilter", parameters = { @ParamDef(name = "departingCountry", type = String.class) }), @FilterDef(name = "relocationDepartingCountryEqFilter", parameters = { @ParamDef(name = "departingCountry", type = String.class) }), @FilterDef(name = "relocationDepartingCountryNEqFilter", parameters = { @ParamDef(name = "departingCountry", type = String.class) }), @FilterDef(name = "relocationDepartingCountryInFilter", parameters = { @ParamDef(name = "departingCountry", type = String.class) }), @FilterDef(name = "relocationEligibleTicketClassNInFilter", parameters = { @ParamDef(name = "eligibleTicketClass", type = String.class) }), @FilterDef(name = "relocationEligibleTicketClassEqFilter", parameters = { @ParamDef(name = "eligibleTicketClass", type = String.class) }), @FilterDef(name = "relocationEligibleTicketClassNEqFilter", parameters = { @ParamDef(name = "eligibleTicketClass", type = String.class) }), @FilterDef(name = "relocationEligibleTicketClassInFilter", parameters = { @ParamDef(name = "eligibleTicketClass", type = String.class) }), @FilterDef(name = "relocationEmployeeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationEmployeeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationEmployeeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationEmployeeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationEmployeeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationEmployeeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationEmployeeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationEmployeeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "relocationEmployeeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationEmployeeName2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "relocationEmployeeName2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "relocationEmployeeName2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "relocationEmployeeName2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "relocationEmployeeName1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "relocationEmployeeName1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "relocationEmployeeName1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "relocationEmployeeName1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "relocationFlightCostGtFilter", parameters = { @ParamDef(name = "flightCost", type = Double.class) }), @FilterDef(name = "relocationFlightCostNInFilter", parameters = { @ParamDef(name = "flightCost", type = Double.class) }), @FilterDef(name = "relocationFlightCostLtEqFilter", parameters = { @ParamDef(name = "flightCost", type = Double.class) }), @FilterDef(name = "relocationFlightCostLtFilter", parameters = { @ParamDef(name = "flightCost", type = Double.class) }), @FilterDef(name = "relocationFlightCostEqFilter", parameters = { @ParamDef(name = "flightCost", type = Double.class) }), @FilterDef(name = "relocationFlightCostNEqFilter", parameters = { @ParamDef(name = "flightCost", type = Double.class) }), @FilterDef(name = "relocationFlightCostInFilter", parameters = { @ParamDef(name = "flightCost", type = Double.class) }), @FilterDef(name = "relocationFlightCostBwFilter", parameters = { @ParamDef(name = "flightCost_MIN", type = Double.class), @ParamDef(name = "flightCost_MAX", type = Double.class) }), @FilterDef(name = "relocationFlightCostGtEqFilter", parameters = { @ParamDef(name = "flightCost", type = Double.class) }), @FilterDef(name = "relocationFlightDurationNInFilter", parameters = { @ParamDef(name = "flightDuration", type = String.class) }), @FilterDef(name = "relocationFlightDurationEqFilter", parameters = { @ParamDef(name = "flightDuration", type = String.class) }), @FilterDef(name = "relocationFlightDurationNEqFilter", parameters = { @ParamDef(name = "flightDuration", type = String.class) }), @FilterDef(name = "relocationFlightDurationInFilter", parameters = { @ParamDef(name = "flightDuration", type = String.class) }), @FilterDef(name = "relocationFlightTimeGtFilter", parameters = { @ParamDef(name = "flightTime", type = String.class) }), @FilterDef(name = "relocationFlightTimeLtFilter", parameters = { @ParamDef(name = "flightTime", type = String.class) }), @FilterDef(name = "relocationFlightTimeBwFilter", parameters = { @ParamDef(name = "flightTime_MIN", type = String.class), @ParamDef(name = "flightTime_MAX", type = String.class) }), @FilterDef(name = "relocationHotelCostGtFilter", parameters = { @ParamDef(name = "hotelCost", type = Double.class) }), @FilterDef(name = "relocationHotelCostNInFilter", parameters = { @ParamDef(name = "hotelCost", type = Double.class) }), @FilterDef(name = "relocationHotelCostLtEqFilter", parameters = { @ParamDef(name = "hotelCost", type = Double.class) }), @FilterDef(name = "relocationHotelCostLtFilter", parameters = { @ParamDef(name = "hotelCost", type = Double.class) }), @FilterDef(name = "relocationHotelCostEqFilter", parameters = { @ParamDef(name = "hotelCost", type = Double.class) }), @FilterDef(name = "relocationHotelCostNEqFilter", parameters = { @ParamDef(name = "hotelCost", type = Double.class) }), @FilterDef(name = "relocationHotelCostInFilter", parameters = { @ParamDef(name = "hotelCost", type = Double.class) }), @FilterDef(name = "relocationHotelCostBwFilter", parameters = { @ParamDef(name = "hotelCost_MIN", type = Double.class), @ParamDef(name = "hotelCost_MAX", type = Double.class) }), @FilterDef(name = "relocationHotelCostGtEqFilter", parameters = { @ParamDef(name = "hotelCost", type = Double.class) }), @FilterDef(name = "relocationHotelLocationNInFilter", parameters = { @ParamDef(name = "hotelLocation", type = String.class) }), @FilterDef(name = "relocationHotelLocationEqFilter", parameters = { @ParamDef(name = "hotelLocation", type = String.class) }), @FilterDef(name = "relocationHotelLocationNEqFilter", parameters = { @ParamDef(name = "hotelLocation", type = String.class) }), @FilterDef(name = "relocationHotelLocationInFilter", parameters = { @ParamDef(name = "hotelLocation", type = String.class) }), @FilterDef(name = "relocationHotelNameNInFilter", parameters = { @ParamDef(name = "hotelName", type = String.class) }), @FilterDef(name = "relocationHotelNameEqFilter", parameters = { @ParamDef(name = "hotelName", type = String.class) }), @FilterDef(name = "relocationHotelNameNEqFilter", parameters = { @ParamDef(name = "hotelName", type = String.class) }), @FilterDef(name = "relocationHotelNameInFilter", parameters = { @ParamDef(name = "hotelName", type = String.class) }), @FilterDef(name = "relocationIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "relocationIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "relocationPreferredTravelDateGtFilter", parameters = { @ParamDef(name = "preferredTravelDate", type = String.class) }), @FilterDef(name = "relocationPreferredTravelDateLtFilter", parameters = { @ParamDef(name = "preferredTravelDate", type = String.class) }), @FilterDef(name = "relocationPreferredTravelDateBwFilter", parameters = { @ParamDef(name = "preferredTravelDate_MIN", type = String.class), @ParamDef(name = "preferredTravelDate_MAX", type = String.class) }), @FilterDef(name = "relocationPreferredTravelTimeGtFilter", parameters = { @ParamDef(name = "preferredTravelTime", type = String.class) }), @FilterDef(name = "relocationPreferredTravelTimeLtFilter", parameters = { @ParamDef(name = "preferredTravelTime", type = String.class) }), @FilterDef(name = "relocationPreferredTravelTimeBwFilter", parameters = { @ParamDef(name = "preferredTravelTime_MIN", type = String.class), @ParamDef(name = "preferredTravelTime_MAX", type = String.class) }), @FilterDef(name = "relocationRelocationStatusNInFilter", parameters = { @ParamDef(name = "relocationStatus", type = String.class) }), @FilterDef(name = "relocationRelocationStatusEqFilter", parameters = { @ParamDef(name = "relocationStatus", type = String.class) }), @FilterDef(name = "relocationRelocationStatusNEqFilter", parameters = { @ParamDef(name = "relocationStatus", type = String.class) }), @FilterDef(name = "relocationRelocationStatusInFilter", parameters = { @ParamDef(name = "relocationStatus", type = String.class) }), @FilterDef(name = "relocationTransitAirportsNInFilter", parameters = { @ParamDef(name = "transitAirports", type = String.class) }), @FilterDef(name = "relocationTransitAirportsEqFilter", parameters = { @ParamDef(name = "transitAirports", type = String.class) }), @FilterDef(name = "relocationTransitAirportsNEqFilter", parameters = { @ParamDef(name = "transitAirports", type = String.class) }), @FilterDef(name = "relocationTransitAirportsInFilter", parameters = { @ParamDef(name = "transitAirports", type = String.class) }), @FilterDef(name = "relocationTransitPeriodEndDateGtFilter", parameters = { @ParamDef(name = "transitPeriodEndDate", type = String.class) }), @FilterDef(name = "relocationTransitPeriodEndDateLtFilter", parameters = { @ParamDef(name = "transitPeriodEndDate", type = String.class) }), @FilterDef(name = "relocationTransitPeriodEndDateBwFilter", parameters = { @ParamDef(name = "transitPeriodEndDate_MIN", type = String.class), @ParamDef(name = "transitPeriodEndDate_MAX", type = String.class) }), @FilterDef(name = "relocationTransitPeriodStartDateGtFilter", parameters = { @ParamDef(name = "transitPeriodStartDate", type = String.class) }), @FilterDef(name = "relocationTransitPeriodStartDateLtFilter", parameters = { @ParamDef(name = "transitPeriodStartDate", type = String.class) }), @FilterDef(name = "relocationTransitPeriodStartDateBwFilter", parameters = { @ParamDef(name = "transitPeriodStartDate_MIN", type = String.class), @ParamDef(name = "transitPeriodStartDate_MAX", type = String.class) }), @FilterDef(name = "relocationCreatorUserFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "relocationCreatorUserFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "relocationCreatorUserFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "relocationCreatorUserFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "relocationCreatorUserLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "relocationCreatorUserLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "relocationCreatorUserLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "relocationCreatorUserLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "relocationCreatorUserMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "relocationCreatorUserMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "relocationCreatorUserMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "relocationCreatorUserMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "relocationCreatorUserUserNameNInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "relocationCreatorUserUserNameEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "relocationCreatorUserUserNameNEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "relocationCreatorUserUserNameInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "relocationCreatorUserUseridGtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationCreatorUserUseridNInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationCreatorUserUseridLtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationCreatorUserUseridLtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationCreatorUserUseridEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationCreatorUserUseridNEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationCreatorUserUseridInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationCreatorUserUseridBwFilter", parameters = { @ParamDef(name = "userid_MIN", type = Integer.class), @ParamDef(name = "userid_MAX", type = Integer.class) }), @FilterDef(name = "relocationCreatorUserUseridGtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationCreatedTimeGtFilter", parameters = { @ParamDef(name = "createdTime", type = String.class) }), @FilterDef(name = "relocationCreatedTimeLtFilter", parameters = { @ParamDef(name = "createdTime", type = String.class) }), @FilterDef(name = "relocationCreatedTimeBwFilter", parameters = { @ParamDef(name = "createdTime_MIN", type = String.class), @ParamDef(name = "createdTime_MAX", type = String.class) }), @FilterDef(name = "relocationLastModifierUserFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserUserNameNInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserUserNameEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserUserNameNEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserUserNameInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "relocationLastModifierUserUseridGtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationLastModifierUserUseridNInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationLastModifierUserUseridLtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationLastModifierUserUseridLtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationLastModifierUserUseridEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationLastModifierUserUseridNEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationLastModifierUserUseridInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationLastModifierUserUseridBwFilter", parameters = { @ParamDef(name = "userid_MIN", type = Integer.class), @ParamDef(name = "userid_MAX", type = Integer.class) }), @FilterDef(name = "relocationLastModifierUserUseridGtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "relocationModifiedTimeGtFilter", parameters = { @ParamDef(name = "modifiedTime", type = String.class) }), @FilterDef(name = "relocationModifiedTimeLtFilter", parameters = { @ParamDef(name = "modifiedTime", type = String.class) }), @FilterDef(name = "relocationModifiedTimeBwFilter", parameters = { @ParamDef(name = "modifiedTime_MIN", type = String.class), @ParamDef(name = "modifiedTime_MAX", type = String.class) }), @FilterDef(name = "relocationCustomerIdGtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "relocationCustomerIdNInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "relocationCustomerIdLtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "relocationCustomerIdLtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "relocationCustomerIdEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "relocationCustomerIdNEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "relocationCustomerIdInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "relocationCustomerIdBwFilter", parameters = { @ParamDef(name = "customerId_MIN", type = Integer.class), @ParamDef(name = "customerId_MAX", type = Integer.class) }), @FilterDef(name = "relocationCustomerIdGtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }) })
public class Relocation extends BaseEntitySaaS {

	@Basic
	@Column(name = "ACCOMMODATION", columnDefinition = "ENUM('Yes','No')")
	private String accommodation;

	@Size(max = 100)
	@Basic
	@Column(length = 100)
	private String airline;

	@Size(max = 100)
	@Basic
	@Column(name = "ARRIVING_AIRPORT_CITY", length = 100)
	private String arrivingAirportCity;

	@Size(max = 100)
	@Basic
	@Column(name = "ARRIVING_COUNTRY", length = 100)
	private String arrivingCountry;

	@Size(max = 200)
	@Basic
	@Column(length = 200)
	private String attachment;

	@Basic
	@Column(name = "CHECK_IN_TIME_AND_DATE", length = 19)
	private Date checkInTimeAndDate;

	@Basic
	@Column(name = "CHECK_OUT_TIME_AND_DATE", length = 19)
	private Date checkOutTimeAndDate;

	@Basic
	@Column(columnDefinition = "LONGTEXT")
	private String comment;

	@Basic
	private boolean deleted;

	@Size(max = 100)
	@Basic
	@Column(name = "DEPARTING_AIRPORT_CITY", length = 100)
	private String departingAirportCity;

	@Size(max = 100)
	@Basic
	@Column(name = "DEPARTING_COUNTRY", length = 100)
	private String departingCountry;

	@Basic
	@Column(name = "ELIGIBLE_TICKET_CLASS", columnDefinition = "ENUM('Economy','Business','First')")
	private String eligibleTicketClass;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "EMPLOYEE_ID", columnDefinition = "INT")
	private Employee employee;

	@Basic
	@Column(name = "FLIGHT_COST")
	private Double flightCost;

	@Size(max = 50)
	@Basic
	@Column(name = "FLIGHT_DURATION", length = 50)
	private String flightDuration;

	@Basic
	@Column(name = "FLIGHT_TIME", length = 19)
	private Date flightTime;

	@Basic
	@Column(name = "HOTEL_COST")
	private Double hotelCost;

	@Size(max = 255)
	@Basic
	@Column(name = "HOTEL_LOCATION")
	private String hotelLocation;

	@Size(max = 255)
	@Basic
	@Column(name = "HOTEL_NAME")
	private String hotelName;

	@GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
	@Id
	@Column(columnDefinition = "INT")
	private Integer id;

	@Basic
	@Column(name = "PREFERRED_TRAVEL_DATE", length = 19)
	private Date preferredTravelDate;

	@Basic
	@Column(name = "PREFERRED_TRAVEL_TIME", length = 19)
	private Date preferredTravelTime;

	@Basic
	@Column(name = "RELOCATION_STATUS", columnDefinition = "ENUM('Planned','Scheduled','In Progress','Completed','Cancelled')")
	private String relocationStatus;

	@Basic
	@Column(name = "TRANSIT_AIRPORTS", columnDefinition = "LONGTEXT")
	private String transitAirports;

	@Basic
	@Column(name = "TRANSIT_PERIOD_END_DATE", length = 19)
	private Date transitPeriodEndDate;

	@Basic
	@Column(name = "TRANSIT_PERIOD_START_DATE", length = 19)
	private Date transitPeriodStartDate;
	
	@Basic
	@Column(name = "DISTANCE")
	private Integer distance;
	
	@Basic
	@Column(name = "NUMBER_OF_TRAVELLERS")
	private Integer numberOfTravellers;
	

	public Relocation() {
	}

	public Relocation(Integer id) {
		this.id = id;
	}

	public String getAccommodation() {
		return accommodation;
	}

	public void setAccommodation(String accommodation) {
		this.accommodation = accommodation;
	}

	public String getAirline() {
		return airline;
	}

	public void setAirline(String airline) {
		this.airline = airline;
	}

	public String getArrivingAirportCity() {
		return arrivingAirportCity;
	}

	public void setArrivingAirportCity(String arrivingAirportCity) {
		this.arrivingAirportCity = arrivingAirportCity;
	}

	public String getArrivingCountry() {
		return arrivingCountry;
	}

	public void setArrivingCountry(String arrivingCountry) {
		this.arrivingCountry = arrivingCountry;
	}

	public String getAttachment() {
		return attachment;
	}

	public void setAttachment(String attachment) {
		this.attachment = attachment;
	}

	public Date getCheckInTimeAndDate() {
		return checkInTimeAndDate;
	}

	public void setCheckInTimeAndDate(Date checkInTimeAndDate) {
		this.checkInTimeAndDate = checkInTimeAndDate;
	}

	public Date getCheckOutTimeAndDate() {
		return checkOutTimeAndDate;
	}

	public void setCheckOutTimeAndDate(Date checkOutTimeAndDate) {
		this.checkOutTimeAndDate = checkOutTimeAndDate;
	}

	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	public boolean isDeleted() {
		return deleted;
	}

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	public String getDepartingAirportCity() {
		return departingAirportCity;
	}

	public void setDepartingAirportCity(String departingAirportCity) {
		this.departingAirportCity = departingAirportCity;
	}

	public String getDepartingCountry() {
		return departingCountry;
	}

	public void setDepartingCountry(String departingCountry) {
		this.departingCountry = departingCountry;
	}

	public String getEligibleTicketClass() {
		return eligibleTicketClass;
	}

	public void setEligibleTicketClass(String eligibleTicketClass) {
		this.eligibleTicketClass = eligibleTicketClass;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	public Double getFlightCost() {
		return flightCost;
	}

	public void setFlightCost(Double flightCost) {
		this.flightCost = flightCost;
	}

	public String getFlightDuration() {
		return flightDuration;
	}

	public void setFlightDuration(String flightDuration) {
		this.flightDuration = flightDuration;
	}

	public Date getFlightTime() {
		return flightTime;
	}

	public void setFlightTime(Date flightTime) {
		this.flightTime = flightTime;
	}

	public Double getHotelCost() {
		return hotelCost;
	}

	public void setHotelCost(Double hotelCost) {
		this.hotelCost = hotelCost;
	}

	public String getHotelLocation() {
		return hotelLocation;
	}

	public void setHotelLocation(String hotelLocation) {
		this.hotelLocation = hotelLocation;
	}

	public String getHotelName() {
		return hotelName;
	}

	public void setHotelName(String hotelName) {
		this.hotelName = hotelName;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Date getPreferredTravelDate() {
		return preferredTravelDate;
	}

	public void setPreferredTravelDate(Date preferredTravelDate) {
		this.preferredTravelDate = preferredTravelDate;
	}

	public Date getPreferredTravelTime() {
		return preferredTravelTime;
	}

	public void setPreferredTravelTime(Date preferredTravelTime) {
		this.preferredTravelTime = preferredTravelTime;
	}

	public String getRelocationStatus() {
		return relocationStatus;
	}

	public void setRelocationStatus(String relocationStatus) {
		this.relocationStatus = relocationStatus;
	}

	public String getTransitAirports() {
		return transitAirports;
	}

	public void setTransitAirports(String transitAirports) {
		this.transitAirports = transitAirports;
	}

	public Date getTransitPeriodEndDate() {
		return transitPeriodEndDate;
	}

	public void setTransitPeriodEndDate(Date transitPeriodEndDate) {
		this.transitPeriodEndDate = transitPeriodEndDate;
	}

	public Date getTransitPeriodStartDate() {
		return transitPeriodStartDate;
	}

	public void setTransitPeriodStartDate(Date transitPeriodStartDate) {
		this.transitPeriodStartDate = transitPeriodStartDate;
	}

	public Integer getDistance() {
		return distance;
	}

	public void setDistance(Integer distance) {
		this.distance = distance;
	}

	public Integer getNumberOfTravellers() {
		return numberOfTravellers;
	}

	public void setNumberOfTravellers(Integer numberOfTravellers) {
		this.numberOfTravellers = numberOfTravellers;
	}
	
	
}

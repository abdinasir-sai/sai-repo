package com.nouros.hrms.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "FEEDBACK")
@Filters(value = { @Filter(name = "feedbackCommentsNInFilter", condition = "COMMENTS not in (:comments)"), @Filter(name = "feedbackCommentsEqFilter", condition = "COMMENTS = :comments"), @Filter(name = "feedbackCommentsNEqFilter", condition = "COMMENTS != :comments"), @Filter(name = "feedbackCommentsInFilter", condition = "COMMENTS in (:comments)"), @Filter(name = "feedbackFeedbackDateGtFilter", condition = "FEEDBACK_DATE > (SELECT DATE_FORMAT(:feedbackDate, '%Y-%m-%d'))"), @Filter(name = "feedbackFeedbackDateLtFilter", condition = "FEEDBACK_DATE < (SELECT DATE_FORMAT(:feedbackDate, '%Y-%m-%d'))"), @Filter(name = "feedbackFeedbackDateBwFilter", condition = "FEEDBACK_DATE >(SELECT DATE_FORMAT(:feedbackDate_MIN, '%Y-%m-%d')) AND FEEDBACK_DATE <(SELECT DATE_FORMAT(:feedbackDate_MAX, '%Y-%m-%d'))"), @Filter(name = "feedbackFeedbackTypeNInFilter", condition = "FEEDBACK_TYPE not in (:feedbackType)"), @Filter(name = "feedbackFeedbackTypeEqFilter", condition = "FEEDBACK_TYPE = :feedbackType"), @Filter(name = "feedbackFeedbackTypeNEqFilter", condition = "FEEDBACK_TYPE != :feedbackType"), @Filter(name = "feedbackFeedbackTypeInFilter", condition = "FEEDBACK_TYPE in (:feedbackType)"), @Filter(name = "feedbackIdGtFilter", condition = "ID > :id"), @Filter(name = "feedbackIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "feedbackIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "feedbackIdLtFilter", condition = "ID < :id"), @Filter(name = "feedbackIdEqFilter", condition = "ID = :id"), @Filter(name = "feedbackIdNEqFilter", condition = "ID != :id"), @Filter(name = "feedbackIdInFilter", condition = "ID in (:id)"), @Filter(name = "feedbackIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "feedbackIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "feedbackIdEqFilter", condition = "ID = :id"), @Filter(name = "feedbackWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "feedbackWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "feedbackWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "feedbackWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "feedbackWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "feedbackWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "feedbackWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "feedbackWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "feedbackWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "feedbackWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "feedbackCommentsNInFilter", parameters = { @ParamDef(name = "comments", type = String.class) }), @FilterDef(name = "feedbackCommentsEqFilter", parameters = { @ParamDef(name = "comments", type = String.class) }), @FilterDef(name = "feedbackCommentsNEqFilter", parameters = { @ParamDef(name = "comments", type = String.class) }), @FilterDef(name = "feedbackCommentsInFilter", parameters = { @ParamDef(name = "comments", type = String.class) }), @FilterDef(name = "feedbackFeedbackDateGtFilter", parameters = { @ParamDef(name = "feedbackDate", type = String.class) }), @FilterDef(name = "feedbackFeedbackDateLtFilter", parameters = { @ParamDef(name = "feedbackDate", type = String.class) }), @FilterDef(name = "feedbackFeedbackDateBwFilter", parameters = { @ParamDef(name = "feedbackDate_MIN", type = String.class), @ParamDef(name = "feedbackDate_MAX", type = String.class) }), @FilterDef(name = "feedbackFeedbackTypeNInFilter", parameters = { @ParamDef(name = "feedbackType", type = String.class) }), @FilterDef(name = "feedbackFeedbackTypeEqFilter", parameters = { @ParamDef(name = "feedbackType", type = String.class) }), @FilterDef(name = "feedbackFeedbackTypeNEqFilter", parameters = { @ParamDef(name = "feedbackType", type = String.class) }), @FilterDef(name = "feedbackFeedbackTypeInFilter", parameters = { @ParamDef(name = "feedbackType", type = String.class) }), @FilterDef(name = "feedbackIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "feedbackIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "feedbackIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "feedbackIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "feedbackIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "feedbackIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "feedbackIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "feedbackIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "feedbackIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "feedbackWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "feedbackWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "feedbackWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "feedbackWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "feedbackWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "feedbackWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "feedbackWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "feedbackWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "feedbackWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Feedback extends BaseEntitySaaS{

    @Size(max = 255)
    @Basic
    private String comments;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.EmployeeFeedbackMapping.class, mappedBy = "feedback", cascade = CascadeType.MERGE)
    private Set<EmployeeFeedbackMapping> employeeFeedbackMappings = new HashSet<>();

    @Basic
    @Column(name = "FEEDBACK_DATE", length = 19)
    private Date feedbackDate;

    @Basic
    @Column(name = "FEEDBACK_TYPE", columnDefinition = "ENUM", length = 12)
    private String feedbackType;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public Feedback() {
    }

    public Feedback(Integer id) {
        this.id = id;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public Set<EmployeeFeedbackMapping> getEmployeeFeedbackMappings() {
        return employeeFeedbackMappings;
    }

    public void setEmployeeFeedbackMappings(Set<EmployeeFeedbackMapping> employeeFeedbackMappings) {
        this.employeeFeedbackMappings = employeeFeedbackMappings;
    }

    public Date getFeedbackDate() {
        return feedbackDate;
    }

    public void setFeedbackDate(Date feedbackDate) {
        this.feedbackDate = feedbackDate;
    }

    public String getFeedbackType() {
        return feedbackType;
    }

    public void setFeedbackType(String feedbackType) {
        this.feedbackType = feedbackType;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

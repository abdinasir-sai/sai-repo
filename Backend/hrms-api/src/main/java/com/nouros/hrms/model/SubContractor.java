package com.nouros.hrms.model;

import java.util.Date;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "SUB_CONTRACTOR")
@Filters(value = { @Filter(name = "subContractorAddressNInFilter", condition = "ADDRESS not in (:address)"), @Filter(name = "subContractorAddressEqFilter", condition = "ADDRESS = :address"), @Filter(name = "subContractorAddressNEqFilter", condition = "ADDRESS != :address"), @Filter(name = "subContractorAddressInFilter", condition = "ADDRESS in (:address)"), @Filter(name = "subContractorBusinessNameNInFilter", condition = "BUSINESS_NAME not in (:businessName)"), @Filter(name = "subContractorBusinessNameEqFilter", condition = "BUSINESS_NAME = :businessName"), @Filter(name = "subContractorBusinessNameNEqFilter", condition = "BUSINESS_NAME != :businessName"), @Filter(name = "subContractorBusinessNameInFilter", condition = "BUSINESS_NAME in (:businessName)"), @Filter(name = "subContractorCityNInFilter", condition = "CITY not in (:city)"), @Filter(name = "subContractorCityEqFilter", condition = "CITY = :city"), @Filter(name = "subContractorCityNEqFilter", condition = "CITY != :city"), @Filter(name = "subContractorCityInFilter", condition = "CITY in (:city)"), @Filter(name = "subContractorCodeNInFilter", condition = "CODE not in (:code)"), @Filter(name = "subContractorCodeEqFilter", condition = "CODE = :code"), @Filter(name = "subContractorCodeNEqFilter", condition = "CODE != :code"), @Filter(name = "subContractorCodeInFilter", condition = "CODE in (:code)"), @Filter(name = "subContractorContractEndDateGtFilter", condition = "CONTRACT_END_DATE > (SELECT DATE_FORMAT(:contractEndDate, '%Y-%m-%d'))"), @Filter(name = "subContractorContractEndDateLtFilter", condition = "CONTRACT_END_DATE < (SELECT DATE_FORMAT(:contractEndDate, '%Y-%m-%d'))"), @Filter(name = "subContractorContractEndDateBwFilter", condition = "CONTRACT_END_DATE >(SELECT DATE_FORMAT(:contractEndDate_MIN, '%Y-%m-%d')) AND CONTRACT_END_DATE <(SELECT DATE_FORMAT(:contractEndDate_MAX, '%Y-%m-%d'))"), @Filter(name = "subContractorContractStartDateGtFilter", condition = "CONTRACT_START_DATE > (SELECT DATE_FORMAT(:contractStartDate, '%Y-%m-%d'))"), @Filter(name = "subContractorContractStartDateLtFilter", condition = "CONTRACT_START_DATE < (SELECT DATE_FORMAT(:contractStartDate, '%Y-%m-%d'))"), @Filter(name = "subContractorContractStartDateBwFilter", condition = "CONTRACT_START_DATE >(SELECT DATE_FORMAT(:contractStartDate_MIN, '%Y-%m-%d')) AND CONTRACT_START_DATE <(SELECT DATE_FORMAT(:contractStartDate_MAX, '%Y-%m-%d'))"), @Filter(name = "subContractorCountryNInFilter", condition = "COUNTRY not in (:country)"), @Filter(name = "subContractorCountryEqFilter", condition = "COUNTRY = :country"), @Filter(name = "subContractorCountryNEqFilter", condition = "COUNTRY != :country"), @Filter(name = "subContractorCountryInFilter", condition = "COUNTRY in (:country)"), @Filter(name = "subContractorEmailIdNInFilter", condition = "EMAIL_ID not in (:emailId)"), @Filter(name = "subContractorEmailIdEqFilter", condition = "EMAIL_ID = :emailId"), @Filter(name = "subContractorEmailIdNEqFilter", condition = "EMAIL_ID != :emailId"), @Filter(name = "subContractorEmailIdInFilter", condition = "EMAIL_ID in (:emailId)"), @Filter(name = "subContractorIdGtFilter", condition = "ID > :id"), @Filter(name = "subContractorIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "subContractorIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "subContractorIdLtFilter", condition = "ID < :id"), @Filter(name = "subContractorIdEqFilter", condition = "ID = :id"), @Filter(name = "subContractorIdNEqFilter", condition = "ID != :id"), @Filter(name = "subContractorIdInFilter", condition = "ID in (:id)"), @Filter(name = "subContractorIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "subContractorIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "subContractorIdEqFilter", condition = "ID = :id"), @Filter(name = "subContractorNameNInFilter", condition = "NAME not in (:name)"), @Filter(name = "subContractorNameEqFilter", condition = "NAME = :name"), @Filter(name = "subContractorNameNEqFilter", condition = "NAME != :name"), @Filter(name = "subContractorNameInFilter", condition = "NAME in (:name)"), @Filter(name = "subContractorPaymentTermsNInFilter", condition = "PAYMENT_TERMS not in (:paymentTerms)"), @Filter(name = "subContractorPaymentTermsEqFilter", condition = "PAYMENT_TERMS = :paymentTerms"), @Filter(name = "subContractorPaymentTermsNEqFilter", condition = "PAYMENT_TERMS != :paymentTerms"), @Filter(name = "subContractorPaymentTermsInFilter", condition = "PAYMENT_TERMS in (:paymentTerms)"), @Filter(name = "subContractorPhoneNInFilter", condition = "PHONE not in (:phone)"), @Filter(name = "subContractorPhoneEqFilter", condition = "PHONE = :phone"), @Filter(name = "subContractorPhoneNEqFilter", condition = "PHONE != :phone"), @Filter(name = "subContractorPhoneInFilter", condition = "PHONE in (:phone)"), @Filter(name = "subContractorStateNInFilter", condition = "STATE not in (:state)"), @Filter(name = "subContractorStateEqFilter", condition = "STATE = :state"), @Filter(name = "subContractorStateNEqFilter", condition = "STATE != :state"), @Filter(name = "subContractorStateInFilter", condition = "STATE in (:state)"), @Filter(name = "subContractorText1NInFilter", condition = "TEXT1 not in (:text1)"), @Filter(name = "subContractorText1EqFilter", condition = "TEXT1 = :text1"), @Filter(name = "subContractorText1NEqFilter", condition = "TEXT1 != :text1"), @Filter(name = "subContractorText1InFilter", condition = "TEXT1 in (:text1)"), @Filter(name = "subContractorText2NInFilter", condition = "TEXT2 not in (:text2)"), @Filter(name = "subContractorText2EqFilter", condition = "TEXT2 = :text2"), @Filter(name = "subContractorText2NEqFilter", condition = "TEXT2 != :text2"), @Filter(name = "subContractorText2InFilter", condition = "TEXT2 in (:text2)"), @Filter(name = "subContractorText3NInFilter", condition = "TEXT3 not in (:text3)"), @Filter(name = "subContractorText3EqFilter", condition = "TEXT3 = :text3"), @Filter(name = "subContractorText3NEqFilter", condition = "TEXT3 != :text3"), @Filter(name = "subContractorText3InFilter", condition = "TEXT3 in (:text3)"), @Filter(name = "subContractorTotalAnnualCostGtFilter", condition = "TOTAL_ANNUAL_COST > :totalAnnualCost"), @Filter(name = "subContractorTotalAnnualCostNInFilter", condition = "TOTAL_ANNUAL_COST not in (:totalAnnualCost)"), @Filter(name = "subContractorTotalAnnualCostLtEqFilter", condition = "TOTAL_ANNUAL_COST <= :totalAnnualCost"), @Filter(name = "subContractorTotalAnnualCostLtFilter", condition = "TOTAL_ANNUAL_COST < :totalAnnualCost"), @Filter(name = "subContractorTotalAnnualCostEqFilter", condition = "TOTAL_ANNUAL_COST = :totalAnnualCost"), @Filter(name = "subContractorTotalAnnualCostNEqFilter", condition = "TOTAL_ANNUAL_COST != :totalAnnualCost"), @Filter(name = "subContractorTotalAnnualCostInFilter", condition = "TOTAL_ANNUAL_COST in (:totalAnnualCost)"), @Filter(name = "subContractorTotalAnnualCostBwFilter", condition = "TOTAL_ANNUAL_COST > :totalAnnualCost_MIN  AND TOTAL_ANNUAL_COST < :totalAnnualCost_MAX"), @Filter(name = "subContractorTotalAnnualCostGtEqFilter", condition = "TOTAL_ANNUAL_COST >= :totalAnnualCost"), @Filter(name = "subContractorTotalAnnualCostEqFilter", condition = "TOTAL_ANNUAL_COST = :totalAnnualCost"), @Filter(name = "subContractorWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "subContractorWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "subContractorWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "subContractorWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "subContractorWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "subContractorWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "subContractorWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "subContractorWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "subContractorWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "subContractorWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "subContractorAddressNInFilter", parameters = { @ParamDef(name = "address", type = String.class) }), @FilterDef(name = "subContractorAddressEqFilter", parameters = { @ParamDef(name = "address", type = String.class) }), @FilterDef(name = "subContractorAddressNEqFilter", parameters = { @ParamDef(name = "address", type = String.class) }), @FilterDef(name = "subContractorAddressInFilter", parameters = { @ParamDef(name = "address", type = String.class) }), @FilterDef(name = "subContractorBusinessNameNInFilter", parameters = { @ParamDef(name = "businessName", type = String.class) }), @FilterDef(name = "subContractorBusinessNameEqFilter", parameters = { @ParamDef(name = "businessName", type = String.class) }), @FilterDef(name = "subContractorBusinessNameNEqFilter", parameters = { @ParamDef(name = "businessName", type = String.class) }), @FilterDef(name = "subContractorBusinessNameInFilter", parameters = { @ParamDef(name = "businessName", type = String.class) }), @FilterDef(name = "subContractorCityNInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "subContractorCityEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "subContractorCityNEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "subContractorCityInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "subContractorCodeNInFilter", parameters = { @ParamDef(name = "code", type = String.class) }), @FilterDef(name = "subContractorCodeEqFilter", parameters = { @ParamDef(name = "code", type = String.class) }), @FilterDef(name = "subContractorCodeNEqFilter", parameters = { @ParamDef(name = "code", type = String.class) }), @FilterDef(name = "subContractorCodeInFilter", parameters = { @ParamDef(name = "code", type = String.class) }), @FilterDef(name = "subContractorContractEndDateGtFilter", parameters = { @ParamDef(name = "contractEndDate", type = String.class) }), @FilterDef(name = "subContractorContractEndDateLtFilter", parameters = { @ParamDef(name = "contractEndDate", type = String.class) }), @FilterDef(name = "subContractorContractEndDateBwFilter", parameters = { @ParamDef(name = "contractEndDate_MIN", type = String.class), @ParamDef(name = "contractEndDate_MAX", type = String.class) }), @FilterDef(name = "subContractorContractStartDateGtFilter", parameters = { @ParamDef(name = "contractStartDate", type = String.class) }), @FilterDef(name = "subContractorContractStartDateLtFilter", parameters = { @ParamDef(name = "contractStartDate", type = String.class) }), @FilterDef(name = "subContractorContractStartDateBwFilter", parameters = { @ParamDef(name = "contractStartDate_MIN", type = String.class), @ParamDef(name = "contractStartDate_MAX", type = String.class) }), @FilterDef(name = "subContractorCountryNInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "subContractorCountryEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "subContractorCountryNEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "subContractorCountryInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "subContractorEmailIdNInFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "subContractorEmailIdEqFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "subContractorEmailIdNEqFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "subContractorEmailIdInFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "subContractorIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "subContractorIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "subContractorIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "subContractorIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "subContractorIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "subContractorIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "subContractorIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "subContractorIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "subContractorIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "subContractorNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "subContractorNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "subContractorNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "subContractorNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "subContractorPaymentTermsNInFilter", parameters = { @ParamDef(name = "paymentTerms", type = String.class) }), @FilterDef(name = "subContractorPaymentTermsEqFilter", parameters = { @ParamDef(name = "paymentTerms", type = String.class) }), @FilterDef(name = "subContractorPaymentTermsNEqFilter", parameters = { @ParamDef(name = "paymentTerms", type = String.class) }), @FilterDef(name = "subContractorPaymentTermsInFilter", parameters = { @ParamDef(name = "paymentTerms", type = String.class) }), @FilterDef(name = "subContractorPhoneNInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "subContractorPhoneEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "subContractorPhoneNEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "subContractorPhoneInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "subContractorStateNInFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "subContractorStateEqFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "subContractorStateNEqFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "subContractorStateInFilter", parameters = { @ParamDef(name = "state", type = String.class) }), @FilterDef(name = "subContractorText1NInFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "subContractorText1EqFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "subContractorText1NEqFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "subContractorText1InFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "subContractorText2NInFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "subContractorText2EqFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "subContractorText2NEqFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "subContractorText2InFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "subContractorText3NInFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "subContractorText3EqFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "subContractorText3NEqFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "subContractorText3InFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "subContractorTotalAnnualCostGtFilter", parameters = { @ParamDef(name = "totalAnnualCost", type = Double.class) }), @FilterDef(name = "subContractorTotalAnnualCostNInFilter", parameters = { @ParamDef(name = "totalAnnualCost", type = Double.class) }), @FilterDef(name = "subContractorTotalAnnualCostLtEqFilter", parameters = { @ParamDef(name = "totalAnnualCost", type = Double.class) }), @FilterDef(name = "subContractorTotalAnnualCostLtFilter", parameters = { @ParamDef(name = "totalAnnualCost", type = Double.class) }), @FilterDef(name = "subContractorTotalAnnualCostEqFilter", parameters = { @ParamDef(name = "totalAnnualCost", type = Double.class) }), @FilterDef(name = "subContractorTotalAnnualCostNEqFilter", parameters = { @ParamDef(name = "totalAnnualCost", type = Double.class) }), @FilterDef(name = "subContractorTotalAnnualCostInFilter", parameters = { @ParamDef(name = "totalAnnualCost", type = Double.class) }), @FilterDef(name = "subContractorTotalAnnualCostBwFilter", parameters = { @ParamDef(name = "totalAnnualCost_MIN", type = Double.class), @ParamDef(name = "totalAnnualCost_MAX", type = Double.class) }), @FilterDef(name = "subContractorTotalAnnualCostGtEqFilter", parameters = { @ParamDef(name = "totalAnnualCost", type = Double.class) }), @FilterDef(name = "subContractorWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "subContractorWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "subContractorWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "subContractorWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "subContractorWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "subContractorWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "subContractorWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "subContractorWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "subContractorWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class SubContractor extends BaseEntitySaaS{

    @Size(max = 255)
    @Basic
    private String address;

    @Size(max = 100)
    @Size(max = 100)
    @Basic
    @Column(name = "BUSINESS_NAME", length = 100)
    private String businessName;

    @Size(max = 255)
    @Basic
    private String city;

    @Size(max = 100)
    @Basic
    @Column(length = 100)
    private String code;

    @Basic
    @Column(name = "CONTRACT_END_DATE", length = 19)
    private Date contractEndDate;

    @Basic
    @Column(name = "CONTRACT_START_DATE", length = 19)
    private Date contractStartDate;

    @Size(max = 255)
    @Basic
    private String country;

    @Size(max = 255)
    @Basic
    @Column(name = "EMAIL_ID")
    private String emailId;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 100)
    @Basic
    @Column(length = 100)
    private String name;

    @Size(max = 255)
    @Basic
    @Column(name = "PAYMENT_TERMS")
    private String paymentTerms;

    @Size(max = 20)
    @Basic
    @Column(length = 20)
    private String phone;

    @Size(max = 255)
    @Basic
    private String state;

    @Size(max = 255)
    @Basic
    private String text1;

    @Size(max = 255)
    @Basic
    private String text2;

    @Size(max = 255)
    @Basic
    private String text3;

    @Basic
    @Column(name = "TOTAL_ANNUAL_COST")
    private Double totalAnnualCost;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public SubContractor() {
    }

    public SubContractor(Integer id) {
        this.id = id;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getBusinessName() {
        return businessName;
    }

    public void setBusinessName(String businessName) {
        this.businessName = businessName;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public Date getContractEndDate() {
        return contractEndDate;
    }

    public void setContractEndDate(Date contractEndDate) {
        this.contractEndDate = contractEndDate;
    }

    public Date getContractStartDate() {
        return contractStartDate;
    }

    public void setContractStartDate(Date contractStartDate) {
        this.contractStartDate = contractStartDate;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getEmailId() {
        return emailId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPaymentTerms() {
        return paymentTerms;
    }

    public void setPaymentTerms(String paymentTerms) {
        this.paymentTerms = paymentTerms;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getText1() {
        return text1;
    }

    public void setText1(String text1) {
        this.text1 = text1;
    }

    public String getText2() {
        return text2;
    }

    public void setText2(String text2) {
        this.text2 = text2;
    }

    public String getText3() {
        return text3;
    }

    public void setText3(String text3) {
        this.text3 = text3;
    }

    public Double getTotalAnnualCost() {
        return totalAnnualCost;
    }

    public void setTotalAnnualCost(Double totalAnnualCost) {
        this.totalAnnualCost = totalAnnualCost;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

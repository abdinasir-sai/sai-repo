
package com.nouros.hrms.model;

import java.util.Date;

import org.hibernate.envers.Audited;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

@Audited
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "EMPLOYEE_LANGUAGE")
//@Filters(value = { @Filter(name = "employeeLanguageCertificationUrlNInFilter", condition = "CERTIFICATION_URL not in (:certificationUrl)"), @Filter(name = "employeeLanguageCertificationUrlEqFilter", condition = "CERTIFICATION_URL = :certificationUrl"), @Filter(name = "employeeLanguageCertificationUrlNEqFilter", condition = "CERTIFICATION_URL != :certificationUrl"), @Filter(name = "employeeLanguageCertificationUrlInFilter", condition = "CERTIFICATION_URL in (:certificationUrl)"), @Filter(name = "employeeLanguageContinuingEducationRequirementNInFilter", condition = "CONTINUING_EDUCATION_REQUIREMENT not in (:continuingEducationRequirement)"), @Filter(name = "employeeLanguageContinuingEducationRequirementEqFilter", condition = "CONTINUING_EDUCATION_REQUIREMENT = :continuingEducationRequirement"), @Filter(name = "employeeLanguageContinuingEducationRequirementNEqFilter", condition = "CONTINUING_EDUCATION_REQUIREMENT != :continuingEducationRequirement"), @Filter(name = "employeeLanguageContinuingEducationRequirementInFilter", condition = "CONTINUING_EDUCATION_REQUIREMENT in (:continuingEducationRequirement)"), @Filter(name = "employeeLanguageCountryOfValidityNInFilter", condition = "COUNTRY_OF_VALIDITY not in (:countryOfValidity)"), @Filter(name = "employeeLanguageCountryOfValidityEqFilter", condition = "COUNTRY_OF_VALIDITY = :countryOfValidity"), @Filter(name = "employeeLanguageCountryOfValidityNEqFilter", condition = "COUNTRY_OF_VALIDITY != :countryOfValidity"), @Filter(name = "employeeLanguageCountryOfValidityInFilter", condition = "COUNTRY_OF_VALIDITY in (:countryOfValidity)"), @Filter(name = "employeeLanguageDeletedEqFilter", condition = "DELETED = :deleted"), @Filter(name = "employeeLanguageDeletedNEqFilter", condition = "DELETED != :deleted"), @Filter(name = "employeeLanguageDocumentUploadNInFilter", condition = "DOCUMENT_UPLOAD not in (:documentUpload)"), @Filter(name = "employeeLanguageDocumentUploadEqFilter", condition = "DOCUMENT_UPLOAD = :documentUpload"), @Filter(name = "employeeLanguageDocumentUploadNEqFilter", condition = "DOCUMENT_UPLOAD != :documentUpload"), @Filter(name = "employeeLanguageDocumentUploadInFilter", condition = "DOCUMENT_UPLOAD in (:documentUpload)"), @Filter(name = "employeeLanguageEmployeeIdGtFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id)"), @Filter(name = "employeeLanguageEmployeeIdNInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID not in (:id)"), @Filter(name = "employeeLanguageEmployeeIdLtEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID <= :id)"), @Filter(name = "employeeLanguageEmployeeIdLtFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID < :id)"), @Filter(name = "employeeLanguageEmployeeIdEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID = :id)"), @Filter(name = "employeeLanguageEmployeeIdNEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID != :id)"), @Filter(name = "employeeLanguageEmployeeIdInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID in (:id)"), @Filter(name = "employeeLanguageEmployeeIdBwFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id_MIN  AND EMPLOYEE.ID < :id_MAX )"), @Filter(name = "employeeLanguageEmployeeIdGtEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID >= :id)"), @Filter(name = "employeeLanguageEmployeeName2NInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 not in (:name2)"), @Filter(name = "employeeLanguageEmployeeName2EqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 = :name2)"), @Filter(name = "employeeLanguageEmployeeName2NEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 != :name2)"), @Filter(name = "employeeLanguageEmployeeName2InFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 in (:name2)"), @Filter(name = "employeeLanguageEmployeeName1NInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 not in (:name1)"), @Filter(name = "employeeLanguageEmployeeName1EqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 = :name1)"), @Filter(name = "employeeLanguageEmployeeName1NEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 != :name1)"), @Filter(name = "employeeLanguageEmployeeName1InFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 in (:name1)"), @Filter(name = "employeeLanguageExpirationDateGtFilter", condition = "EXPIRATION_DATE > (SELECT DATE_FORMAT(:expirationDate, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageExpirationDateLtFilter", condition = "EXPIRATION_DATE < (SELECT DATE_FORMAT(:expirationDate, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageExpirationDateBwFilter", condition = "EXPIRATION_DATE >(SELECT DATE_FORMAT(:expirationDate_MIN, '%Y-%m-%d')) AND EXPIRATION_DATE <(SELECT DATE_FORMAT(:expirationDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageIdGtFilter", condition = "ID > :id"), @Filter(name = "employeeLanguageIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "employeeLanguageIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "employeeLanguageIdLtFilter", condition = "ID < :id"), @Filter(name = "employeeLanguageIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeLanguageIdNEqFilter", condition = "ID != :id"), @Filter(name = "employeeLanguageIdInFilter", condition = "ID in (:id)"), @Filter(name = "employeeLanguageIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "employeeLanguageIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "employeeLanguageIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeLanguageIssueDateGtFilter", condition = "ISSUE_DATE > (SELECT DATE_FORMAT(:issueDate, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageIssueDateLtFilter", condition = "ISSUE_DATE < (SELECT DATE_FORMAT(:issueDate, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageIssueDateBwFilter", condition = "ISSUE_DATE >(SELECT DATE_FORMAT(:issueDate_MIN, '%Y-%m-%d')) AND ISSUE_DATE <(SELECT DATE_FORMAT(:issueDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageIssuingAuthorityNInFilter", condition = "ISSUING_AUTHORITY not in (:issuingAuthority)"), @Filter(name = "employeeLanguageIssuingAuthorityEqFilter", condition = "ISSUING_AUTHORITY = :issuingAuthority"), @Filter(name = "employeeLanguageIssuingAuthorityNEqFilter", condition = "ISSUING_AUTHORITY != :issuingAuthority"), @Filter(name = "employeeLanguageIssuingAuthorityInFilter", condition = "ISSUING_AUTHORITY in (:issuingAuthority)"), @Filter(name = "employeeLanguageLicenseNameNInFilter", condition = "LICENSE_NAME not in (:licenseName)"), @Filter(name = "employeeLanguageLicenseNameEqFilter", condition = "LICENSE_NAME = :licenseName"), @Filter(name = "employeeLanguageLicenseNameNEqFilter", condition = "LICENSE_NAME != :licenseName"), @Filter(name = "employeeLanguageLicenseNameInFilter", condition = "LICENSE_NAME in (:licenseName)"), @Filter(name = "employeeLanguageLicenseNumberNInFilter", condition = "LICENSE_NUMBER not in (:licenseNumber)"), @Filter(name = "employeeLanguageLicenseNumberEqFilter", condition = "LICENSE_NUMBER = :licenseNumber"), @Filter(name = "employeeLanguageLicenseNumberNEqFilter", condition = "LICENSE_NUMBER != :licenseNumber"), @Filter(name = "employeeLanguageLicenseNumberInFilter", condition = "LICENSE_NUMBER in (:licenseNumber)"), @Filter(name = "employeeLanguageLicenseStatusNInFilter", condition = "LICENSE_STATUS not in (:licenseStatus)"), @Filter(name = "employeeLanguageLicenseStatusEqFilter", condition = "LICENSE_STATUS = :licenseStatus"), @Filter(name = "employeeLanguageLicenseStatusNEqFilter", condition = "LICENSE_STATUS != :licenseStatus"), @Filter(name = "employeeLanguageLicenseStatusInFilter", condition = "LICENSE_STATUS in (:licenseStatus)"), @Filter(name = "employeeLanguageLicenseTypeNInFilter", condition = "LICENSE_TYPE not in (:licenseType)"), @Filter(name = "employeeLanguageLicenseTypeEqFilter", condition = "LICENSE_TYPE = :licenseType"), @Filter(name = "employeeLanguageLicenseTypeNEqFilter", condition = "LICENSE_TYPE != :licenseType"), @Filter(name = "employeeLanguageLicenseTypeInFilter", condition = "LICENSE_TYPE in (:licenseType)"), @Filter(name = "employeeLanguageRemarksNInFilter", condition = "REMARKS not in (:remarks)"), @Filter(name = "employeeLanguageRemarksEqFilter", condition = "REMARKS = :remarks"), @Filter(name = "employeeLanguageRemarksNEqFilter", condition = "REMARKS != :remarks"), @Filter(name = "employeeLanguageRemarksInFilter", condition = "REMARKS in (:remarks)"), @Filter(name = "employeeLanguageRenewalDateGtFilter", condition = "RENEWAL_DATE > (SELECT DATE_FORMAT(:renewalDate, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageRenewalDateLtFilter", condition = "RENEWAL_DATE < (SELECT DATE_FORMAT(:renewalDate, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageRenewalDateBwFilter", condition = "RENEWAL_DATE >(SELECT DATE_FORMAT(:renewalDate_MIN, '%Y-%m-%d')) AND RENEWAL_DATE <(SELECT DATE_FORMAT(:renewalDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageRenewalRequiredEqFilter", condition = "RENEWAL_REQUIRED = :renewalRequired"), @Filter(name = "employeeLanguageRenewalRequiredNEqFilter", condition = "RENEWAL_REQUIRED != :renewalRequired"), @Filter(name = "employeeLanguageScopeOfPracticeNInFilter", condition = "SCOPE_OF_PRACTICE not in (:scopeOfPractice)"), @Filter(name = "employeeLanguageScopeOfPracticeEqFilter", condition = "SCOPE_OF_PRACTICE = :scopeOfPractice"), @Filter(name = "employeeLanguageScopeOfPracticeNEqFilter", condition = "SCOPE_OF_PRACTICE != :scopeOfPractice"), @Filter(name = "employeeLanguageScopeOfPracticeInFilter", condition = "SCOPE_OF_PRACTICE in (:scopeOfPractice)"), @Filter(name = "employeeLanguageCreatorUserFirstNameNInFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME not in (:firstName)"), @Filter(name = "employeeLanguageCreatorUserFirstNameEqFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME = :firstName)"), @Filter(name = "employeeLanguageCreatorUserFirstNameNEqFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME != :firstName)"), @Filter(name = "employeeLanguageCreatorUserFirstNameInFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME in (:firstName)"), @Filter(name = "employeeLanguageCreatorUserLastNameNInFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME not in (:lastName)"), @Filter(name = "employeeLanguageCreatorUserLastNameEqFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME = :lastName)"), @Filter(name = "employeeLanguageCreatorUserLastNameNEqFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME != :lastName)"), @Filter(name = "employeeLanguageCreatorUserLastNameInFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME in (:lastName)"), @Filter(name = "employeeLanguageCreatorUserMiddleNameNInFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME not in (:middleName)"), @Filter(name = "employeeLanguageCreatorUserMiddleNameEqFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME = :middleName)"), @Filter(name = "employeeLanguageCreatorUserMiddleNameNEqFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME != :middleName)"), @Filter(name = "employeeLanguageCreatorUserMiddleNameInFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME in (:middleName)"), @Filter(name = "employeeLanguageCreatorUserUserNameNInFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME not in (:userName)"), @Filter(name = "employeeLanguageCreatorUserUserNameEqFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME = :userName)"), @Filter(name = "employeeLanguageCreatorUserUserNameNEqFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME != :userName)"), @Filter(name = "employeeLanguageCreatorUserUserNameInFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME in (:userName)"), @Filter(name = "employeeLanguageCreatorUserUseridGtFilter", condition = "creator in (select USER.id from USER where USER.USERID > :userid)"), @Filter(name = "employeeLanguageCreatorUserUseridNInFilter", condition = "creator in (select USER.id from USER where USER.USERID not in (:userid)"), @Filter(name = "employeeLanguageCreatorUserUseridLtEqFilter", condition = "creator in (select USER.id from USER where USER.USERID <= :userid)"), @Filter(name = "employeeLanguageCreatorUserUseridLtFilter", condition = "creator in (select USER.id from USER where USER.USERID < :userid)"), @Filter(name = "employeeLanguageCreatorUserUseridEqFilter", condition = "creator in (select USER.id from USER where USER.USERID = :userid)"), @Filter(name = "employeeLanguageCreatorUserUseridNEqFilter", condition = "creator in (select USER.id from USER where USER.USERID != :userid)"), @Filter(name = "employeeLanguageCreatorUserUseridInFilter", condition = "creator in (select USER.id from USER where USER.USERID in (:userid)"), @Filter(name = "employeeLanguageCreatorUserUseridBwFilter", condition = "creator in (select USER.id from USER where USER.USERID > :userid_MIN  AND USER.USERID < :userid_MAX )"), @Filter(name = "employeeLanguageCreatorUserUseridGtEqFilter", condition = "creator in (select USER.id from USER where USER.USERID >= :userid)"), @Filter(name = "employeeLanguageCreatedTimeGtFilter", condition = "CREATED_TIME > (SELECT DATE_FORMAT(:createdTime, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageCreatedTimeLtFilter", condition = "CREATED_TIME < (SELECT DATE_FORMAT(:createdTime, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageCreatedTimeBwFilter", condition = "CREATED_TIME >(SELECT DATE_FORMAT(:createdTime_MIN, '%Y-%m-%d')) AND CREATED_TIME <(SELECT DATE_FORMAT(:createdTime_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageLastModifierUserFirstNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME not in (:firstName)"), @Filter(name = "employeeLanguageLastModifierUserFirstNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME = :firstName)"), @Filter(name = "employeeLanguageLastModifierUserFirstNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME != :firstName)"), @Filter(name = "employeeLanguageLastModifierUserFirstNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME in (:firstName)"), @Filter(name = "employeeLanguageLastModifierUserLastNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME not in (:lastName)"), @Filter(name = "employeeLanguageLastModifierUserLastNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME = :lastName)"), @Filter(name = "employeeLanguageLastModifierUserLastNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME != :lastName)"), @Filter(name = "employeeLanguageLastModifierUserLastNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME in (:lastName)"), @Filter(name = "employeeLanguageLastModifierUserMiddleNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME not in (:middleName)"), @Filter(name = "employeeLanguageLastModifierUserMiddleNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME = :middleName)"), @Filter(name = "employeeLanguageLastModifierUserMiddleNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME != :middleName)"), @Filter(name = "employeeLanguageLastModifierUserMiddleNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME in (:middleName)"), @Filter(name = "employeeLanguageLastModifierUserUserNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME not in (:userName)"), @Filter(name = "employeeLanguageLastModifierUserUserNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME = :userName)"), @Filter(name = "employeeLanguageLastModifierUserUserNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME != :userName)"), @Filter(name = "employeeLanguageLastModifierUserUserNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME in (:userName)"), @Filter(name = "employeeLanguageLastModifierUserUseridGtFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID > :userid)"), @Filter(name = "employeeLanguageLastModifierUserUseridNInFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID not in (:userid)"), @Filter(name = "employeeLanguageLastModifierUserUseridLtEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID <= :userid)"), @Filter(name = "employeeLanguageLastModifierUserUseridLtFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID < :userid)"), @Filter(name = "employeeLanguageLastModifierUserUseridEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID = :userid)"), @Filter(name = "employeeLanguageLastModifierUserUseridNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID != :userid)"), @Filter(name = "employeeLanguageLastModifierUserUseridInFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID in (:userid)"), @Filter(name = "employeeLanguageLastModifierUserUseridBwFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID > :userid_MIN  AND USER.USERID < :userid_MAX )"), @Filter(name = "employeeLanguageLastModifierUserUseridGtEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID >= :userid)"), @Filter(name = "employeeLanguageModifiedTimeGtFilter", condition = "MODIFIED_TIME > (SELECT DATE_FORMAT(:modifiedTime, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageModifiedTimeLtFilter", condition = "MODIFIED_TIME < (SELECT DATE_FORMAT(:modifiedTime, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageModifiedTimeBwFilter", condition = "MODIFIED_TIME >(SELECT DATE_FORMAT(:modifiedTime_MIN, '%Y-%m-%d')) AND MODIFIED_TIME <(SELECT DATE_FORMAT(:modifiedTime_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeLanguageCustomerIdGtFilter", condition = "CUSTOMER_ID > :customerId"), @Filter(name = "employeeLanguageCustomerIdNInFilter", condition = "CUSTOMER_ID not in (:customerId)"), @Filter(name = "employeeLanguageCustomerIdLtEqFilter", condition = "CUSTOMER_ID <= :customerId"), @Filter(name = "employeeLanguageCustomerIdLtFilter", condition = "CUSTOMER_ID < :customerId"), @Filter(name = "employeeLanguageCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId"), @Filter(name = "employeeLanguageCustomerIdNEqFilter", condition = "CUSTOMER_ID != :customerId"), @Filter(name = "employeeLanguageCustomerIdInFilter", condition = "CUSTOMER_ID in (:customerId)"), @Filter(name = "employeeLanguageCustomerIdBwFilter", condition = "CUSTOMER_ID > :customerId_MIN  AND CUSTOMER_ID < :customerId_MAX"), @Filter(name = "employeeLanguageCustomerIdGtEqFilter", condition = "CUSTOMER_ID >= :customerId"), @Filter(name = "employeeLanguageCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId") })
//@FilterDefs(value = { @FilterDef(name = "employeeLanguageCertificationUrlNInFilter", parameters = { @ParamDef(name = "certificationUrl", type = String.class) }), @FilterDef(name = "employeeLanguageCertificationUrlEqFilter", parameters = { @ParamDef(name = "certificationUrl", type = String.class) }), @FilterDef(name = "employeeLanguageCertificationUrlNEqFilter", parameters = { @ParamDef(name = "certificationUrl", type = String.class) }), @FilterDef(name = "employeeLanguageCertificationUrlInFilter", parameters = { @ParamDef(name = "certificationUrl", type = String.class) }), @FilterDef(name = "employeeLanguageContinuingEducationRequirementNInFilter", parameters = { @ParamDef(name = "continuingEducationRequirement", type = String.class) }), @FilterDef(name = "employeeLanguageContinuingEducationRequirementEqFilter", parameters = { @ParamDef(name = "continuingEducationRequirement", type = String.class) }), @FilterDef(name = "employeeLanguageContinuingEducationRequirementNEqFilter", parameters = { @ParamDef(name = "continuingEducationRequirement", type = String.class) }), @FilterDef(name = "employeeLanguageContinuingEducationRequirementInFilter", parameters = { @ParamDef(name = "continuingEducationRequirement", type = String.class) }), @FilterDef(name = "employeeLanguageCountryOfValidityNInFilter", parameters = { @ParamDef(name = "countryOfValidity", type = String.class) }), @FilterDef(name = "employeeLanguageCountryOfValidityEqFilter", parameters = { @ParamDef(name = "countryOfValidity", type = String.class) }), @FilterDef(name = "employeeLanguageCountryOfValidityNEqFilter", parameters = { @ParamDef(name = "countryOfValidity", type = String.class) }), @FilterDef(name = "employeeLanguageCountryOfValidityInFilter", parameters = { @ParamDef(name = "countryOfValidity", type = String.class) }), @FilterDef(name = "employeeLanguageDeletedEqFilter", parameters = { @ParamDef(name = "deleted", type = boolean.class) }), @FilterDef(name = "employeeLanguageDeletedNEqFilter", parameters = { @ParamDef(name = "deleted", type = boolean.class) }), @FilterDef(name = "employeeLanguageDocumentUploadNInFilter", parameters = { @ParamDef(name = "documentUpload", type = String.class) }), @FilterDef(name = "employeeLanguageDocumentUploadEqFilter", parameters = { @ParamDef(name = "documentUpload", type = String.class) }), @FilterDef(name = "employeeLanguageDocumentUploadNEqFilter", parameters = { @ParamDef(name = "documentUpload", type = String.class) }), @FilterDef(name = "employeeLanguageDocumentUploadInFilter", parameters = { @ParamDef(name = "documentUpload", type = String.class) }), @FilterDef(name = "employeeLanguageEmployeeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageEmployeeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageEmployeeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageEmployeeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageEmployeeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageEmployeeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageEmployeeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageEmployeeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeLanguageEmployeeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageEmployeeName2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeLanguageEmployeeName2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeLanguageEmployeeName2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeLanguageEmployeeName2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeLanguageEmployeeName1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeLanguageEmployeeName1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeLanguageEmployeeName1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeLanguageEmployeeName1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeLanguageExpirationDateGtFilter", parameters = { @ParamDef(name = "expirationDate", type = String.class) }), @FilterDef(name = "employeeLanguageExpirationDateLtFilter", parameters = { @ParamDef(name = "expirationDate", type = String.class) }), @FilterDef(name = "employeeLanguageExpirationDateBwFilter", parameters = { @ParamDef(name = "expirationDate_MIN", type = String.class), @ParamDef(name = "expirationDate_MAX", type = String.class) }), @FilterDef(name = "employeeLanguageIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeLanguageIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLanguageIssueDateGtFilter", parameters = { @ParamDef(name = "issueDate", type = String.class) }), @FilterDef(name = "employeeLanguageIssueDateLtFilter", parameters = { @ParamDef(name = "issueDate", type = String.class) }), @FilterDef(name = "employeeLanguageIssueDateBwFilter", parameters = { @ParamDef(name = "issueDate_MIN", type = String.class), @ParamDef(name = "issueDate_MAX", type = String.class) }), @FilterDef(name = "employeeLanguageIssuingAuthorityNInFilter", parameters = { @ParamDef(name = "issuingAuthority", type = String.class) }), @FilterDef(name = "employeeLanguageIssuingAuthorityEqFilter", parameters = { @ParamDef(name = "issuingAuthority", type = String.class) }), @FilterDef(name = "employeeLanguageIssuingAuthorityNEqFilter", parameters = { @ParamDef(name = "issuingAuthority", type = String.class) }), @FilterDef(name = "employeeLanguageIssuingAuthorityInFilter", parameters = { @ParamDef(name = "issuingAuthority", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseNameNInFilter", parameters = { @ParamDef(name = "licenseName", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseNameEqFilter", parameters = { @ParamDef(name = "licenseName", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseNameNEqFilter", parameters = { @ParamDef(name = "licenseName", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseNameInFilter", parameters = { @ParamDef(name = "licenseName", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseNumberNInFilter", parameters = { @ParamDef(name = "licenseNumber", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseNumberEqFilter", parameters = { @ParamDef(name = "licenseNumber", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseNumberNEqFilter", parameters = { @ParamDef(name = "licenseNumber", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseNumberInFilter", parameters = { @ParamDef(name = "licenseNumber", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseStatusNInFilter", parameters = { @ParamDef(name = "licenseStatus", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseStatusEqFilter", parameters = { @ParamDef(name = "licenseStatus", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseStatusNEqFilter", parameters = { @ParamDef(name = "licenseStatus", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseStatusInFilter", parameters = { @ParamDef(name = "licenseStatus", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseTypeNInFilter", parameters = { @ParamDef(name = "licenseType", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseTypeEqFilter", parameters = { @ParamDef(name = "licenseType", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseTypeNEqFilter", parameters = { @ParamDef(name = "licenseType", type = String.class) }), @FilterDef(name = "employeeLanguageLicenseTypeInFilter", parameters = { @ParamDef(name = "licenseType", type = String.class) }), @FilterDef(name = "employeeLanguageRemarksNInFilter", parameters = { @ParamDef(name = "remarks", type = String.class) }), @FilterDef(name = "employeeLanguageRemarksEqFilter", parameters = { @ParamDef(name = "remarks", type = String.class) }), @FilterDef(name = "employeeLanguageRemarksNEqFilter", parameters = { @ParamDef(name = "remarks", type = String.class) }), @FilterDef(name = "employeeLanguageRemarksInFilter", parameters = { @ParamDef(name = "remarks", type = String.class) }), @FilterDef(name = "employeeLanguageRenewalDateGtFilter", parameters = { @ParamDef(name = "renewalDate", type = String.class) }), @FilterDef(name = "employeeLanguageRenewalDateLtFilter", parameters = { @ParamDef(name = "renewalDate", type = String.class) }), @FilterDef(name = "employeeLanguageRenewalDateBwFilter", parameters = { @ParamDef(name = "renewalDate_MIN", type = String.class), @ParamDef(name = "renewalDate_MAX", type = String.class) }), @FilterDef(name = "employeeLanguageRenewalRequiredEqFilter", parameters = { @ParamDef(name = "renewalRequired", type = Boolean.class) }), @FilterDef(name = "employeeLanguageRenewalRequiredNEqFilter", parameters = { @ParamDef(name = "renewalRequired", type = Boolean.class) }), @FilterDef(name = "employeeLanguageScopeOfPracticeNInFilter", parameters = { @ParamDef(name = "scopeOfPractice", type = String.class) }), @FilterDef(name = "employeeLanguageScopeOfPracticeEqFilter", parameters = { @ParamDef(name = "scopeOfPractice", type = String.class) }), @FilterDef(name = "employeeLanguageScopeOfPracticeNEqFilter", parameters = { @ParamDef(name = "scopeOfPractice", type = String.class) }), @FilterDef(name = "employeeLanguageScopeOfPracticeInFilter", parameters = { @ParamDef(name = "scopeOfPractice", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserUserNameNInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserUserNameEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserUserNameNEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserUserNameInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeLanguageCreatorUserUseridGtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageCreatorUserUseridNInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageCreatorUserUseridLtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageCreatorUserUseridLtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageCreatorUserUseridEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageCreatorUserUseridNEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageCreatorUserUseridInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageCreatorUserUseridBwFilter", parameters = { @ParamDef(name = "userid_MIN", type = Integer.class), @ParamDef(name = "userid_MAX", type = Integer.class) }), @FilterDef(name = "employeeLanguageCreatorUserUseridGtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageCreatedTimeGtFilter", parameters = { @ParamDef(name = "createdTime", type = String.class) }), @FilterDef(name = "employeeLanguageCreatedTimeLtFilter", parameters = { @ParamDef(name = "createdTime", type = String.class) }), @FilterDef(name = "employeeLanguageCreatedTimeBwFilter", parameters = { @ParamDef(name = "createdTime_MIN", type = String.class), @ParamDef(name = "createdTime_MAX", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUserNameNInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUserNameEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUserNameNEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUserNameInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUseridGtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUseridNInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUseridLtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUseridLtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUseridEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUseridNEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUseridInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUseridBwFilter", parameters = { @ParamDef(name = "userid_MIN", type = Integer.class), @ParamDef(name = "userid_MAX", type = Integer.class) }), @FilterDef(name = "employeeLanguageLastModifierUserUseridGtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeLanguageModifiedTimeGtFilter", parameters = { @ParamDef(name = "modifiedTime", type = String.class) }), @FilterDef(name = "employeeLanguageModifiedTimeLtFilter", parameters = { @ParamDef(name = "modifiedTime", type = String.class) }), @FilterDef(name = "employeeLanguageModifiedTimeBwFilter", parameters = { @ParamDef(name = "modifiedTime_MIN", type = String.class), @ParamDef(name = "modifiedTime_MAX", type = String.class) }), @FilterDef(name = "employeeLanguageCustomerIdGtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeLanguageCustomerIdNInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeLanguageCustomerIdLtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeLanguageCustomerIdLtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeLanguageCustomerIdEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeLanguageCustomerIdNEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeLanguageCustomerIdInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeLanguageCustomerIdBwFilter", parameters = { @ParamDef(name = "customerId_MIN", type = Integer.class), @ParamDef(name = "customerId_MAX", type = Integer.class) }), @FilterDef(name = "employeeLanguageCustomerIdGtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }) })
public class EmployeeLanguage extends BaseEntitySaaS {


    @Basic
    private boolean deleted;


    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "EMPLOYEE_ID", columnDefinition = "INT")
    private Employee employee;


    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;
    
    @Basic
	@Column(name = "LANGUAGE_NAME", length = 200)
	private String languageName;

    @Basic
	@Column(name = "LANGUAGE_LEVEL", length = 200)
	private String languageLevel;
    
    @Basic
	@Column(name = "CERTIFICATION_STATUS", length = 200)
	private String certificationStatus;
    
    @Basic
    @Column(name = "SPEAKING_PROFICIENCY", columnDefinition = "ENUM('Beginner', 'Intermediate', 'Advanced', 'Native',' NA')")
    private String speakingProficiency;
    
    @Basic
    @Column(name = "WRITING_PROFICIENCY", columnDefinition = "ENUM('Beginner', 'Intermediate', 'Advanced', 'Native',' NA')")
    private String writingProficiency;
    
    @Basic
    @Column(name = "READING_PROFICIENCY", columnDefinition = "ENUM('Beginner', 'Intermediate', 'Advanced', 'Native',' NA')")
    private String readingProficiency;
    
    @Basic
    @Column(name = "LISTENING_PROFICIENCY", columnDefinition = "ENUM('Beginner', 'Intermediate', 'Advanced', 'Native',' NA')")
    private String listeningProficiency;
    
    @Basic
	@Column(name = "PRIMARY_LANGUAGE", length = 50)
	private String primaryLanguage;
    
    @Basic
    @Column(name = "REMARKS",columnDefinition = "LONGTEXT")
    private String remarks;
    
    @Basic
	@Column(name = "LANGUAGE_CERTIFICATION", length = 200)
	private String languageCertification;
    
    public EmployeeLanguage() {
    }

    public EmployeeLanguage(Integer id) {
        this.id = id;
    }

	public boolean isDeleted() {
		return deleted;
	}

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getLanguageName() {
		return languageName;
	}

	public void setLanguageName(String languageName) {
		this.languageName = languageName;
	}

	public String getLanguageLevel() {
		return languageLevel;
	}

	public void setLanguageLevel(String languageLevel) {
		this.languageLevel = languageLevel;
	}

	public String getCertificationStatus() {
		return certificationStatus;
	}

	public void setCertificationStatus(String certificationStatus) {
		this.certificationStatus = certificationStatus;
	}

	public String getSpeakingProficiency() {
		return speakingProficiency;
	}

	public void setSpeakingProficiency(String speakingProficiency) {
		this.speakingProficiency = speakingProficiency;
	}

	public String getWritingProficiency() {
		return writingProficiency;
	}

	public void setWritingProficiency(String writingProficiency) {
		this.writingProficiency = writingProficiency;
	}

	public String getReadingProficiency() {
		return readingProficiency;
	}

	public void setReadingProficiency(String readingProficiency) {
		this.readingProficiency = readingProficiency;
	}

	public String getListeningProficiency() {
		return listeningProficiency;
	}

	public void setListeningProficiency(String listeningProficiency) {
		this.listeningProficiency = listeningProficiency;
	}

	public String getPrimaryLanguage() {
		return primaryLanguage;
	}

	public void setPrimaryLanguage(String primaryLanguage) {
		this.primaryLanguage = primaryLanguage;
	}

	public String getRemarks() {
		return remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	public String getLanguageCertification() {
		return languageCertification;
	}

	public void setLanguageCertification(String languageCertification) {
		this.languageCertification = languageCertification;
	}

	
   
}

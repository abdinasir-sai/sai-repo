package com.nouros.hrms.model;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonFilter;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "RISK")
@JsonFilter("propertyFilter")
@Filters(value = { @Filter(name = "riskReporterIdInFilter",condition = "REPORTER IN (select e.ID FROM EMPLOYEE e WHERE e.USERID_PK IN (:id)) OR RISK_OWNER IN  (select e.ID FROM EMPLOYEE e WHERE e.USERID_PK IN (:id))  "),
@Filter(name = "riskDepartmentNameInFilter", condition = "DEPARTMENT IN (SELECT d.ID FROM DEPARTMENT d WHERE d.NAME IN (:department))")})
@FilterDefs(value = { @FilterDef(name = "riskReporterIdInFilter", parameters = {@ParamDef(name = "id", type = Integer.class)}),
@FilterDef(name = "riskDepartmentNameInFilter", parameters = @ParamDef(name = "name", type = String.class))})
public class Risk extends BaseEntitySaaS{
	@Basic
	@Column(name = "ACTUAL_RESOLVED_DATE", length = 19)
	private Date actualResolvedDate;

	@Size(max = 255)
	@Basic
	private String attachment;

	@Basic
	private boolean deleted;
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "DEPARTMENT", columnDefinition = "INT")
	private Department department;

	@GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
	@Id
	@Column(columnDefinition = "INT")
	private Integer id;

	@Basic
	private @Column(name = "IMPACT", columnDefinition = "ENUM('Large','Medium','Small','Low')") String impact;

	@Basic
	@Column(name = "MITIGATION_NOTE", columnDefinition = "LONGTEXT")
	private String mitigationNote;

	@Basic
	private @Column(name = "PROBABILITY", columnDefinition = "ENUM('Rare','Unlikely','Possible','Probable')") String probability;

	@Basic
	@Column(columnDefinition = "LONGTEXT")
	private String remarks;

	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "REPORTER", columnDefinition = "INT")
	private Employee reporter;

	public Employee getReporter() {
		return reporter;
	}

	public void setReporter(Employee reporter) {
		this.reporter = reporter;
	}

	public Employee getRiskOwner() {
		return riskOwner;
	}

	public void setRiskOwner(Employee riskOwner) {
		this.riskOwner = riskOwner;
	}

	@Basic
	@Column(name = "RESOLUTION_DUE_DATE", length = 19)
	private Date resolutionDueDate;

	@Basic
	@Column(name = "RISK_ID", length = 100)
	private String riskId;

	@Basic
	private @Column(name = "RISK_LEVEL", columnDefinition = "ENUM('High','Medium','Low')") String riskLevel;

	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "RISK_OWNER", columnDefinition = "INT")
	private Employee riskOwner;

	@Size(max = 250)
	@Basic
	@Column(name = "RISK_TAGS_ADDITIONAL", length = 250)
	private String riskTagsAdditional;

	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@OneToMany(targetEntity = com.nouros.hrms.model.RiskTagsMapping.class, mappedBy = "risk", cascade = CascadeType.MERGE)
	private Set<RiskTagsMapping> riskTagsMappings = new HashSet<>();

	@Size(max = 200)
	@Basic
	@Column(name = "RISK_TITLE", length = 200)
	private String riskTitle;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "RISK_TYPE_ID", columnDefinition = "INT")
	private RiskType riskType;

	@Basic
	private @Column(name = "STATUS", columnDefinition = "ENUM('Open','Mitigation-in-progress','Mitigated','Avoided')") String status;

	public Risk() {
	}

	public Risk(Integer id) {
		this.id = id;
	}

	public Date getActualResolvedDate() {
		return actualResolvedDate;
	}

	public void setActualResolvedDate(Date actualResolvedDate) {
		this.actualResolvedDate = actualResolvedDate;
	}

	public String getAttachment() {
		return attachment;
	}

	public void setAttachment(String attachment) {
		this.attachment = attachment;
	}

	public boolean isDeleted() {
		return deleted;
	}

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getImpact() {
		return impact;
	}

	public void setImpact(String impact) {
		this.impact = impact;
	}

	public String getMitigationNote() {
		return mitigationNote;
	}

	public void setMitigationNote(String mitigationNote) {
		this.mitigationNote = mitigationNote;
	}

	public String getProbability() {
		return probability;
	}

	public void setProbability(String probability) {
		this.probability = probability;
	}

	public String getRemarks() {
		return remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}


	public Date getResolutionDueDate() {
		return resolutionDueDate;
	}

	public void setResolutionDueDate(Date resolutionDueDate) {
		this.resolutionDueDate = resolutionDueDate;
	}

	public String getRiskId() {
		return riskId;
	}

	public void setRiskId(String riskId) {
		this.riskId = riskId;
	}

	public String getRiskLevel() {
		return riskLevel;
	}

	public void setRiskLevel(String riskLevel) {
		this.riskLevel = riskLevel;
	}


	public String getRiskTagsAdditional() {
		return riskTagsAdditional;
	}

	public void setRiskTagsAdditional(String riskTagsAdditional) {
		this.riskTagsAdditional = riskTagsAdditional;
	}

	public Set<RiskTagsMapping> getRiskTagsMappings() {
		return riskTagsMappings;
	}

	public void setRiskTagsMappings(Set<RiskTagsMapping> riskTagsMappings) {
		this.riskTagsMappings = riskTagsMappings;
	}

	public String getRiskTitle() {
		return riskTitle;
	}

	public void setRiskTitle(String riskTitle) {
		this.riskTitle = riskTitle;
	}

	public RiskType getRiskType() {
		return riskType;
	}

	public void setRiskType(RiskType riskType) {
		this.riskType = riskType;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "PROCESS_INSTANCE_ID")
	private String processInstanceId;

	@Column(name = "WORKFLOW_STAGE")
	private String workflowStage;

	public String getProcessInstanceId() {
		return processInstanceId;
	}

	public void setProcessInstanceId(String processInstanceId) {
		this.processInstanceId = processInstanceId;
	}

	public String getWorkflowStage() {
		return workflowStage;
	}

	public void setWorkflowStage(String workflowStage) {
		this.workflowStage = workflowStage;
	}

	public List<WorkflowActions> getActions() {
		return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class)
				.getWorkflowActions(id, "Risk");
	}
}

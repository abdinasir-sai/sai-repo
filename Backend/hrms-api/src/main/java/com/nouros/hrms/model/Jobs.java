package com.nouros.hrms.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "JOBS")
@Filters(value = { @Filter(name = "jobsApprovalStatusNInFilter", condition = "APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "jobsApprovalStatusEqFilter", condition = "APPROVAL_STATUS = :approvalStatus"), @Filter(name = "jobsApprovalStatusNEqFilter", condition = "APPROVAL_STATUS != :approvalStatus"), @Filter(name = "jobsApprovalStatusInFilter", condition = "APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "jobsBillableStatusNInFilter", condition = "BILLABLE_STATUS not in (:billableStatus)"), @Filter(name = "jobsBillableStatusEqFilter", condition = "BILLABLE_STATUS = :billableStatus"), @Filter(name = "jobsBillableStatusNEqFilter", condition = "BILLABLE_STATUS != :billableStatus"), @Filter(name = "jobsBillableStatusInFilter", condition = "BILLABLE_STATUS in (:billableStatus)"), @Filter(name = "jobsDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "jobsDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "jobsDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "jobsDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "jobsEndDateGtFilter", condition = "END_DATE > (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "jobsEndDateLtFilter", condition = "END_DATE < (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "jobsEndDateBwFilter", condition = "END_DATE >(SELECT DATE_FORMAT(:endDate_MIN, '%Y-%m-%d')) AND END_DATE <(SELECT DATE_FORMAT(:endDate_MAX, '%Y-%m-%d'))"), @Filter(name = "jobsHoursGtFilter", condition = "HOURS > :hours"), @Filter(name = "jobsHoursNInFilter", condition = "HOURS not in (:hours)"), @Filter(name = "jobsHoursLtEqFilter", condition = "HOURS <= :hours"), @Filter(name = "jobsHoursLtFilter", condition = "HOURS < :hours"), @Filter(name = "jobsHoursEqFilter", condition = "HOURS = :hours"), @Filter(name = "jobsHoursNEqFilter", condition = "HOURS != :hours"), @Filter(name = "jobsHoursInFilter", condition = "HOURS in (:hours)"), @Filter(name = "jobsHoursBwFilter", condition = "HOURS > :hours_MIN  AND HOURS < :hours_MAX"), @Filter(name = "jobsHoursGtEqFilter", condition = "HOURS >= :hours"), @Filter(name = "jobsHoursEqFilter", condition = "HOURS = :hours"), @Filter(name = "jobsIdGtFilter", condition = "ID > :id"), @Filter(name = "jobsIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "jobsIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "jobsIdLtFilter", condition = "ID < :id"), @Filter(name = "jobsIdEqFilter", condition = "ID = :id"), @Filter(name = "jobsIdNEqFilter", condition = "ID != :id"), @Filter(name = "jobsIdInFilter", condition = "ID in (:id)"), @Filter(name = "jobsIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "jobsIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "jobsIdEqFilter", condition = "ID = :id"), @Filter(name = "jobsJobNameNInFilter", condition = "JOB_NAME not in (:jobName)"), @Filter(name = "jobsJobNameEqFilter", condition = "JOB_NAME = :jobName"), @Filter(name = "jobsJobNameNEqFilter", condition = "JOB_NAME != :jobName"), @Filter(name = "jobsJobNameInFilter", condition = "JOB_NAME in (:jobName)"), @Filter(name = "jobsProjectNInFilter", condition = "PROJECT not in (:project)"), @Filter(name = "jobsProjectEqFilter", condition = "PROJECT = :project"), @Filter(name = "jobsProjectNEqFilter", condition = "PROJECT != :project"), @Filter(name = "jobsProjectInFilter", condition = "PROJECT in (:project)"), @Filter(name = "jobsRatePerHourGtFilter", condition = "RATE_PER_HOUR > :ratePerHour"), @Filter(name = "jobsRatePerHourNInFilter", condition = "RATE_PER_HOUR not in (:ratePerHour)"), @Filter(name = "jobsRatePerHourLtEqFilter", condition = "RATE_PER_HOUR <= :ratePerHour"), @Filter(name = "jobsRatePerHourLtFilter", condition = "RATE_PER_HOUR < :ratePerHour"), @Filter(name = "jobsRatePerHourEqFilter", condition = "RATE_PER_HOUR = :ratePerHour"), @Filter(name = "jobsRatePerHourNEqFilter", condition = "RATE_PER_HOUR != :ratePerHour"), @Filter(name = "jobsRatePerHourInFilter", condition = "RATE_PER_HOUR in (:ratePerHour)"), @Filter(name = "jobsRatePerHourBwFilter", condition = "RATE_PER_HOUR > :ratePerHour_MIN  AND RATE_PER_HOUR < :ratePerHour_MAX"), @Filter(name = "jobsRatePerHourGtEqFilter", condition = "RATE_PER_HOUR >= :ratePerHour"), @Filter(name = "jobsRatePerHourEqFilter", condition = "RATE_PER_HOUR = :ratePerHour"), @Filter(name = "jobsReminderNInFilter", condition = "REMINDER not in (:reminder)"), @Filter(name = "jobsReminderEqFilter", condition = "REMINDER = :reminder"), @Filter(name = "jobsReminderNEqFilter", condition = "REMINDER != :reminder"), @Filter(name = "jobsReminderInFilter", condition = "REMINDER in (:reminder)"), @Filter(name = "jobsReminderTimeGtFilter", condition = "REMINDER_TIME > (SELECT DATE_FORMAT(:reminderTime, '%Y-%m-%d'))"), @Filter(name = "jobsReminderTimeLtFilter", condition = "REMINDER_TIME < (SELECT DATE_FORMAT(:reminderTime, '%Y-%m-%d'))"), @Filter(name = "jobsReminderTimeBwFilter", condition = "REMINDER_TIME >(SELECT DATE_FORMAT(:reminderTime_MIN, '%Y-%m-%d')) AND REMINDER_TIME <(SELECT DATE_FORMAT(:reminderTime_MAX, '%Y-%m-%d'))"), @Filter(name = "jobsStartDateGtFilter", condition = "START_DATE > (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "jobsStartDateLtFilter", condition = "START_DATE < (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "jobsStartDateBwFilter", condition = "START_DATE >(SELECT DATE_FORMAT(:startDate_MIN, '%Y-%m-%d')) AND START_DATE <(SELECT DATE_FORMAT(:startDate_MAX, '%Y-%m-%d'))"), @Filter(name = "jobsStatusNInFilter", condition = "STATUS not in (:status)"), @Filter(name = "jobsStatusEqFilter", condition = "STATUS = :status"), @Filter(name = "jobsStatusNEqFilter", condition = "STATUS != :status"), @Filter(name = "jobsStatusInFilter", condition = "STATUS in (:status)"), @Filter(name = "jobsWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "jobsWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "jobsWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "jobsWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "jobsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "jobsWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "jobsWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "jobsWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "jobsWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "jobsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "jobsApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "jobsApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "jobsApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "jobsApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "jobsBillableStatusNInFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "jobsBillableStatusEqFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "jobsBillableStatusNEqFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "jobsBillableStatusInFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "jobsDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "jobsDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "jobsDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "jobsDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "jobsEndDateGtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "jobsEndDateLtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "jobsEndDateBwFilter", parameters = { @ParamDef(name = "endDate_MIN", type = String.class), @ParamDef(name = "endDate_MAX", type = String.class) }), @FilterDef(name = "jobsHoursGtFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "jobsHoursNInFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "jobsHoursLtEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "jobsHoursLtFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "jobsHoursEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "jobsHoursNEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "jobsHoursInFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "jobsHoursBwFilter", parameters = { @ParamDef(name = "hours_MIN", type = Double.class), @ParamDef(name = "hours_MAX", type = Double.class) }), @FilterDef(name = "jobsHoursGtEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "jobsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "jobsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "jobsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "jobsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "jobsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "jobsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "jobsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "jobsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "jobsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "jobsJobNameNInFilter", parameters = { @ParamDef(name = "jobName", type = String.class) }), @FilterDef(name = "jobsJobNameEqFilter", parameters = { @ParamDef(name = "jobName", type = String.class) }), @FilterDef(name = "jobsJobNameNEqFilter", parameters = { @ParamDef(name = "jobName", type = String.class) }), @FilterDef(name = "jobsJobNameInFilter", parameters = { @ParamDef(name = "jobName", type = String.class) }), @FilterDef(name = "jobsProjectNInFilter", parameters = { @ParamDef(name = "project", type = String.class) }), @FilterDef(name = "jobsProjectEqFilter", parameters = { @ParamDef(name = "project", type = String.class) }), @FilterDef(name = "jobsProjectNEqFilter", parameters = { @ParamDef(name = "project", type = String.class) }), @FilterDef(name = "jobsProjectInFilter", parameters = { @ParamDef(name = "project", type = String.class) }), @FilterDef(name = "jobsRatePerHourGtFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "jobsRatePerHourNInFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "jobsRatePerHourLtEqFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "jobsRatePerHourLtFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "jobsRatePerHourEqFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "jobsRatePerHourNEqFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "jobsRatePerHourInFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "jobsRatePerHourBwFilter", parameters = { @ParamDef(name = "ratePerHour_MIN", type = Double.class), @ParamDef(name = "ratePerHour_MAX", type = Double.class) }), @FilterDef(name = "jobsRatePerHourGtEqFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "jobsReminderNInFilter", parameters = { @ParamDef(name = "reminder", type = String.class) }), @FilterDef(name = "jobsReminderEqFilter", parameters = { @ParamDef(name = "reminder", type = String.class) }), @FilterDef(name = "jobsReminderNEqFilter", parameters = { @ParamDef(name = "reminder", type = String.class) }), @FilterDef(name = "jobsReminderInFilter", parameters = { @ParamDef(name = "reminder", type = String.class) }), @FilterDef(name = "jobsReminderTimeGtFilter", parameters = { @ParamDef(name = "reminderTime", type = String.class) }), @FilterDef(name = "jobsReminderTimeLtFilter", parameters = { @ParamDef(name = "reminderTime", type = String.class) }), @FilterDef(name = "jobsReminderTimeBwFilter", parameters = { @ParamDef(name = "reminderTime_MIN", type = String.class), @ParamDef(name = "reminderTime_MAX", type = String.class) }), @FilterDef(name = "jobsStartDateGtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "jobsStartDateLtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "jobsStartDateBwFilter", parameters = { @ParamDef(name = "startDate_MIN", type = String.class), @ParamDef(name = "startDate_MAX", type = String.class) }), @FilterDef(name = "jobsStatusNInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "jobsStatusEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "jobsStatusNEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "jobsStatusInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "jobsWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "jobsWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "jobsWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "jobsWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "jobsWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "jobsWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "jobsWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "jobsWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "jobsWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Jobs extends BaseEntitySaaS{

    @Basic
    @Column(name = "APPROVAL_STATUS", columnDefinition = "ENUM", length = 12)
    private String approvalStatus;

    @Basic
    @Column(name = "BILLABLE_STATUS", columnDefinition = "ENUM", length = 3)
    private String billableStatus;

    @Basic
    @Column(columnDefinition = "LONGTEXT")
    private String description;

    @Basic
    @Column(name = "END_DATE", length = 19)
    private Date endDate;

    @Basic
    private Double hours;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 50)
    @Basic
    @Column(name = "JOB_NAME", length = 50)
    private String jobName;
    
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "PROJECT", columnDefinition = "INT")
    private Projects project;
    

    @Basic
    @Column(name = "RATE_PER_HOUR")
    private Double ratePerHour;

    @Size(max = 100)
    @Basic
    @Column(length = 100)
    private String reminder;

    @Basic
    @Column(name = "REMINDER_TIME", length = 19)
    private Date reminderTime;

    @Basic
    @Column(name = "START_DATE", length = 19)
    private Date startDate;

    @Basic
    @Column(columnDefinition = "ENUM", length = 11)
    private String status;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.TimeLogs.class, mappedBy = "jobs", cascade = CascadeType.MERGE)
    private Set<TimeLogs> timeLogs = new HashSet<>();

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public Jobs() {
    }

    public Jobs(Integer id) {
        this.id = id;
    }

    public String getApprovalStatus() {
        return approvalStatus;
    }

    public void setApprovalStatus(String approvalStatus) {
        this.approvalStatus = approvalStatus;
    }

    public String getBillableStatus() {
        return billableStatus;
    }

    public void setBillableStatus(String billableStatus) {
        this.billableStatus = billableStatus;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public Double getHours() {
        return hours;
    }

    public void setHours(Double hours) {
        this.hours = hours;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getJobName() {
        return jobName;
    }

    public void setJobName(String jobName) {
        this.jobName = jobName;
    }

   

    public Projects getProject() {
		return project;
	}

	public void setProject(Projects project) {
		this.project = project;
	}

	public Double getRatePerHour() {
        return ratePerHour;
    }

    public void setRatePerHour(Double ratePerHour) {
        this.ratePerHour = ratePerHour;
    }

    public String getReminder() {
        return reminder;
    }

    public void setReminder(String reminder) {
        this.reminder = reminder;
    }

    public Date getReminderTime() {
        return reminderTime;
    }

    public void setReminderTime(Date reminderTime) {
        this.reminderTime = reminderTime;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Set<TimeLogs> getTimeLogs() {
        return timeLogs;
    }

    public void setTimeLogs(Set<TimeLogs> timeLogs) {
        this.timeLogs = timeLogs;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

package com.nouros.hrms.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;
import org.hibernate.envers.Audited;
import org.hibernate.envers.NotAudited;
import org.hibernate.envers.RelationTargetAuditMode;

import com.enttribe.core.generic.exceptions.application.BusinessException;
import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.enttribe.product.pii.listners.PrePersistListener;
import com.enttribe.product.security.spring.userdetails.CustomerInfo;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.validation.constraints.Size;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Audited
@Table(name = "EMPLOYEE")
@JsonInclude(JsonInclude.Include.NON_NULL)
//@Filters(value = { @Filter(name = "employeeArabicFirstNameNInFilter", condition = "ARABIC_FIRST_NAME not in (:arabicFirstName)"), @Filter(name = "employeeArabicFirstNameEqFilter", condition = "ARABIC_FIRST_NAME = :arabicFirstName"), @Filter(name = "employeeArabicFirstNameNEqFilter", condition = "ARABIC_FIRST_NAME != :arabicFirstName"), @Filter(name = "employeeArabicFirstNameInFilter", condition = "ARABIC_FIRST_NAME in (:arabicFirstName)"), @Filter(name = "employeeArabicLastNameNInFilter", condition = "ARABIC_LAST_NAME not in (:arabicLastName)"), @Filter(name = "employeeArabicLastNameEqFilter", condition = "ARABIC_LAST_NAME = :arabicLastName"), @Filter(name = "employeeArabicLastNameNEqFilter", condition = "ARABIC_LAST_NAME != :arabicLastName"), @Filter(name = "employeeArabicLastNameInFilter", condition = "ARABIC_LAST_NAME in (:arabicLastName)"), @Filter(name = "employeeArabicMiddleNameNInFilter", condition = "ARABIC_MIDDLE_NAME not in (:arabicMiddleName)"), @Filter(name = "employeeArabicMiddleNameEqFilter", condition = "ARABIC_MIDDLE_NAME = :arabicMiddleName"), @Filter(name = "employeeArabicMiddleNameNEqFilter", condition = "ARABIC_MIDDLE_NAME != :arabicMiddleName"), @Filter(name = "employeeArabicMiddleNameInFilter", condition = "ARABIC_MIDDLE_NAME in (:arabicMiddleName)"), @Filter(name = "employeeAttachment1NInFilter", condition = "ATTACHMENT1 not in (:attachment1)"), @Filter(name = "employeeAttachment1EqFilter", condition = "ATTACHMENT1 = :attachment1"), @Filter(name = "employeeAttachment1NEqFilter", condition = "ATTACHMENT1 != :attachment1"), @Filter(name = "employeeAttachment1InFilter", condition = "ATTACHMENT1 in (:attachment1)"), @Filter(name = "employeeAttachment2NInFilter", condition = "ATTACHMENT2 not in (:attachment2)"), @Filter(name = "employeeAttachment2EqFilter", condition = "ATTACHMENT2 = :attachment2"), @Filter(name = "employeeAttachment2NEqFilter", condition = "ATTACHMENT2 != :attachment2"), @Filter(name = "employeeAttachment2InFilter", condition = "ATTACHMENT2 in (:attachment2)"), @Filter(name = "employeeBloodGroupNInFilter", condition = "BLOOD_GROUP not in (:bloodGroup)"), @Filter(name = "employeeBloodGroupEqFilter", condition = "BLOOD_GROUP = :bloodGroup"), @Filter(name = "employeeBloodGroupNEqFilter", condition = "BLOOD_GROUP != :bloodGroup"), @Filter(name = "employeeBloodGroupInFilter", condition = "BLOOD_GROUP in (:bloodGroup)"), @Filter(name = "employeeCitizenshipNInFilter", condition = "CITIZENSHIP not in (:citizenship)"), @Filter(name = "employeeCitizenshipEqFilter", condition = "CITIZENSHIP = :citizenship"), @Filter(name = "employeeCitizenshipNEqFilter", condition = "CITIZENSHIP != :citizenship"), @Filter(name = "employeeCitizenshipInFilter", condition = "CITIZENSHIP in (:citizenship)"), @Filter(name = "employeeCompanyNInFilter", condition = "COMPANY not in (:company)"), @Filter(name = "employeeCompanyEqFilter", condition = "COMPANY = :company"), @Filter(name = "employeeCompanyNEqFilter", condition = "COMPANY != :company"), @Filter(name = "employeeCompanyInFilter", condition = "COMPANY in (:company)"), @Filter(name = "employeeCountryOfResidenceNInFilter", condition = "COUNTRY_OF_RESIDENCE not in (:countryOfResidence)"), @Filter(name = "employeeCountryOfResidenceEqFilter", condition = "COUNTRY_OF_RESIDENCE = :countryOfResidence"), @Filter(name = "employeeCountryOfResidenceNEqFilter", condition = "COUNTRY_OF_RESIDENCE != :countryOfResidence"), @Filter(name = "employeeCountryOfResidenceInFilter", condition = "COUNTRY_OF_RESIDENCE in (:countryOfResidence)"), @Filter(name = "employeeDateOfBirthGtFilter", condition = "DATE_OF_BIRTH > (SELECT DATE_FORMAT(:dateOfBirth, '%Y-%m-%d'))"), @Filter(name = "employeeDateOfBirthLtFilter", condition = "DATE_OF_BIRTH < (SELECT DATE_FORMAT(:dateOfBirth, '%Y-%m-%d'))"), @Filter(name = "employeeDateOfBirthBwFilter", condition = "DATE_OF_BIRTH >(SELECT DATE_FORMAT(:dateOfBirth_MIN, '%Y-%m-%d')) AND DATE_OF_BIRTH <(SELECT DATE_FORMAT(:dateOfBirth_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeDateOfExitGtFilter", condition = "DATE_OF_EXIT > (SELECT DATE_FORMAT(:dateOfExit, '%Y-%m-%d'))"), @Filter(name = "employeeDateOfExitLtFilter", condition = "DATE_OF_EXIT < (SELECT DATE_FORMAT(:dateOfExit, '%Y-%m-%d'))"), @Filter(name = "employeeDateOfExitBwFilter", condition = "DATE_OF_EXIT >(SELECT DATE_FORMAT(:dateOfExit_MIN, '%Y-%m-%d')) AND DATE_OF_EXIT <(SELECT DATE_FORMAT(:dateOfExit_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeDateOfJoiningGtFilter", condition = "DATE_OF_JOINING > (SELECT DATE_FORMAT(:dateOfJoining, '%Y-%m-%d'))"), @Filter(name = "employeeDateOfJoiningLtFilter", condition = "DATE_OF_JOINING < (SELECT DATE_FORMAT(:dateOfJoining, '%Y-%m-%d'))"), @Filter(name = "employeeDateOfJoiningBwFilter", condition = "DATE_OF_JOINING >(SELECT DATE_FORMAT(:dateOfJoining_MIN, '%Y-%m-%d')) AND DATE_OF_JOINING <(SELECT DATE_FORMAT(:dateOfJoining_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeDepartmentIdGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id)"), @Filter(name = "employeeDepartmentIdNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID not in (:id)"), @Filter(name = "employeeDepartmentIdLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID <= :id)"), @Filter(name = "employeeDepartmentIdLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID < :id)"), @Filter(name = "employeeDepartmentIdEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID = :id)"), @Filter(name = "employeeDepartmentIdNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID != :id)"), @Filter(name = "employeeDepartmentIdInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID in (:id)"), @Filter(name = "employeeDepartmentIdBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id_MIN  AND DEPARTMENT.ID < :id_MAX )"), @Filter(name = "employeeDepartmentIdGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID >= :id)"), @Filter(name = "employeeDepartmentName2NInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME2 not in (:name2)"), @Filter(name = "employeeDepartmentName2EqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME2 = :name2)"), @Filter(name = "employeeDepartmentName2NEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME2 != :name2)"), @Filter(name = "employeeDepartmentName2InFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME2 in (:name2)"), @Filter(name = "employeeDepartmentName1NInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME1 not in (:name1)"), @Filter(name = "employeeDepartmentName1EqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME1 = :name1)"), @Filter(name = "employeeDepartmentName1NEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME1 != :name1)"), @Filter(name = "employeeDepartmentName1InFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME1 in (:name1)"), @Filter(name = "employeeDesignationDepartmentIdNInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.DEPARTMENT_ID not in (:departmentId)"), @Filter(name = "employeeDesignationDepartmentIdEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.DEPARTMENT_ID = :departmentId)"), @Filter(name = "employeeDesignationDepartmentIdNEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.DEPARTMENT_ID != :departmentId)"), @Filter(name = "employeeDesignationDepartmentIdInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.DEPARTMENT_ID in (:departmentId)"), @Filter(name = "employeeDesignationIdGtFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.ID > :id)"), @Filter(name = "employeeDesignationIdNInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.ID not in (:id)"), @Filter(name = "employeeDesignationIdLtEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.ID <= :id)"), @Filter(name = "employeeDesignationIdLtFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.ID < :id)"), @Filter(name = "employeeDesignationIdEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.ID = :id)"), @Filter(name = "employeeDesignationIdNEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.ID != :id)"), @Filter(name = "employeeDesignationIdInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.ID in (:id)"), @Filter(name = "employeeDesignationIdBwFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.ID > :id_MIN  AND DESIGNATION.ID < :id_MAX )"), @Filter(name = "employeeDesignationIdGtEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.ID >= :id)"), @Filter(name = "employeeDesignationNameNInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.NAME not in (:name)"), @Filter(name = "employeeDesignationNameEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.NAME = :name)"), @Filter(name = "employeeDesignationNameNEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.NAME != :name)"), @Filter(name = "employeeDesignationNameInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.NAME in (:name)"), @Filter(name = "employeeDesignationJobGradeGtFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.JOB_GRADE > :jobGrade)"), @Filter(name = "employeeDesignationJobGradeNInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.JOB_GRADE not in (:jobGrade)"), @Filter(name = "employeeDesignationJobGradeLtEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.JOB_GRADE <= :jobGrade)"), @Filter(name = "employeeDesignationJobGradeLtFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.JOB_GRADE < :jobGrade)"), @Filter(name = "employeeDesignationJobGradeEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.JOB_GRADE = :jobGrade)"), @Filter(name = "employeeDesignationJobGradeNEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.JOB_GRADE != :jobGrade)"), @Filter(name = "employeeDesignationJobGradeInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.JOB_GRADE in (:jobGrade)"), @Filter(name = "employeeDesignationJobGradeBwFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.JOB_GRADE > :jobGrade_MIN  AND DESIGNATION.JOB_GRADE < :jobGrade_MAX )"), @Filter(name = "employeeDesignationJobGradeGtEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.JOB_GRADE >= :jobGrade)"), @Filter(name = "employeeDesignationDesignationCodeNInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.DESIGNATION_CODE not in (:designationCode)"), @Filter(name = "employeeDesignationDesignationCodeEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.DESIGNATION_CODE = :designationCode)"), @Filter(name = "employeeDesignationDesignationCodeNEqFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.DESIGNATION_CODE != :designationCode)"), @Filter(name = "employeeDesignationDesignationCodeInFilter", condition = "DESIGNATION_ID in (select DESIGNATION.id from DESIGNATION where DESIGNATION.DESIGNATION_CODE in (:designationCode)"), @Filter(name = "employeeEmergencyContactFirstNameNInFilter", condition = "EMERGENCY_CONTACT_FIRST_NAME not in (:emergencyContactFirstName)"), @Filter(name = "employeeEmergencyContactFirstNameEqFilter", condition = "EMERGENCY_CONTACT_FIRST_NAME = :emergencyContactFirstName"), @Filter(name = "employeeEmergencyContactFirstNameNEqFilter", condition = "EMERGENCY_CONTACT_FIRST_NAME != :emergencyContactFirstName"), @Filter(name = "employeeEmergencyContactFirstNameInFilter", condition = "EMERGENCY_CONTACT_FIRST_NAME in (:emergencyContactFirstName)"), @Filter(name = "employeeEmergencyContactFullNameNInFilter", condition = "EMERGENCY_CONTACT_FULL_NAME not in (:emergencyContactFullName)"), @Filter(name = "employeeEmergencyContactFullNameEqFilter", condition = "EMERGENCY_CONTACT_FULL_NAME = :emergencyContactFullName"), @Filter(name = "employeeEmergencyContactFullNameNEqFilter", condition = "EMERGENCY_CONTACT_FULL_NAME != :emergencyContactFullName"), @Filter(name = "employeeEmergencyContactFullNameInFilter", condition = "EMERGENCY_CONTACT_FULL_NAME in (:emergencyContactFullName)"), @Filter(name = "employeeEmergencyContactLastNameNInFilter", condition = "EMERGENCY_CONTACT_LAST_NAME not in (:emergencyContactLastName)"), @Filter(name = "employeeEmergencyContactLastNameEqFilter", condition = "EMERGENCY_CONTACT_LAST_NAME = :emergencyContactLastName"), @Filter(name = "employeeEmergencyContactLastNameNEqFilter", condition = "EMERGENCY_CONTACT_LAST_NAME != :emergencyContactLastName"), @Filter(name = "employeeEmergencyContactLastNameInFilter", condition = "EMERGENCY_CONTACT_LAST_NAME in (:emergencyContactLastName)"), @Filter(name = "employeeEmergencyContactMiddleNameNInFilter", condition = "EMERGENCY_CONTACT_MIDDLE_NAME not in (:emergencyContactMiddleName)"), @Filter(name = "employeeEmergencyContactMiddleNameEqFilter", condition = "EMERGENCY_CONTACT_MIDDLE_NAME = :emergencyContactMiddleName"), @Filter(name = "employeeEmergencyContactMiddleNameNEqFilter", condition = "EMERGENCY_CONTACT_MIDDLE_NAME != :emergencyContactMiddleName"), @Filter(name = "employeeEmergencyContactMiddleNameInFilter", condition = "EMERGENCY_CONTACT_MIDDLE_NAME in (:emergencyContactMiddleName)"), @Filter(name = "employeeEmployeePersonalEmailAddressNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_EMAIL_ADDRESS not in (:personalEmailAddress)"), @Filter(name = "employeeEmployeePersonalEmailAddressEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_EMAIL_ADDRESS = :personalEmailAddress)"), @Filter(name = "employeeEmployeePersonalEmailAddressNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_EMAIL_ADDRESS != :personalEmailAddress)"), @Filter(name = "employeeEmployeePersonalEmailAddressInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_EMAIL_ADDRESS in (:personalEmailAddress)"), @Filter(name = "employeeEmployeeWorkEmailAddressNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_EMAIL_ADDRESS not in (:workEmailAddress)"), @Filter(name = "employeeEmployeeWorkEmailAddressEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_EMAIL_ADDRESS = :workEmailAddress)"), @Filter(name = "employeeEmployeeWorkEmailAddressNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_EMAIL_ADDRESS != :workEmailAddress)"), @Filter(name = "employeeEmployeeWorkEmailAddressInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_EMAIL_ADDRESS in (:workEmailAddress)"), @Filter(name = "employeeEmployeeArabicMiddleNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_MIDDLE_NAME not in (:arabicMiddleName)"), @Filter(name = "employeeEmployeeArabicMiddleNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_MIDDLE_NAME = :arabicMiddleName)"), @Filter(name = "employeeEmployeeArabicMiddleNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_MIDDLE_NAME != :arabicMiddleName)"), @Filter(name = "employeeEmployeeArabicMiddleNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_MIDDLE_NAME in (:arabicMiddleName)"), @Filter(name = "employeeEmployeeEmploymentStatusNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYMENT_STATUS not in (:employmentStatus)"), @Filter(name = "employeeEmployeeEmploymentStatusEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYMENT_STATUS = :employmentStatus)"), @Filter(name = "employeeEmployeeEmploymentStatusNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYMENT_STATUS != :employmentStatus)"), @Filter(name = "employeeEmployeeEmploymentStatusInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYMENT_STATUS in (:employmentStatus)"), @Filter(name = "employeeEmployeePersonalMobileNumberNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_MOBILE_NUMBER not in (:personalMobileNumber)"), @Filter(name = "employeeEmployeePersonalMobileNumberEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_MOBILE_NUMBER = :personalMobileNumber)"), @Filter(name = "employeeEmployeePersonalMobileNumberNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_MOBILE_NUMBER != :personalMobileNumber)"), @Filter(name = "employeeEmployeePersonalMobileNumberInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PERSONAL_MOBILE_NUMBER in (:personalMobileNumber)"), @Filter(name = "employeeEmployeeArabicFirstNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_FIRST_NAME not in (:arabicFirstName)"), @Filter(name = "employeeEmployeeArabicFirstNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_FIRST_NAME = :arabicFirstName)"), @Filter(name = "employeeEmployeeArabicFirstNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_FIRST_NAME != :arabicFirstName)"), @Filter(name = "employeeEmployeeArabicFirstNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_FIRST_NAME in (:arabicFirstName)"), @Filter(name = "employeeEmployeeBloodGroupNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BLOOD_GROUP not in (:bloodGroup)"), @Filter(name = "employeeEmployeeBloodGroupEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BLOOD_GROUP = :bloodGroup)"), @Filter(name = "employeeEmployeeBloodGroupNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BLOOD_GROUP != :bloodGroup)"), @Filter(name = "employeeEmployeeBloodGroupInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.BLOOD_GROUP in (:bloodGroup)"), @Filter(name = "employeeEmployeeWorkPhoneNumberNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_PHONE_NUMBER not in (:workPhoneNumber)"), @Filter(name = "employeeEmployeeWorkPhoneNumberEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_PHONE_NUMBER = :workPhoneNumber)"), @Filter(name = "employeeEmployeeWorkPhoneNumberNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_PHONE_NUMBER != :workPhoneNumber)"), @Filter(name = "employeeEmployeeWorkPhoneNumberInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.WORK_PHONE_NUMBER in (:workPhoneNumber)"), @Filter(name = "employeeEmployeeIdGtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id)"), @Filter(name = "employeeEmployeeIdNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID not in (:id)"), @Filter(name = "employeeEmployeeIdLtEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID <= :id)"), @Filter(name = "employeeEmployeeIdLtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID < :id)"), @Filter(name = "employeeEmployeeIdEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID = :id)"), @Filter(name = "employeeEmployeeIdNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID != :id)"), @Filter(name = "employeeEmployeeIdInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID in (:id)"), @Filter(name = "employeeEmployeeIdBwFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id_MIN  AND EMPLOYEE.ID < :id_MAX )"), @Filter(name = "employeeEmployeeIdGtEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID >= :id)"), @Filter(name = "employeeEmployeeAttachment2NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ATTACHMENT2 not in (:attachment2)"), @Filter(name = "employeeEmployeeAttachment2EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ATTACHMENT2 = :attachment2)"), @Filter(name = "employeeEmployeeAttachment2NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ATTACHMENT2 != :attachment2)"), @Filter(name = "employeeEmployeeAttachment2InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ATTACHMENT2 in (:attachment2)"), @Filter(name = "employeeEmployeeAttachment1NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ATTACHMENT1 not in (:attachment1)"), @Filter(name = "employeeEmployeeAttachment1EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ATTACHMENT1 = :attachment1)"), @Filter(name = "employeeEmployeeAttachment1NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ATTACHMENT1 != :attachment1)"), @Filter(name = "employeeEmployeeAttachment1InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ATTACHMENT1 in (:attachment1)"), @Filter(name = "employeeEmployeeEmergencyContactLastNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_LAST_NAME not in (:emergencyContactLastName)"), @Filter(name = "employeeEmployeeEmergencyContactLastNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_LAST_NAME = :emergencyContactLastName)"), @Filter(name = "employeeEmployeeEmergencyContactLastNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_LAST_NAME != :emergencyContactLastName)"), @Filter(name = "employeeEmployeeEmergencyContactLastNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_LAST_NAME in (:emergencyContactLastName)"), @Filter(name = "employeeEmployeeArabicLastNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_LAST_NAME not in (:arabicLastName)"), @Filter(name = "employeeEmployeeArabicLastNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_LAST_NAME = :arabicLastName)"), @Filter(name = "employeeEmployeeArabicLastNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_LAST_NAME != :arabicLastName)"), @Filter(name = "employeeEmployeeArabicLastNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ARABIC_LAST_NAME in (:arabicLastName)"), @Filter(name = "employeeEmployeeTypeContractNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TYPE_CONTRACT not in (:typeContract)"), @Filter(name = "employeeEmployeeTypeContractEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TYPE_CONTRACT = :typeContract)"), @Filter(name = "employeeEmployeeTypeContractNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TYPE_CONTRACT != :typeContract)"), @Filter(name = "employeeEmployeeTypeContractInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TYPE_CONTRACT in (:typeContract)"), @Filter(name = "employeeEmployeeFirstNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FIRST_NAME not in (:firstName)"), @Filter(name = "employeeEmployeeFirstNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FIRST_NAME = :firstName)"), @Filter(name = "employeeEmployeeFirstNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FIRST_NAME != :firstName)"), @Filter(name = "employeeEmployeeFirstNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FIRST_NAME in (:firstName)"), @Filter(name = "employeeEmployeePrimaryShortAddressNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_SHORT_ADDRESS not in (:primaryShortAddress)"), @Filter(name = "employeeEmployeePrimaryShortAddressEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_SHORT_ADDRESS = :primaryShortAddress)"), @Filter(name = "employeeEmployeePrimaryShortAddressNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_SHORT_ADDRESS != :primaryShortAddress)"), @Filter(name = "employeeEmployeePrimaryShortAddressInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_SHORT_ADDRESS in (:primaryShortAddress)"), @Filter(name = "employeeEmployeeText3NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT3 not in (:text3)"), @Filter(name = "employeeEmployeeText3EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT3 = :text3)"), @Filter(name = "employeeEmployeeText3NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT3 != :text3)"), @Filter(name = "employeeEmployeeText3InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT3 in (:text3)"), @Filter(name = "employeeEmployeeText4NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT4 not in (:text4)"), @Filter(name = "employeeEmployeeText4EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT4 = :text4)"), @Filter(name = "employeeEmployeeText4NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT4 != :text4)"), @Filter(name = "employeeEmployeeText4InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT4 in (:text4)"), @Filter(name = "employeeEmployeeText10NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT10 not in (:text10)"), @Filter(name = "employeeEmployeeText10EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT10 = :text10)"), @Filter(name = "employeeEmployeeText10NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT10 != :text10)"), @Filter(name = "employeeEmployeeText10InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT10 in (:text10)"), @Filter(name = "employeeEmployeeText1NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT1 not in (:text1)"), @Filter(name = "employeeEmployeeText1EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT1 = :text1)"), @Filter(name = "employeeEmployeeText1NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT1 != :text1)"), @Filter(name = "employeeEmployeeText1InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT1 in (:text1)"), @Filter(name = "employeeEmployeeText2NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT2 not in (:text2)"), @Filter(name = "employeeEmployeeText2EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT2 = :text2)"), @Filter(name = "employeeEmployeeText2NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT2 != :text2)"), @Filter(name = "employeeEmployeeText2InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT2 in (:text2)"), @Filter(name = "employeeEmployeeReportingManagerUseridFkGtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER_USERID_FK > :reportingManagerUseridFk)"), @Filter(name = "employeeEmployeeReportingManagerUseridFkNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER_USERID_FK not in (:reportingManagerUseridFk)"), @Filter(name = "employeeEmployeeReportingManagerUseridFkLtEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER_USERID_FK <= :reportingManagerUseridFk)"), @Filter(name = "employeeEmployeeReportingManagerUseridFkLtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER_USERID_FK < :reportingManagerUseridFk)"), @Filter(name = "employeeEmployeeReportingManagerUseridFkEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER_USERID_FK = :reportingManagerUseridFk)"), @Filter(name = "employeeEmployeeReportingManagerUseridFkNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER_USERID_FK != :reportingManagerUseridFk)"), @Filter(name = "employeeEmployeeReportingManagerUseridFkInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER_USERID_FK in (:reportingManagerUseridFk)"), @Filter(name = "employeeEmployeeReportingManagerUseridFkBwFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER_USERID_FK > :reportingManagerUseridFk_MIN  AND EMPLOYEE.REPORTING_MANAGER_USERID_FK < :reportingManagerUseridFk_MAX )"), @Filter(name = "employeeEmployeeReportingManagerUseridFkGtEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.REPORTING_MANAGER_USERID_FK >= :reportingManagerUseridFk)"), @Filter(name = "employeeEmployeeText7NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT7 not in (:text7)"), @Filter(name = "employeeEmployeeText7EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT7 = :text7)"), @Filter(name = "employeeEmployeeText7NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT7 != :text7)"), @Filter(name = "employeeEmployeeText7InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT7 in (:text7)"), @Filter(name = "employeeEmployeeText8NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT8 not in (:text8)"), @Filter(name = "employeeEmployeeText8EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT8 = :text8)"), @Filter(name = "employeeEmployeeText8NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT8 != :text8)"), @Filter(name = "employeeEmployeeText8InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT8 in (:text8)"), @Filter(name = "employeeEmployeeText5NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT5 not in (:text5)"), @Filter(name = "employeeEmployeeText5EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT5 = :text5)"), @Filter(name = "employeeEmployeeText5NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT5 != :text5)"), @Filter(name = "employeeEmployeeText5InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT5 in (:text5)"), @Filter(name = "employeeEmployeeText6NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT6 not in (:text6)"), @Filter(name = "employeeEmployeeText6EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT6 = :text6)"), @Filter(name = "employeeEmployeeText6NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT6 != :text6)"), @Filter(name = "employeeEmployeeText6InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT6 in (:text6)"), @Filter(name = "employeeEmployeeMaritalStatusNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MARITAL_STATUS not in (:maritalStatus)"), @Filter(name = "employeeEmployeeMaritalStatusEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MARITAL_STATUS = :maritalStatus)"), @Filter(name = "employeeEmployeeMaritalStatusNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MARITAL_STATUS != :maritalStatus)"), @Filter(name = "employeeEmployeeMaritalStatusInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MARITAL_STATUS in (:maritalStatus)"), @Filter(name = "employeeEmployeeText9NInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT9 not in (:text9)"), @Filter(name = "employeeEmployeeText9EqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT9 = :text9)"), @Filter(name = "employeeEmployeeText9NEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT9 != :text9)"), @Filter(name = "employeeEmployeeText9InFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.TEXT9 in (:text9)"), @Filter(name = "employeeEmployeeLastNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.LAST_NAME not in (:lastName)"), @Filter(name = "employeeEmployeeLastNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.LAST_NAME = :lastName)"), @Filter(name = "employeeEmployeeLastNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.LAST_NAME != :lastName)"), @Filter(name = "employeeEmployeeLastNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.LAST_NAME in (:lastName)"), @Filter(name = "employeeEmployeeGenderNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.GENDER not in (:gender)"), @Filter(name = "employeeEmployeeGenderEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.GENDER = :gender)"), @Filter(name = "employeeEmployeeGenderNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.GENDER != :gender)"), @Filter(name = "employeeEmployeeGenderInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.GENDER in (:gender)"), @Filter(name = "employeeEmployeePrimaryAddressCityNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_CITY not in (:primaryAddressCity)"), @Filter(name = "employeeEmployeePrimaryAddressCityEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_CITY = :primaryAddressCity)"), @Filter(name = "employeeEmployeePrimaryAddressCityNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_CITY != :primaryAddressCity)"), @Filter(name = "employeeEmployeePrimaryAddressCityInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_CITY in (:primaryAddressCity)"), @Filter(name = "employeeEmployeePrimaryAddressCountryNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_COUNTRY not in (:primaryAddressCountry)"), @Filter(name = "employeeEmployeePrimaryAddressCountryEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_COUNTRY = :primaryAddressCountry)"), @Filter(name = "employeeEmployeePrimaryAddressCountryNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_COUNTRY != :primaryAddressCountry)"), @Filter(name = "employeeEmployeePrimaryAddressCountryInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_COUNTRY in (:primaryAddressCountry)"), @Filter(name = "employeeEmployeeEmergencyContactFirstNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_FIRST_NAME not in (:emergencyContactFirstName)"), @Filter(name = "employeeEmployeeEmergencyContactFirstNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_FIRST_NAME = :emergencyContactFirstName)"), @Filter(name = "employeeEmployeeEmergencyContactFirstNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_FIRST_NAME != :emergencyContactFirstName)"), @Filter(name = "employeeEmployeeEmergencyContactFirstNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_FIRST_NAME in (:emergencyContactFirstName)"), @Filter(name = "employeeEmployeeCountryOfResidenceNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY_OF_RESIDENCE not in (:countryOfResidence)"), @Filter(name = "employeeEmployeeCountryOfResidenceEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY_OF_RESIDENCE = :countryOfResidence)"), @Filter(name = "employeeEmployeeCountryOfResidenceNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY_OF_RESIDENCE != :countryOfResidence)"), @Filter(name = "employeeEmployeeCountryOfResidenceInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COUNTRY_OF_RESIDENCE in (:countryOfResidence)"), @Filter(name = "employeeEmployeeEmergencyContactFullNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_FULL_NAME not in (:emergencyContactFullName)"), @Filter(name = "employeeEmployeeEmergencyContactFullNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_FULL_NAME = :emergencyContactFullName)"), @Filter(name = "employeeEmployeeEmergencyContactFullNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_FULL_NAME != :emergencyContactFullName)"), @Filter(name = "employeeEmployeeEmergencyContactFullNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_FULL_NAME in (:emergencyContactFullName)"), @Filter(name = "employeeEmployeePrimaryAddressBuildingNumberNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_BUILDING_NUMBER not in (:primaryAddressBuildingNumber)"), @Filter(name = "employeeEmployeePrimaryAddressBuildingNumberEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_BUILDING_NUMBER = :primaryAddressBuildingNumber)"), @Filter(name = "employeeEmployeePrimaryAddressBuildingNumberNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_BUILDING_NUMBER != :primaryAddressBuildingNumber)"), @Filter(name = "employeeEmployeePrimaryAddressBuildingNumberInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_BUILDING_NUMBER in (:primaryAddressBuildingNumber)"), @Filter(name = "employeeEmployeeCompanyNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COMPANY not in (:company)"), @Filter(name = "employeeEmployeeCompanyEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COMPANY = :company)"), @Filter(name = "employeeEmployeeCompanyNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COMPANY != :company)"), @Filter(name = "employeeEmployeeCompanyInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.COMPANY in (:company)"), @Filter(name = "employeeEmployeeRelationshipNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RELATIONSHIP not in (:relationship)"), @Filter(name = "employeeEmployeeRelationshipEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RELATIONSHIP = :relationship)"), @Filter(name = "employeeEmployeeRelationshipNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RELATIONSHIP != :relationship)"), @Filter(name = "employeeEmployeeRelationshipInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RELATIONSHIP in (:relationship)"), @Filter(name = "employeeEmployeeHijriDateOfBirthGtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.HIJRI_DATE_OF_BIRTH > (SELECT DATE_FORMAT(:hijriDateOfBirth, '%Y-%m-%d'))))"), @Filter(name = "employeeEmployeeHijriDateOfBirthLtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.HIJRI_DATE_OF_BIRTH < (SELECT DATE_FORMAT(:hijriDateOfBirth, '%Y-%m-%d'))))"), @Filter(name = "employeeEmployeeHijriDateOfBirthBwFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.HIJRI_DATE_OF_BIRTH > (SELECT DATE_FORMAT(:hijriDateOfBirth_MIN , '%Y-%m-%d')) AND EMPLOYEE.HIJRI_DATE_OF_BIRTH < (SELECT DATE_FORMAT(:hijriDateOfBirth_MAX , '%Y-%m-%d')))"), @Filter(name = "employeeEmployeeEmergencyContactMiddleNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_MIDDLE_NAME not in (:emergencyContactMiddleName)"), @Filter(name = "employeeEmployeeEmergencyContactMiddleNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_MIDDLE_NAME = :emergencyContactMiddleName)"), @Filter(name = "employeeEmployeeEmergencyContactMiddleNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_MIDDLE_NAME != :emergencyContactMiddleName)"), @Filter(name = "employeeEmployeeEmergencyContactMiddleNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMERGENCY_CONTACT_MIDDLE_NAME in (:emergencyContactMiddleName)"), @Filter(name = "employeeEmployeeEmploymentTypeNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYMENT_TYPE not in (:employmentType)"), @Filter(name = "employeeEmployeeEmploymentTypeEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYMENT_TYPE = :employmentType)"), @Filter(name = "employeeEmployeeEmploymentTypeNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYMENT_TYPE != :employmentType)"), @Filter(name = "employeeEmployeeEmploymentTypeInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYMENT_TYPE in (:employmentType)"), @Filter(name = "employeeEmployeeUseridPkGtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.USERID_PK > :useridPk)"), @Filter(name = "employeeEmployeeUseridPkNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.USERID_PK not in (:useridPk)"), @Filter(name = "employeeEmployeeUseridPkLtEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.USERID_PK <= :useridPk)"), @Filter(name = "employeeEmployeeUseridPkLtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.USERID_PK < :useridPk)"), @Filter(name = "employeeEmployeeUseridPkEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.USERID_PK = :useridPk)"), @Filter(name = "employeeEmployeeUseridPkNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.USERID_PK != :useridPk)"), @Filter(name = "employeeEmployeeUseridPkInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.USERID_PK in (:useridPk)"), @Filter(name = "employeeEmployeeUseridPkBwFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.USERID_PK > :useridPk_MIN  AND EMPLOYEE.USERID_PK < :useridPk_MAX )"), @Filter(name = "employeeEmployeeUseridPkGtEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.USERID_PK >= :useridPk)"), @Filter(name = "employeeEmployeeCitizenshipNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITIZENSHIP not in (:citizenship)"), @Filter(name = "employeeEmployeeCitizenshipEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITIZENSHIP = :citizenship)"), @Filter(name = "employeeEmployeeCitizenshipNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITIZENSHIP != :citizenship)"), @Filter(name = "employeeEmployeeCitizenshipInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.CITIZENSHIP in (:citizenship)"), @Filter(name = "employeeEmployeeFullNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FULL_NAME not in (:fullName)"), @Filter(name = "employeeEmployeeFullNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FULL_NAME = :fullName)"), @Filter(name = "employeeEmployeeFullNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FULL_NAME != :fullName)"), @Filter(name = "employeeEmployeeFullNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.FULL_NAME in (:fullName)"), @Filter(name = "employeeEmployeeDateOfBirthGtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_BIRTH > (SELECT DATE_FORMAT(:dateOfBirth, '%Y-%m-%d'))))"), @Filter(name = "employeeEmployeeDateOfBirthLtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_BIRTH < (SELECT DATE_FORMAT(:dateOfBirth, '%Y-%m-%d'))))"), @Filter(name = "employeeEmployeeDateOfBirthBwFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_BIRTH > (SELECT DATE_FORMAT(:dateOfBirth_MIN , '%Y-%m-%d')) AND EMPLOYEE.DATE_OF_BIRTH < (SELECT DATE_FORMAT(:dateOfBirth_MAX , '%Y-%m-%d')))"), @Filter(name = "employeeEmployeeDateOfExitGtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_EXIT > (SELECT DATE_FORMAT(:dateOfExit, '%Y-%m-%d'))))"), @Filter(name = "employeeEmployeeDateOfExitLtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_EXIT < (SELECT DATE_FORMAT(:dateOfExit, '%Y-%m-%d'))))"), @Filter(name = "employeeEmployeeDateOfExitBwFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_EXIT > (SELECT DATE_FORMAT(:dateOfExit_MIN , '%Y-%m-%d')) AND EMPLOYEE.DATE_OF_EXIT < (SELECT DATE_FORMAT(:dateOfExit_MAX , '%Y-%m-%d')))"), @Filter(name = "employeeEmployeeEmployeeIdNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEE_ID not in (:employeeId)"), @Filter(name = "employeeEmployeeEmployeeIdEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEE_ID = :employeeId)"), @Filter(name = "employeeEmployeeEmployeeIdNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEE_ID != :employeeId)"), @Filter(name = "employeeEmployeeEmployeeIdInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.EMPLOYEE_ID in (:employeeId)"), @Filter(name = "employeeEmployeePrimaryAddressPostalCodeNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_POSTAL_CODE not in (:primaryAddressPostalCode)"), @Filter(name = "employeeEmployeePrimaryAddressPostalCodeEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_POSTAL_CODE = :primaryAddressPostalCode)"), @Filter(name = "employeeEmployeePrimaryAddressPostalCodeNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_POSTAL_CODE != :primaryAddressPostalCode)"), @Filter(name = "employeeEmployeePrimaryAddressPostalCodeInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.PRIMARY_ADDRESS_POSTAL_CODE in (:primaryAddressPostalCode)"), @Filter(name = "employeeEmployeeReligionNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RELIGION not in (:religion)"), @Filter(name = "employeeEmployeeReligionEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RELIGION = :religion)"), @Filter(name = "employeeEmployeeReligionNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RELIGION != :religion)"), @Filter(name = "employeeEmployeeReligionInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.RELIGION in (:religion)"), @Filter(name = "employeeEmployeeDateOfJoiningGtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_JOINING > (SELECT DATE_FORMAT(:dateOfJoining, '%Y-%m-%d'))))"), @Filter(name = "employeeEmployeeDateOfJoiningLtFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_JOINING < (SELECT DATE_FORMAT(:dateOfJoining, '%Y-%m-%d'))))"), @Filter(name = "employeeEmployeeDateOfJoiningBwFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.DATE_OF_JOINING > (SELECT DATE_FORMAT(:dateOfJoining_MIN , '%Y-%m-%d')) AND EMPLOYEE.DATE_OF_JOINING < (SELECT DATE_FORMAT(:dateOfJoining_MAX , '%Y-%m-%d')))"), @Filter(name = "employeeEmployeeMiddleNameNInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MIDDLE_NAME not in (:middleName)"), @Filter(name = "employeeEmployeeMiddleNameEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MIDDLE_NAME = :middleName)"), @Filter(name = "employeeEmployeeMiddleNameNEqFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MIDDLE_NAME != :middleName)"), @Filter(name = "employeeEmployeeMiddleNameInFilter", condition = "REPORTING_MANAGER in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.MIDDLE_NAME in (:middleName)"), @Filter(name = "employeeEmployeeIdNInFilter", condition = "EMPLOYEE_ID not in (:employeeId)"), @Filter(name = "employeeEmployeeIdEqFilter", condition = "EMPLOYEE_ID = :employeeId"), @Filter(name = "employeeEmployeeIdNEqFilter", condition = "EMPLOYEE_ID != :employeeId"), @Filter(name = "employeeEmployeeIdInFilter", condition = "EMPLOYEE_ID in (:employeeId)"), @Filter(name = "employeeEmploymentStatusNInFilter", condition = "EMPLOYMENT_STATUS not in (:employmentStatus)"), @Filter(name = "employeeEmploymentStatusEqFilter", condition = "EMPLOYMENT_STATUS = :employmentStatus"), @Filter(name = "employeeEmploymentStatusNEqFilter", condition = "EMPLOYMENT_STATUS != :employmentStatus"), @Filter(name = "employeeEmploymentStatusInFilter", condition = "EMPLOYMENT_STATUS in (:employmentStatus)"), @Filter(name = "employeeEmploymentTypeNInFilter", condition = "EMPLOYMENT_TYPE not in (:employmentType)"), @Filter(name = "employeeEmploymentTypeEqFilter", condition = "EMPLOYMENT_TYPE = :employmentType"), @Filter(name = "employeeEmploymentTypeNEqFilter", condition = "EMPLOYMENT_TYPE != :employmentType"), @Filter(name = "employeeEmploymentTypeInFilter", condition = "EMPLOYMENT_TYPE in (:employmentType)"), @Filter(name = "employeeFirstNameNInFilter", condition = "FIRST_NAME not in (:firstName)"), @Filter(name = "employeeFirstNameEqFilter", condition = "FIRST_NAME = :firstName"), @Filter(name = "employeeFirstNameNEqFilter", condition = "FIRST_NAME != :firstName"), @Filter(name = "employeeFirstNameInFilter", condition = "FIRST_NAME in (:firstName)"), @Filter(name = "employeeFullNameNInFilter", condition = "FULL_NAME not in (:fullName)"), @Filter(name = "employeeFullNameEqFilter", condition = "FULL_NAME = :fullName"), @Filter(name = "employeeFullNameNEqFilter", condition = "FULL_NAME != :fullName"), @Filter(name = "employeeFullNameInFilter", condition = "FULL_NAME in (:fullName)"), @Filter(name = "employeeGenderNInFilter", condition = "GENDER not in (:gender)"), @Filter(name = "employeeGenderEqFilter", condition = "GENDER = :gender"), @Filter(name = "employeeGenderNEqFilter", condition = "GENDER != :gender"), @Filter(name = "employeeGenderInFilter", condition = "GENDER in (:gender)"), @Filter(name = "employeeHijriDateOfBirthGtFilter", condition = "HIJRI_DATE_OF_BIRTH > (SELECT DATE_FORMAT(:hijriDateOfBirth, '%Y-%m-%d'))"), @Filter(name = "employeeHijriDateOfBirthLtFilter", condition = "HIJRI_DATE_OF_BIRTH < (SELECT DATE_FORMAT(:hijriDateOfBirth, '%Y-%m-%d'))"), @Filter(name = "employeeHijriDateOfBirthBwFilter", condition = "HIJRI_DATE_OF_BIRTH >(SELECT DATE_FORMAT(:hijriDateOfBirth_MIN, '%Y-%m-%d')) AND HIJRI_DATE_OF_BIRTH <(SELECT DATE_FORMAT(:hijriDateOfBirth_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeIdGtFilter", condition = "ID > :id"), @Filter(name = "employeeIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "employeeIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "employeeIdLtFilter", condition = "ID < :id"), @Filter(name = "employeeIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeIdNEqFilter", condition = "ID != :id"), @Filter(name = "employeeIdInFilter", condition = "ID in (:id)"), @Filter(name = "employeeIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "employeeIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "employeeIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeLastNameNInFilter", condition = "LAST_NAME not in (:lastName)"), @Filter(name = "employeeLastNameEqFilter", condition = "LAST_NAME = :lastName"), @Filter(name = "employeeLastNameNEqFilter", condition = "LAST_NAME != :lastName"), @Filter(name = "employeeLastNameInFilter", condition = "LAST_NAME in (:lastName)"), @Filter(name = "employeeLocationIdGtFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID > :id)"), @Filter(name = "employeeLocationIdNInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID not in (:id)"), @Filter(name = "employeeLocationIdLtEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID <= :id)"), @Filter(name = "employeeLocationIdLtFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID < :id)"), @Filter(name = "employeeLocationIdEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID = :id)"), @Filter(name = "employeeLocationIdNEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID != :id)"), @Filter(name = "employeeLocationIdInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID in (:id)"), @Filter(name = "employeeLocationIdBwFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID > :id_MIN  AND LOCATION.ID < :id_MAX )"), @Filter(name = "employeeLocationIdGtEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.ID >= :id)"), @Filter(name = "employeeLocationName2NInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME2 not in (:name2)"), @Filter(name = "employeeLocationName2EqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME2 = :name2)"), @Filter(name = "employeeLocationName2NEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME2 != :name2)"), @Filter(name = "employeeLocationName2InFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME2 in (:name2)"), @Filter(name = "employeeLocationName1NInFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME1 not in (:name1)"), @Filter(name = "employeeLocationName1EqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME1 = :name1)"), @Filter(name = "employeeLocationName1NEqFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME1 != :name1)"), @Filter(name = "employeeLocationName1InFilter", condition = "LOCATION_ID in (select LOCATION.id from LOCATION where LOCATION.NAME1 in (:name1)"), @Filter(name = "employeeMaritalStatusNInFilter", condition = "MARITAL_STATUS not in (:maritalStatus)"), @Filter(name = "employeeMaritalStatusEqFilter", condition = "MARITAL_STATUS = :maritalStatus"), @Filter(name = "employeeMaritalStatusNEqFilter", condition = "MARITAL_STATUS != :maritalStatus"), @Filter(name = "employeeMaritalStatusInFilter", condition = "MARITAL_STATUS in (:maritalStatus)"), @Filter(name = "employeeMiddleNameNInFilter", condition = "MIDDLE_NAME not in (:middleName)"), @Filter(name = "employeeMiddleNameEqFilter", condition = "MIDDLE_NAME = :middleName"), @Filter(name = "employeeMiddleNameNEqFilter", condition = "MIDDLE_NAME != :middleName"), @Filter(name = "employeeMiddleNameInFilter", condition = "MIDDLE_NAME in (:middleName)"), @Filter(name = "employeePersonalEmailAddressNInFilter", condition = "PERSONAL_EMAIL_ADDRESS not in (:personalEmailAddress)"), @Filter(name = "employeePersonalEmailAddressEqFilter", condition = "PERSONAL_EMAIL_ADDRESS = :personalEmailAddress"), @Filter(name = "employeePersonalEmailAddressNEqFilter", condition = "PERSONAL_EMAIL_ADDRESS != :personalEmailAddress"), @Filter(name = "employeePersonalEmailAddressInFilter", condition = "PERSONAL_EMAIL_ADDRESS in (:personalEmailAddress)"), @Filter(name = "employeePersonalMobileNumberNInFilter", condition = "PERSONAL_MOBILE_NUMBER not in (:personalMobileNumber)"), @Filter(name = "employeePersonalMobileNumberEqFilter", condition = "PERSONAL_MOBILE_NUMBER = :personalMobileNumber"), @Filter(name = "employeePersonalMobileNumberNEqFilter", condition = "PERSONAL_MOBILE_NUMBER != :personalMobileNumber"), @Filter(name = "employeePersonalMobileNumberInFilter", condition = "PERSONAL_MOBILE_NUMBER in (:personalMobileNumber)"), @Filter(name = "employeePrimaryAddressBuildingNumberNInFilter", condition = "PRIMARY_ADDRESS_BUILDING_NUMBER not in (:primaryAddressBuildingNumber)"), @Filter(name = "employeePrimaryAddressBuildingNumberEqFilter", condition = "PRIMARY_ADDRESS_BUILDING_NUMBER = :primaryAddressBuildingNumber"), @Filter(name = "employeePrimaryAddressBuildingNumberNEqFilter", condition = "PRIMARY_ADDRESS_BUILDING_NUMBER != :primaryAddressBuildingNumber"), @Filter(name = "employeePrimaryAddressBuildingNumberInFilter", condition = "PRIMARY_ADDRESS_BUILDING_NUMBER in (:primaryAddressBuildingNumber)"), @Filter(name = "employeePrimaryAddressCityNInFilter", condition = "PRIMARY_ADDRESS_CITY not in (:primaryAddressCity)"), @Filter(name = "employeePrimaryAddressCityEqFilter", condition = "PRIMARY_ADDRESS_CITY = :primaryAddressCity"), @Filter(name = "employeePrimaryAddressCityNEqFilter", condition = "PRIMARY_ADDRESS_CITY != :primaryAddressCity"), @Filter(name = "employeePrimaryAddressCityInFilter", condition = "PRIMARY_ADDRESS_CITY in (:primaryAddressCity)"), @Filter(name = "employeePrimaryAddressCountryNInFilter", condition = "PRIMARY_ADDRESS_COUNTRY not in (:primaryAddressCountry)"), @Filter(name = "employeePrimaryAddressCountryEqFilter", condition = "PRIMARY_ADDRESS_COUNTRY = :primaryAddressCountry"), @Filter(name = "employeePrimaryAddressCountryNEqFilter", condition = "PRIMARY_ADDRESS_COUNTRY != :primaryAddressCountry"), @Filter(name = "employeePrimaryAddressCountryInFilter", condition = "PRIMARY_ADDRESS_COUNTRY in (:primaryAddressCountry)"), @Filter(name = "employeePrimaryAddressPostalCodeNInFilter", condition = "PRIMARY_ADDRESS_POSTAL_CODE not in (:primaryAddressPostalCode)"), @Filter(name = "employeePrimaryAddressPostalCodeEqFilter", condition = "PRIMARY_ADDRESS_POSTAL_CODE = :primaryAddressPostalCode"), @Filter(name = "employeePrimaryAddressPostalCodeNEqFilter", condition = "PRIMARY_ADDRESS_POSTAL_CODE != :primaryAddressPostalCode"), @Filter(name = "employeePrimaryAddressPostalCodeInFilter", condition = "PRIMARY_ADDRESS_POSTAL_CODE in (:primaryAddressPostalCode)"), @Filter(name = "employeePrimaryShortAddressNInFilter", condition = "PRIMARY_SHORT_ADDRESS not in (:primaryShortAddress)"), @Filter(name = "employeePrimaryShortAddressEqFilter", condition = "PRIMARY_SHORT_ADDRESS = :primaryShortAddress"), @Filter(name = "employeePrimaryShortAddressNEqFilter", condition = "PRIMARY_SHORT_ADDRESS != :primaryShortAddress"), @Filter(name = "employeePrimaryShortAddressInFilter", condition = "PRIMARY_SHORT_ADDRESS in (:primaryShortAddress)"), @Filter(name = "employeeRelationshipNInFilter", condition = "RELATIONSHIP not in (:relationship)"), @Filter(name = "employeeRelationshipEqFilter", condition = "RELATIONSHIP = :relationship"), @Filter(name = "employeeRelationshipNEqFilter", condition = "RELATIONSHIP != :relationship"), @Filter(name = "employeeRelationshipInFilter", condition = "RELATIONSHIP in (:relationship)"), @Filter(name = "employeeReligionNInFilter", condition = "RELIGION not in (:religion)"), @Filter(name = "employeeReligionEqFilter", condition = "RELIGION = :religion"), @Filter(name = "employeeReligionNEqFilter", condition = "RELIGION != :religion"), @Filter(name = "employeeReligionInFilter", condition = "RELIGION in (:religion)"), @Filter(name = "employeeReportingManagerUseridFkGtFilter", condition = "REPORTING_MANAGER_USERID_FK > :reportingManagerUseridFk"), @Filter(name = "employeeReportingManagerUseridFkNInFilter", condition = "REPORTING_MANAGER_USERID_FK not in (:reportingManagerUseridFk)"), @Filter(name = "employeeReportingManagerUseridFkLtEqFilter", condition = "REPORTING_MANAGER_USERID_FK <= :reportingManagerUseridFk"), @Filter(name = "employeeReportingManagerUseridFkLtFilter", condition = "REPORTING_MANAGER_USERID_FK < :reportingManagerUseridFk"), @Filter(name = "employeeReportingManagerUseridFkEqFilter", condition = "REPORTING_MANAGER_USERID_FK = :reportingManagerUseridFk"), @Filter(name = "employeeReportingManagerUseridFkNEqFilter", condition = "REPORTING_MANAGER_USERID_FK != :reportingManagerUseridFk"), @Filter(name = "employeeReportingManagerUseridFkInFilter", condition = "REPORTING_MANAGER_USERID_FK in (:reportingManagerUseridFk)"), @Filter(name = "employeeReportingManagerUseridFkBwFilter", condition = "REPORTING_MANAGER_USERID_FK > :reportingManagerUseridFk_MIN  AND REPORTING_MANAGER_USERID_FK < :reportingManagerUseridFk_MAX"), @Filter(name = "employeeReportingManagerUseridFkGtEqFilter", condition = "REPORTING_MANAGER_USERID_FK >= :reportingManagerUseridFk"), @Filter(name = "employeeReportingManagerUseridFkEqFilter", condition = "REPORTING_MANAGER_USERID_FK = :reportingManagerUseridFk"), @Filter(name = "employeeText1NInFilter", condition = "TEXT1 not in (:text1)"), @Filter(name = "employeeText1EqFilter", condition = "TEXT1 = :text1"), @Filter(name = "employeeText1NEqFilter", condition = "TEXT1 != :text1"), @Filter(name = "employeeText1InFilter", condition = "TEXT1 in (:text1)"), @Filter(name = "employeeText10NInFilter", condition = "TEXT10 not in (:text10)"), @Filter(name = "employeeText10EqFilter", condition = "TEXT10 = :text10"), @Filter(name = "employeeText10NEqFilter", condition = "TEXT10 != :text10"), @Filter(name = "employeeText10InFilter", condition = "TEXT10 in (:text10)"), @Filter(name = "employeeText2NInFilter", condition = "TEXT2 not in (:text2)"), @Filter(name = "employeeText2EqFilter", condition = "TEXT2 = :text2"), @Filter(name = "employeeText2NEqFilter", condition = "TEXT2 != :text2"), @Filter(name = "employeeText2InFilter", condition = "TEXT2 in (:text2)"), @Filter(name = "employeeText3NInFilter", condition = "TEXT3 not in (:text3)"), @Filter(name = "employeeText3EqFilter", condition = "TEXT3 = :text3"), @Filter(name = "employeeText3NEqFilter", condition = "TEXT3 != :text3"), @Filter(name = "employeeText3InFilter", condition = "TEXT3 in (:text3)"), @Filter(name = "employeeText4NInFilter", condition = "TEXT4 not in (:text4)"), @Filter(name = "employeeText4EqFilter", condition = "TEXT4 = :text4"), @Filter(name = "employeeText4NEqFilter", condition = "TEXT4 != :text4"), @Filter(name = "employeeText4InFilter", condition = "TEXT4 in (:text4)"), @Filter(name = "employeeText5NInFilter", condition = "TEXT5 not in (:text5)"), @Filter(name = "employeeText5EqFilter", condition = "TEXT5 = :text5"), @Filter(name = "employeeText5NEqFilter", condition = "TEXT5 != :text5"), @Filter(name = "employeeText5InFilter", condition = "TEXT5 in (:text5)"), @Filter(name = "employeeText6NInFilter", condition = "TEXT6 not in (:text6)"), @Filter(name = "employeeText6EqFilter", condition = "TEXT6 = :text6"), @Filter(name = "employeeText6NEqFilter", condition = "TEXT6 != :text6"), @Filter(name = "employeeText6InFilter", condition = "TEXT6 in (:text6)"), @Filter(name = "employeeText7NInFilter", condition = "TEXT7 not in (:text7)"), @Filter(name = "employeeText7EqFilter", condition = "TEXT7 = :text7"), @Filter(name = "employeeText7NEqFilter", condition = "TEXT7 != :text7"), @Filter(name = "employeeText7InFilter", condition = "TEXT7 in (:text7)"), @Filter(name = "employeeText8NInFilter", condition = "TEXT8 not in (:text8)"), @Filter(name = "employeeText8EqFilter", condition = "TEXT8 = :text8"), @Filter(name = "employeeText8NEqFilter", condition = "TEXT8 != :text8"), @Filter(name = "employeeText8InFilter", condition = "TEXT8 in (:text8)"), @Filter(name = "employeeText9NInFilter", condition = "TEXT9 not in (:text9)"), @Filter(name = "employeeText9EqFilter", condition = "TEXT9 = :text9"), @Filter(name = "employeeText9NEqFilter", condition = "TEXT9 != :text9"), @Filter(name = "employeeText9InFilter", condition = "TEXT9 in (:text9)"), @Filter(name = "employeeTypeContractNInFilter", condition = "TYPE_CONTRACT not in (:typeContract)"), @Filter(name = "employeeTypeContractEqFilter", condition = "TYPE_CONTRACT = :typeContract"), @Filter(name = "employeeTypeContractNEqFilter", condition = "TYPE_CONTRACT != :typeContract"), @Filter(name = "employeeTypeContractInFilter", condition = "TYPE_CONTRACT in (:typeContract)"), @Filter(name = "employeeUseridPkGtFilter", condition = "USERID_PK > :useridPk"), @Filter(name = "employeeUseridPkNInFilter", condition = "USERID_PK not in (:useridPk)"), @Filter(name = "employeeUseridPkLtEqFilter", condition = "USERID_PK <= :useridPk"), @Filter(name = "employeeUseridPkLtFilter", condition = "USERID_PK < :useridPk"), @Filter(name = "employeeUseridPkEqFilter", condition = "USERID_PK = :useridPk"), @Filter(name = "employeeUseridPkNEqFilter", condition = "USERID_PK != :useridPk"), @Filter(name = "employeeUseridPkInFilter", condition = "USERID_PK in (:useridPk)"), @Filter(name = "employeeUseridPkBwFilter", condition = "USERID_PK > :useridPk_MIN  AND USERID_PK < :useridPk_MAX"), @Filter(name = "employeeUseridPkGtEqFilter", condition = "USERID_PK >= :useridPk"), @Filter(name = "employeeUseridPkEqFilter", condition = "USERID_PK = :useridPk"), @Filter(name = "employeeWorkEmailAddressNInFilter", condition = "WORK_EMAIL_ADDRESS not in (:workEmailAddress)"), @Filter(name = "employeeWorkEmailAddressEqFilter", condition = "WORK_EMAIL_ADDRESS = :workEmailAddress"), @Filter(name = "employeeWorkEmailAddressNEqFilter", condition = "WORK_EMAIL_ADDRESS != :workEmailAddress"), @Filter(name = "employeeWorkEmailAddressInFilter", condition = "WORK_EMAIL_ADDRESS in (:workEmailAddress)"), @Filter(name = "employeeWorkPhoneNumberNInFilter", condition = "WORK_PHONE_NUMBER not in (:workPhoneNumber)"), @Filter(name = "employeeWorkPhoneNumberEqFilter", condition = "WORK_PHONE_NUMBER = :workPhoneNumber"), @Filter(name = "employeeWorkPhoneNumberNEqFilter", condition = "WORK_PHONE_NUMBER != :workPhoneNumber"), @Filter(name = "employeeWorkPhoneNumberInFilter", condition = "WORK_PHONE_NUMBER in (:workPhoneNumber)") })
//@FilterDefs(value = { @FilterDef(name = "employeeArabicFirstNameNInFilter", parameters = { @ParamDef(name = "arabicFirstName", type = String.class) }), @FilterDef(name = "employeeArabicFirstNameEqFilter", parameters = { @ParamDef(name = "arabicFirstName", type = String.class) }), @FilterDef(name = "employeeArabicFirstNameNEqFilter", parameters = { @ParamDef(name = "arabicFirstName", type = String.class) }), @FilterDef(name = "employeeArabicFirstNameInFilter", parameters = { @ParamDef(name = "arabicFirstName", type = String.class) }), @FilterDef(name = "employeeArabicLastNameNInFilter", parameters = { @ParamDef(name = "arabicLastName", type = String.class) }), @FilterDef(name = "employeeArabicLastNameEqFilter", parameters = { @ParamDef(name = "arabicLastName", type = String.class) }), @FilterDef(name = "employeeArabicLastNameNEqFilter", parameters = { @ParamDef(name = "arabicLastName", type = String.class) }), @FilterDef(name = "employeeArabicLastNameInFilter", parameters = { @ParamDef(name = "arabicLastName", type = String.class) }), @FilterDef(name = "employeeArabicMiddleNameNInFilter", parameters = { @ParamDef(name = "arabicMiddleName", type = String.class) }), @FilterDef(name = "employeeArabicMiddleNameEqFilter", parameters = { @ParamDef(name = "arabicMiddleName", type = String.class) }), @FilterDef(name = "employeeArabicMiddleNameNEqFilter", parameters = { @ParamDef(name = "arabicMiddleName", type = String.class) }), @FilterDef(name = "employeeArabicMiddleNameInFilter", parameters = { @ParamDef(name = "arabicMiddleName", type = String.class) }), @FilterDef(name = "employeeAttachment1NInFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "employeeAttachment1EqFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "employeeAttachment1NEqFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "employeeAttachment1InFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "employeeAttachment2NInFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "employeeAttachment2EqFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "employeeAttachment2NEqFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "employeeAttachment2InFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "employeeBloodGroupNInFilter", parameters = { @ParamDef(name = "bloodGroup", type = String.class) }), @FilterDef(name = "employeeBloodGroupEqFilter", parameters = { @ParamDef(name = "bloodGroup", type = String.class) }), @FilterDef(name = "employeeBloodGroupNEqFilter", parameters = { @ParamDef(name = "bloodGroup", type = String.class) }), @FilterDef(name = "employeeBloodGroupInFilter", parameters = { @ParamDef(name = "bloodGroup", type = String.class) }), @FilterDef(name = "employeeCitizenshipNInFilter", parameters = { @ParamDef(name = "citizenship", type = String.class) }), @FilterDef(name = "employeeCitizenshipEqFilter", parameters = { @ParamDef(name = "citizenship", type = String.class) }), @FilterDef(name = "employeeCitizenshipNEqFilter", parameters = { @ParamDef(name = "citizenship", type = String.class) }), @FilterDef(name = "employeeCitizenshipInFilter", parameters = { @ParamDef(name = "citizenship", type = String.class) }), @FilterDef(name = "employeeCompanyNInFilter", parameters = { @ParamDef(name = "company", type = String.class) }), @FilterDef(name = "employeeCompanyEqFilter", parameters = { @ParamDef(name = "company", type = String.class) }), @FilterDef(name = "employeeCompanyNEqFilter", parameters = { @ParamDef(name = "company", type = String.class) }), @FilterDef(name = "employeeCompanyInFilter", parameters = { @ParamDef(name = "company", type = String.class) }), @FilterDef(name = "employeeCountryOfResidenceNInFilter", parameters = { @ParamDef(name = "countryOfResidence", type = String.class) }), @FilterDef(name = "employeeCountryOfResidenceEqFilter", parameters = { @ParamDef(name = "countryOfResidence", type = String.class) }), @FilterDef(name = "employeeCountryOfResidenceNEqFilter", parameters = { @ParamDef(name = "countryOfResidence", type = String.class) }), @FilterDef(name = "employeeCountryOfResidenceInFilter", parameters = { @ParamDef(name = "countryOfResidence", type = String.class) }), @FilterDef(name = "employeeDateOfBirthGtFilter", parameters = { @ParamDef(name = "dateOfBirth", type = String.class) }), @FilterDef(name = "employeeDateOfBirthLtFilter", parameters = { @ParamDef(name = "dateOfBirth", type = String.class) }), @FilterDef(name = "employeeDateOfBirthBwFilter", parameters = { @ParamDef(name = "dateOfBirth_MIN", type = String.class), @ParamDef(name = "dateOfBirth_MAX", type = String.class) }), @FilterDef(name = "employeeDateOfExitGtFilter", parameters = { @ParamDef(name = "dateOfExit", type = String.class) }), @FilterDef(name = "employeeDateOfExitLtFilter", parameters = { @ParamDef(name = "dateOfExit", type = String.class) }), @FilterDef(name = "employeeDateOfExitBwFilter", parameters = { @ParamDef(name = "dateOfExit_MIN", type = String.class), @ParamDef(name = "dateOfExit_MAX", type = String.class) }), @FilterDef(name = "employeeDateOfJoiningGtFilter", parameters = { @ParamDef(name = "dateOfJoining", type = String.class) }), @FilterDef(name = "employeeDateOfJoiningLtFilter", parameters = { @ParamDef(name = "dateOfJoining", type = String.class) }), @FilterDef(name = "employeeDateOfJoiningBwFilter", parameters = { @ParamDef(name = "dateOfJoining_MIN", type = String.class), @ParamDef(name = "dateOfJoining_MAX", type = String.class) }), @FilterDef(name = "employeeDepartmentIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDepartmentIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDepartmentIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDepartmentIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDepartmentIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDepartmentIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDepartmentIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDepartmentIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeDepartmentIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDepartmentName2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeDepartmentName2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeDepartmentName2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeDepartmentName2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeDepartmentName1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeDepartmentName1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeDepartmentName1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeDepartmentName1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeDesignationDepartmentIdNInFilter", parameters = { @ParamDef(name = "departmentId", type = String.class) }), @FilterDef(name = "employeeDesignationDepartmentIdEqFilter", parameters = { @ParamDef(name = "departmentId", type = String.class) }), @FilterDef(name = "employeeDesignationDepartmentIdNEqFilter", parameters = { @ParamDef(name = "departmentId", type = String.class) }), @FilterDef(name = "employeeDesignationDepartmentIdInFilter", parameters = { @ParamDef(name = "departmentId", type = String.class) }), @FilterDef(name = "employeeDesignationIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDesignationIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDesignationIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDesignationIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDesignationIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDesignationIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDesignationIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDesignationIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeDesignationIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeDesignationNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "employeeDesignationNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "employeeDesignationNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "employeeDesignationNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "employeeDesignationJobGradeGtFilter", parameters = { @ParamDef(name = "jobGrade", type = Integer.class) }), @FilterDef(name = "employeeDesignationJobGradeNInFilter", parameters = { @ParamDef(name = "jobGrade", type = Integer.class) }), @FilterDef(name = "employeeDesignationJobGradeLtEqFilter", parameters = { @ParamDef(name = "jobGrade", type = Integer.class) }), @FilterDef(name = "employeeDesignationJobGradeLtFilter", parameters = { @ParamDef(name = "jobGrade", type = Integer.class) }), @FilterDef(name = "employeeDesignationJobGradeEqFilter", parameters = { @ParamDef(name = "jobGrade", type = Integer.class) }), @FilterDef(name = "employeeDesignationJobGradeNEqFilter", parameters = { @ParamDef(name = "jobGrade", type = Integer.class) }), @FilterDef(name = "employeeDesignationJobGradeInFilter", parameters = { @ParamDef(name = "jobGrade", type = Integer.class) }), @FilterDef(name = "employeeDesignationJobGradeBwFilter", parameters = { @ParamDef(name = "jobGrade_MIN", type = Integer.class), @ParamDef(name = "jobGrade_MAX", type = Integer.class) }), @FilterDef(name = "employeeDesignationJobGradeGtEqFilter", parameters = { @ParamDef(name = "jobGrade", type = Integer.class) }), @FilterDef(name = "employeeDesignationDesignationCodeNInFilter", parameters = { @ParamDef(name = "designationCode", type = String.class) }), @FilterDef(name = "employeeDesignationDesignationCodeEqFilter", parameters = { @ParamDef(name = "designationCode", type = String.class) }), @FilterDef(name = "employeeDesignationDesignationCodeNEqFilter", parameters = { @ParamDef(name = "designationCode", type = String.class) }), @FilterDef(name = "employeeDesignationDesignationCodeInFilter", parameters = { @ParamDef(name = "designationCode", type = String.class) }), @FilterDef(name = "employeeEmergencyContactFirstNameNInFilter", parameters = { @ParamDef(name = "emergencyContactFirstName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactFirstNameEqFilter", parameters = { @ParamDef(name = "emergencyContactFirstName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactFirstNameNEqFilter", parameters = { @ParamDef(name = "emergencyContactFirstName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactFirstNameInFilter", parameters = { @ParamDef(name = "emergencyContactFirstName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactFullNameNInFilter", parameters = { @ParamDef(name = "emergencyContactFullName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactFullNameEqFilter", parameters = { @ParamDef(name = "emergencyContactFullName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactFullNameNEqFilter", parameters = { @ParamDef(name = "emergencyContactFullName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactFullNameInFilter", parameters = { @ParamDef(name = "emergencyContactFullName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactLastNameNInFilter", parameters = { @ParamDef(name = "emergencyContactLastName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactLastNameEqFilter", parameters = { @ParamDef(name = "emergencyContactLastName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactLastNameNEqFilter", parameters = { @ParamDef(name = "emergencyContactLastName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactLastNameInFilter", parameters = { @ParamDef(name = "emergencyContactLastName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactMiddleNameNInFilter", parameters = { @ParamDef(name = "emergencyContactMiddleName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactMiddleNameEqFilter", parameters = { @ParamDef(name = "emergencyContactMiddleName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactMiddleNameNEqFilter", parameters = { @ParamDef(name = "emergencyContactMiddleName", type = String.class) }), @FilterDef(name = "employeeEmergencyContactMiddleNameInFilter", parameters = { @ParamDef(name = "emergencyContactMiddleName", type = String.class) }), @FilterDef(name = "employeeEmployeePersonalEmailAddressNInFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "employeeEmployeePersonalEmailAddressEqFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "employeeEmployeePersonalEmailAddressNEqFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "employeeEmployeePersonalEmailAddressInFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "employeeEmployeeWorkEmailAddressNInFilter", parameters = { @ParamDef(name = "workEmailAddress", type = String.class) }), @FilterDef(name = "employeeEmployeeWorkEmailAddressEqFilter", parameters = { @ParamDef(name = "workEmailAddress", type = String.class) }), @FilterDef(name = "employeeEmployeeWorkEmailAddressNEqFilter", parameters = { @ParamDef(name = "workEmailAddress", type = String.class) }), @FilterDef(name = "employeeEmployeeWorkEmailAddressInFilter", parameters = { @ParamDef(name = "workEmailAddress", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicMiddleNameNInFilter", parameters = { @ParamDef(name = "arabicMiddleName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicMiddleNameEqFilter", parameters = { @ParamDef(name = "arabicMiddleName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicMiddleNameNEqFilter", parameters = { @ParamDef(name = "arabicMiddleName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicMiddleNameInFilter", parameters = { @ParamDef(name = "arabicMiddleName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmploymentStatusNInFilter", parameters = { @ParamDef(name = "employmentStatus", type = String.class) }), @FilterDef(name = "employeeEmployeeEmploymentStatusEqFilter", parameters = { @ParamDef(name = "employmentStatus", type = String.class) }), @FilterDef(name = "employeeEmployeeEmploymentStatusNEqFilter", parameters = { @ParamDef(name = "employmentStatus", type = String.class) }), @FilterDef(name = "employeeEmployeeEmploymentStatusInFilter", parameters = { @ParamDef(name = "employmentStatus", type = String.class) }), @FilterDef(name = "employeeEmployeePersonalMobileNumberNInFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "employeeEmployeePersonalMobileNumberEqFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "employeeEmployeePersonalMobileNumberNEqFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "employeeEmployeePersonalMobileNumberInFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicFirstNameNInFilter", parameters = { @ParamDef(name = "arabicFirstName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicFirstNameEqFilter", parameters = { @ParamDef(name = "arabicFirstName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicFirstNameNEqFilter", parameters = { @ParamDef(name = "arabicFirstName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicFirstNameInFilter", parameters = { @ParamDef(name = "arabicFirstName", type = String.class) }), @FilterDef(name = "employeeEmployeeBloodGroupNInFilter", parameters = { @ParamDef(name = "bloodGroup", type = String.class) }), @FilterDef(name = "employeeEmployeeBloodGroupEqFilter", parameters = { @ParamDef(name = "bloodGroup", type = String.class) }), @FilterDef(name = "employeeEmployeeBloodGroupNEqFilter", parameters = { @ParamDef(name = "bloodGroup", type = String.class) }), @FilterDef(name = "employeeEmployeeBloodGroupInFilter", parameters = { @ParamDef(name = "bloodGroup", type = String.class) }), @FilterDef(name = "employeeEmployeeWorkPhoneNumberNInFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "employeeEmployeeWorkPhoneNumberEqFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "employeeEmployeeWorkPhoneNumberNEqFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "employeeEmployeeWorkPhoneNumberInFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "employeeEmployeeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeEmployeeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeEmployeeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeEmployeeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeEmployeeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeEmployeeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeEmployeeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeEmployeeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeEmployeeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeEmployeeAttachment2NInFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "employeeEmployeeAttachment2EqFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "employeeEmployeeAttachment2NEqFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "employeeEmployeeAttachment2InFilter", parameters = { @ParamDef(name = "attachment2", type = String.class) }), @FilterDef(name = "employeeEmployeeAttachment1NInFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "employeeEmployeeAttachment1EqFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "employeeEmployeeAttachment1NEqFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "employeeEmployeeAttachment1InFilter", parameters = { @ParamDef(name = "attachment1", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactLastNameNInFilter", parameters = { @ParamDef(name = "emergencyContactLastName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactLastNameEqFilter", parameters = { @ParamDef(name = "emergencyContactLastName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactLastNameNEqFilter", parameters = { @ParamDef(name = "emergencyContactLastName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactLastNameInFilter", parameters = { @ParamDef(name = "emergencyContactLastName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicLastNameNInFilter", parameters = { @ParamDef(name = "arabicLastName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicLastNameEqFilter", parameters = { @ParamDef(name = "arabicLastName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicLastNameNEqFilter", parameters = { @ParamDef(name = "arabicLastName", type = String.class) }), @FilterDef(name = "employeeEmployeeArabicLastNameInFilter", parameters = { @ParamDef(name = "arabicLastName", type = String.class) }), @FilterDef(name = "employeeEmployeeTypeContractNInFilter", parameters = { @ParamDef(name = "typeContract", type = String.class) }), @FilterDef(name = "employeeEmployeeTypeContractEqFilter", parameters = { @ParamDef(name = "typeContract", type = String.class) }), @FilterDef(name = "employeeEmployeeTypeContractNEqFilter", parameters = { @ParamDef(name = "typeContract", type = String.class) }), @FilterDef(name = "employeeEmployeeTypeContractInFilter", parameters = { @ParamDef(name = "typeContract", type = String.class) }), @FilterDef(name = "employeeEmployeeFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeEmployeeFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeEmployeeFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeEmployeeFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryShortAddressNInFilter", parameters = { @ParamDef(name = "primaryShortAddress", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryShortAddressEqFilter", parameters = { @ParamDef(name = "primaryShortAddress", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryShortAddressNEqFilter", parameters = { @ParamDef(name = "primaryShortAddress", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryShortAddressInFilter", parameters = { @ParamDef(name = "primaryShortAddress", type = String.class) }), @FilterDef(name = "employeeEmployeeText3NInFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "employeeEmployeeText3EqFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "employeeEmployeeText3NEqFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "employeeEmployeeText3InFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "employeeEmployeeText4NInFilter", parameters = { @ParamDef(name = "text4", type = String.class) }), @FilterDef(name = "employeeEmployeeText4EqFilter", parameters = { @ParamDef(name = "text4", type = String.class) }), @FilterDef(name = "employeeEmployeeText4NEqFilter", parameters = { @ParamDef(name = "text4", type = String.class) }), @FilterDef(name = "employeeEmployeeText4InFilter", parameters = { @ParamDef(name = "text4", type = String.class) }), @FilterDef(name = "employeeEmployeeText10NInFilter", parameters = { @ParamDef(name = "text10", type = String.class) }), @FilterDef(name = "employeeEmployeeText10EqFilter", parameters = { @ParamDef(name = "text10", type = String.class) }), @FilterDef(name = "employeeEmployeeText10NEqFilter", parameters = { @ParamDef(name = "text10", type = String.class) }), @FilterDef(name = "employeeEmployeeText10InFilter", parameters = { @ParamDef(name = "text10", type = String.class) }), @FilterDef(name = "employeeEmployeeText1NInFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeEmployeeText1EqFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeEmployeeText1NEqFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeEmployeeText1InFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeEmployeeText2NInFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "employeeEmployeeText2EqFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "employeeEmployeeText2NEqFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "employeeEmployeeText2InFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "employeeEmployeeReportingManagerUseridFkGtFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeReportingManagerUseridFkNInFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeReportingManagerUseridFkLtEqFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeReportingManagerUseridFkLtFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeReportingManagerUseridFkEqFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeReportingManagerUseridFkNEqFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeReportingManagerUseridFkInFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeReportingManagerUseridFkBwFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk_MIN", type = Integer.class), @ParamDef(name = "reportingManagerUseridFk_MAX", type = Integer.class) }), @FilterDef(name = "employeeEmployeeReportingManagerUseridFkGtEqFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeText7NInFilter", parameters = { @ParamDef(name = "text7", type = String.class) }), @FilterDef(name = "employeeEmployeeText7EqFilter", parameters = { @ParamDef(name = "text7", type = String.class) }), @FilterDef(name = "employeeEmployeeText7NEqFilter", parameters = { @ParamDef(name = "text7", type = String.class) }), @FilterDef(name = "employeeEmployeeText7InFilter", parameters = { @ParamDef(name = "text7", type = String.class) }), @FilterDef(name = "employeeEmployeeText8NInFilter", parameters = { @ParamDef(name = "text8", type = String.class) }), @FilterDef(name = "employeeEmployeeText8EqFilter", parameters = { @ParamDef(name = "text8", type = String.class) }), @FilterDef(name = "employeeEmployeeText8NEqFilter", parameters = { @ParamDef(name = "text8", type = String.class) }), @FilterDef(name = "employeeEmployeeText8InFilter", parameters = { @ParamDef(name = "text8", type = String.class) }), @FilterDef(name = "employeeEmployeeText5NInFilter", parameters = { @ParamDef(name = "text5", type = String.class) }), @FilterDef(name = "employeeEmployeeText5EqFilter", parameters = { @ParamDef(name = "text5", type = String.class) }), @FilterDef(name = "employeeEmployeeText5NEqFilter", parameters = { @ParamDef(name = "text5", type = String.class) }), @FilterDef(name = "employeeEmployeeText5InFilter", parameters = { @ParamDef(name = "text5", type = String.class) }), @FilterDef(name = "employeeEmployeeText6NInFilter", parameters = { @ParamDef(name = "text6", type = String.class) }), @FilterDef(name = "employeeEmployeeText6EqFilter", parameters = { @ParamDef(name = "text6", type = String.class) }), @FilterDef(name = "employeeEmployeeText6NEqFilter", parameters = { @ParamDef(name = "text6", type = String.class) }), @FilterDef(name = "employeeEmployeeText6InFilter", parameters = { @ParamDef(name = "text6", type = String.class) }), @FilterDef(name = "employeeEmployeeMaritalStatusNInFilter", parameters = { @ParamDef(name = "maritalStatus", type = String.class) }), @FilterDef(name = "employeeEmployeeMaritalStatusEqFilter", parameters = { @ParamDef(name = "maritalStatus", type = String.class) }), @FilterDef(name = "employeeEmployeeMaritalStatusNEqFilter", parameters = { @ParamDef(name = "maritalStatus", type = String.class) }), @FilterDef(name = "employeeEmployeeMaritalStatusInFilter", parameters = { @ParamDef(name = "maritalStatus", type = String.class) }), @FilterDef(name = "employeeEmployeeText9NInFilter", parameters = { @ParamDef(name = "text9", type = String.class) }), @FilterDef(name = "employeeEmployeeText9EqFilter", parameters = { @ParamDef(name = "text9", type = String.class) }), @FilterDef(name = "employeeEmployeeText9NEqFilter", parameters = { @ParamDef(name = "text9", type = String.class) }), @FilterDef(name = "employeeEmployeeText9InFilter", parameters = { @ParamDef(name = "text9", type = String.class) }), @FilterDef(name = "employeeEmployeeLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeEmployeeLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeEmployeeLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeEmployeeLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeEmployeeGenderNInFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "employeeEmployeeGenderEqFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "employeeEmployeeGenderNEqFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "employeeEmployeeGenderInFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressCityNInFilter", parameters = { @ParamDef(name = "primaryAddressCity", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressCityEqFilter", parameters = { @ParamDef(name = "primaryAddressCity", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressCityNEqFilter", parameters = { @ParamDef(name = "primaryAddressCity", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressCityInFilter", parameters = { @ParamDef(name = "primaryAddressCity", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressCountryNInFilter", parameters = { @ParamDef(name = "primaryAddressCountry", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressCountryEqFilter", parameters = { @ParamDef(name = "primaryAddressCountry", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressCountryNEqFilter", parameters = { @ParamDef(name = "primaryAddressCountry", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressCountryInFilter", parameters = { @ParamDef(name = "primaryAddressCountry", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactFirstNameNInFilter", parameters = { @ParamDef(name = "emergencyContactFirstName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactFirstNameEqFilter", parameters = { @ParamDef(name = "emergencyContactFirstName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactFirstNameNEqFilter", parameters = { @ParamDef(name = "emergencyContactFirstName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactFirstNameInFilter", parameters = { @ParamDef(name = "emergencyContactFirstName", type = String.class) }), @FilterDef(name = "employeeEmployeeCountryOfResidenceNInFilter", parameters = { @ParamDef(name = "countryOfResidence", type = String.class) }), @FilterDef(name = "employeeEmployeeCountryOfResidenceEqFilter", parameters = { @ParamDef(name = "countryOfResidence", type = String.class) }), @FilterDef(name = "employeeEmployeeCountryOfResidenceNEqFilter", parameters = { @ParamDef(name = "countryOfResidence", type = String.class) }), @FilterDef(name = "employeeEmployeeCountryOfResidenceInFilter", parameters = { @ParamDef(name = "countryOfResidence", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactFullNameNInFilter", parameters = { @ParamDef(name = "emergencyContactFullName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactFullNameEqFilter", parameters = { @ParamDef(name = "emergencyContactFullName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactFullNameNEqFilter", parameters = { @ParamDef(name = "emergencyContactFullName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactFullNameInFilter", parameters = { @ParamDef(name = "emergencyContactFullName", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressBuildingNumberNInFilter", parameters = { @ParamDef(name = "primaryAddressBuildingNumber", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressBuildingNumberEqFilter", parameters = { @ParamDef(name = "primaryAddressBuildingNumber", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressBuildingNumberNEqFilter", parameters = { @ParamDef(name = "primaryAddressBuildingNumber", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressBuildingNumberInFilter", parameters = { @ParamDef(name = "primaryAddressBuildingNumber", type = String.class) }), @FilterDef(name = "employeeEmployeeCompanyNInFilter", parameters = { @ParamDef(name = "company", type = String.class) }), @FilterDef(name = "employeeEmployeeCompanyEqFilter", parameters = { @ParamDef(name = "company", type = String.class) }), @FilterDef(name = "employeeEmployeeCompanyNEqFilter", parameters = { @ParamDef(name = "company", type = String.class) }), @FilterDef(name = "employeeEmployeeCompanyInFilter", parameters = { @ParamDef(name = "company", type = String.class) }), @FilterDef(name = "employeeEmployeeRelationshipNInFilter", parameters = { @ParamDef(name = "relationship", type = String.class) }), @FilterDef(name = "employeeEmployeeRelationshipEqFilter", parameters = { @ParamDef(name = "relationship", type = String.class) }), @FilterDef(name = "employeeEmployeeRelationshipNEqFilter", parameters = { @ParamDef(name = "relationship", type = String.class) }), @FilterDef(name = "employeeEmployeeRelationshipInFilter", parameters = { @ParamDef(name = "relationship", type = String.class) }), @FilterDef(name = "employeeEmployeeHijriDateOfBirthGtFilter", parameters = { @ParamDef(name = "hijriDateOfBirth", type = String.class) }), @FilterDef(name = "employeeEmployeeHijriDateOfBirthLtFilter", parameters = { @ParamDef(name = "hijriDateOfBirth", type = String.class) }), @FilterDef(name = "employeeEmployeeHijriDateOfBirthBwFilter", parameters = { @ParamDef(name = "hijriDateOfBirth_MIN", type = String.class), @ParamDef(name = "hijriDateOfBirth_MAX", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactMiddleNameNInFilter", parameters = { @ParamDef(name = "emergencyContactMiddleName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactMiddleNameEqFilter", parameters = { @ParamDef(name = "emergencyContactMiddleName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactMiddleNameNEqFilter", parameters = { @ParamDef(name = "emergencyContactMiddleName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmergencyContactMiddleNameInFilter", parameters = { @ParamDef(name = "emergencyContactMiddleName", type = String.class) }), @FilterDef(name = "employeeEmployeeEmploymentTypeNInFilter", parameters = { @ParamDef(name = "employmentType", type = String.class) }), @FilterDef(name = "employeeEmployeeEmploymentTypeEqFilter", parameters = { @ParamDef(name = "employmentType", type = String.class) }), @FilterDef(name = "employeeEmployeeEmploymentTypeNEqFilter", parameters = { @ParamDef(name = "employmentType", type = String.class) }), @FilterDef(name = "employeeEmployeeEmploymentTypeInFilter", parameters = { @ParamDef(name = "employmentType", type = String.class) }), @FilterDef(name = "employeeEmployeeUseridPkGtFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeUseridPkNInFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeUseridPkLtEqFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeUseridPkLtFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeUseridPkEqFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeUseridPkNEqFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeUseridPkInFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeUseridPkBwFilter", parameters = { @ParamDef(name = "useridPk_MIN", type = Integer.class), @ParamDef(name = "useridPk_MAX", type = Integer.class) }), @FilterDef(name = "employeeEmployeeUseridPkGtEqFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeEmployeeCitizenshipNInFilter", parameters = { @ParamDef(name = "citizenship", type = String.class) }), @FilterDef(name = "employeeEmployeeCitizenshipEqFilter", parameters = { @ParamDef(name = "citizenship", type = String.class) }), @FilterDef(name = "employeeEmployeeCitizenshipNEqFilter", parameters = { @ParamDef(name = "citizenship", type = String.class) }), @FilterDef(name = "employeeEmployeeCitizenshipInFilter", parameters = { @ParamDef(name = "citizenship", type = String.class) }), @FilterDef(name = "employeeEmployeeFullNameNInFilter", parameters = { @ParamDef(name = "fullName", type = String.class) }), @FilterDef(name = "employeeEmployeeFullNameEqFilter", parameters = { @ParamDef(name = "fullName", type = String.class) }), @FilterDef(name = "employeeEmployeeFullNameNEqFilter", parameters = { @ParamDef(name = "fullName", type = String.class) }), @FilterDef(name = "employeeEmployeeFullNameInFilter", parameters = { @ParamDef(name = "fullName", type = String.class) }), @FilterDef(name = "employeeEmployeeDateOfBirthGtFilter", parameters = { @ParamDef(name = "dateOfBirth", type = String.class) }), @FilterDef(name = "employeeEmployeeDateOfBirthLtFilter", parameters = { @ParamDef(name = "dateOfBirth", type = String.class) }), @FilterDef(name = "employeeEmployeeDateOfBirthBwFilter", parameters = { @ParamDef(name = "dateOfBirth_MIN", type = String.class), @ParamDef(name = "dateOfBirth_MAX", type = String.class) }), @FilterDef(name = "employeeEmployeeDateOfExitGtFilter", parameters = { @ParamDef(name = "dateOfExit", type = String.class) }), @FilterDef(name = "employeeEmployeeDateOfExitLtFilter", parameters = { @ParamDef(name = "dateOfExit", type = String.class) }), @FilterDef(name = "employeeEmployeeDateOfExitBwFilter", parameters = { @ParamDef(name = "dateOfExit_MIN", type = String.class), @ParamDef(name = "dateOfExit_MAX", type = String.class) }), @FilterDef(name = "employeeEmployeeEmployeeIdNInFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "employeeEmployeeEmployeeIdEqFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "employeeEmployeeEmployeeIdNEqFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "employeeEmployeeEmployeeIdInFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressPostalCodeNInFilter", parameters = { @ParamDef(name = "primaryAddressPostalCode", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressPostalCodeEqFilter", parameters = { @ParamDef(name = "primaryAddressPostalCode", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressPostalCodeNEqFilter", parameters = { @ParamDef(name = "primaryAddressPostalCode", type = String.class) }), @FilterDef(name = "employeeEmployeePrimaryAddressPostalCodeInFilter", parameters = { @ParamDef(name = "primaryAddressPostalCode", type = String.class) }), @FilterDef(name = "employeeEmployeeReligionNInFilter", parameters = { @ParamDef(name = "religion", type = String.class) }), @FilterDef(name = "employeeEmployeeReligionEqFilter", parameters = { @ParamDef(name = "religion", type = String.class) }), @FilterDef(name = "employeeEmployeeReligionNEqFilter", parameters = { @ParamDef(name = "religion", type = String.class) }), @FilterDef(name = "employeeEmployeeReligionInFilter", parameters = { @ParamDef(name = "religion", type = String.class) }), @FilterDef(name = "employeeEmployeeDateOfJoiningGtFilter", parameters = { @ParamDef(name = "dateOfJoining", type = String.class) }), @FilterDef(name = "employeeEmployeeDateOfJoiningLtFilter", parameters = { @ParamDef(name = "dateOfJoining", type = String.class) }), @FilterDef(name = "employeeEmployeeDateOfJoiningBwFilter", parameters = { @ParamDef(name = "dateOfJoining_MIN", type = String.class), @ParamDef(name = "dateOfJoining_MAX", type = String.class) }), @FilterDef(name = "employeeEmployeeMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeEmployeeMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeEmployeeMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeEmployeeMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeEmployeeIdNInFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "employeeEmployeeIdEqFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "employeeEmployeeIdNEqFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "employeeEmployeeIdInFilter", parameters = { @ParamDef(name = "employeeId", type = String.class) }), @FilterDef(name = "employeeEmploymentStatusNInFilter", parameters = { @ParamDef(name = "employmentStatus", type = String.class) }), @FilterDef(name = "employeeEmploymentStatusEqFilter", parameters = { @ParamDef(name = "employmentStatus", type = String.class) }), @FilterDef(name = "employeeEmploymentStatusNEqFilter", parameters = { @ParamDef(name = "employmentStatus", type = String.class) }), @FilterDef(name = "employeeEmploymentStatusInFilter", parameters = { @ParamDef(name = "employmentStatus", type = String.class) }), @FilterDef(name = "employeeEmploymentTypeNInFilter", parameters = { @ParamDef(name = "employmentType", type = String.class) }), @FilterDef(name = "employeeEmploymentTypeEqFilter", parameters = { @ParamDef(name = "employmentType", type = String.class) }), @FilterDef(name = "employeeEmploymentTypeNEqFilter", parameters = { @ParamDef(name = "employmentType", type = String.class) }), @FilterDef(name = "employeeEmploymentTypeInFilter", parameters = { @ParamDef(name = "employmentType", type = String.class) }), @FilterDef(name = "employeeFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeFullNameNInFilter", parameters = { @ParamDef(name = "fullName", type = String.class) }), @FilterDef(name = "employeeFullNameEqFilter", parameters = { @ParamDef(name = "fullName", type = String.class) }), @FilterDef(name = "employeeFullNameNEqFilter", parameters = { @ParamDef(name = "fullName", type = String.class) }), @FilterDef(name = "employeeFullNameInFilter", parameters = { @ParamDef(name = "fullName", type = String.class) }), @FilterDef(name = "employeeGenderNInFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "employeeGenderEqFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "employeeGenderNEqFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "employeeGenderInFilter", parameters = { @ParamDef(name = "gender", type = String.class) }), @FilterDef(name = "employeeHijriDateOfBirthGtFilter", parameters = { @ParamDef(name = "hijriDateOfBirth", type = String.class) }), @FilterDef(name = "employeeHijriDateOfBirthLtFilter", parameters = { @ParamDef(name = "hijriDateOfBirth", type = String.class) }), @FilterDef(name = "employeeHijriDateOfBirthBwFilter", parameters = { @ParamDef(name = "hijriDateOfBirth_MIN", type = String.class), @ParamDef(name = "hijriDateOfBirth_MAX", type = String.class) }), @FilterDef(name = "employeeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeLocationIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLocationIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLocationIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLocationIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLocationIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLocationIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLocationIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLocationIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeLocationIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeLocationName2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeLocationName2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeLocationName2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeLocationName2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeLocationName1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeLocationName1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeLocationName1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeLocationName1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeMaritalStatusNInFilter", parameters = { @ParamDef(name = "maritalStatus", type = String.class) }), @FilterDef(name = "employeeMaritalStatusEqFilter", parameters = { @ParamDef(name = "maritalStatus", type = String.class) }), @FilterDef(name = "employeeMaritalStatusNEqFilter", parameters = { @ParamDef(name = "maritalStatus", type = String.class) }), @FilterDef(name = "employeeMaritalStatusInFilter", parameters = { @ParamDef(name = "maritalStatus", type = String.class) }), @FilterDef(name = "employeeMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeePersonalEmailAddressNInFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "employeePersonalEmailAddressEqFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "employeePersonalEmailAddressNEqFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "employeePersonalEmailAddressInFilter", parameters = { @ParamDef(name = "personalEmailAddress", type = String.class) }), @FilterDef(name = "employeePersonalMobileNumberNInFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "employeePersonalMobileNumberEqFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "employeePersonalMobileNumberNEqFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "employeePersonalMobileNumberInFilter", parameters = { @ParamDef(name = "personalMobileNumber", type = String.class) }), @FilterDef(name = "employeePrimaryAddressBuildingNumberNInFilter", parameters = { @ParamDef(name = "primaryAddressBuildingNumber", type = String.class) }), @FilterDef(name = "employeePrimaryAddressBuildingNumberEqFilter", parameters = { @ParamDef(name = "primaryAddressBuildingNumber", type = String.class) }), @FilterDef(name = "employeePrimaryAddressBuildingNumberNEqFilter", parameters = { @ParamDef(name = "primaryAddressBuildingNumber", type = String.class) }), @FilterDef(name = "employeePrimaryAddressBuildingNumberInFilter", parameters = { @ParamDef(name = "primaryAddressBuildingNumber", type = String.class) }), @FilterDef(name = "employeePrimaryAddressCityNInFilter", parameters = { @ParamDef(name = "primaryAddressCity", type = String.class) }), @FilterDef(name = "employeePrimaryAddressCityEqFilter", parameters = { @ParamDef(name = "primaryAddressCity", type = String.class) }), @FilterDef(name = "employeePrimaryAddressCityNEqFilter", parameters = { @ParamDef(name = "primaryAddressCity", type = String.class) }), @FilterDef(name = "employeePrimaryAddressCityInFilter", parameters = { @ParamDef(name = "primaryAddressCity", type = String.class) }), @FilterDef(name = "employeePrimaryAddressCountryNInFilter", parameters = { @ParamDef(name = "primaryAddressCountry", type = String.class) }), @FilterDef(name = "employeePrimaryAddressCountryEqFilter", parameters = { @ParamDef(name = "primaryAddressCountry", type = String.class) }), @FilterDef(name = "employeePrimaryAddressCountryNEqFilter", parameters = { @ParamDef(name = "primaryAddressCountry", type = String.class) }), @FilterDef(name = "employeePrimaryAddressCountryInFilter", parameters = { @ParamDef(name = "primaryAddressCountry", type = String.class) }), @FilterDef(name = "employeePrimaryAddressPostalCodeNInFilter", parameters = { @ParamDef(name = "primaryAddressPostalCode", type = String.class) }), @FilterDef(name = "employeePrimaryAddressPostalCodeEqFilter", parameters = { @ParamDef(name = "primaryAddressPostalCode", type = String.class) }), @FilterDef(name = "employeePrimaryAddressPostalCodeNEqFilter", parameters = { @ParamDef(name = "primaryAddressPostalCode", type = String.class) }), @FilterDef(name = "employeePrimaryAddressPostalCodeInFilter", parameters = { @ParamDef(name = "primaryAddressPostalCode", type = String.class) }), @FilterDef(name = "employeePrimaryShortAddressNInFilter", parameters = { @ParamDef(name = "primaryShortAddress", type = String.class) }), @FilterDef(name = "employeePrimaryShortAddressEqFilter", parameters = { @ParamDef(name = "primaryShortAddress", type = String.class) }), @FilterDef(name = "employeePrimaryShortAddressNEqFilter", parameters = { @ParamDef(name = "primaryShortAddress", type = String.class) }), @FilterDef(name = "employeePrimaryShortAddressInFilter", parameters = { @ParamDef(name = "primaryShortAddress", type = String.class) }), @FilterDef(name = "employeeRelationshipNInFilter", parameters = { @ParamDef(name = "relationship", type = String.class) }), @FilterDef(name = "employeeRelationshipEqFilter", parameters = { @ParamDef(name = "relationship", type = String.class) }), @FilterDef(name = "employeeRelationshipNEqFilter", parameters = { @ParamDef(name = "relationship", type = String.class) }), @FilterDef(name = "employeeRelationshipInFilter", parameters = { @ParamDef(name = "relationship", type = String.class) }), @FilterDef(name = "employeeReligionNInFilter", parameters = { @ParamDef(name = "religion", type = String.class) }), @FilterDef(name = "employeeReligionEqFilter", parameters = { @ParamDef(name = "religion", type = String.class) }), @FilterDef(name = "employeeReligionNEqFilter", parameters = { @ParamDef(name = "religion", type = String.class) }), @FilterDef(name = "employeeReligionInFilter", parameters = { @ParamDef(name = "religion", type = String.class) }), @FilterDef(name = "employeeReportingManagerUseridFkGtFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeReportingManagerUseridFkNInFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeReportingManagerUseridFkLtEqFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeReportingManagerUseridFkLtFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeReportingManagerUseridFkEqFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeReportingManagerUseridFkNEqFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeReportingManagerUseridFkInFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeReportingManagerUseridFkBwFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk_MIN", type = Integer.class), @ParamDef(name = "reportingManagerUseridFk_MAX", type = Integer.class) }), @FilterDef(name = "employeeReportingManagerUseridFkGtEqFilter", parameters = { @ParamDef(name = "reportingManagerUseridFk", type = Integer.class) }), @FilterDef(name = "employeeText1NInFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeText1EqFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeText1NEqFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeText1InFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeText10NInFilter", parameters = { @ParamDef(name = "text10", type = String.class) }), @FilterDef(name = "employeeText10EqFilter", parameters = { @ParamDef(name = "text10", type = String.class) }), @FilterDef(name = "employeeText10NEqFilter", parameters = { @ParamDef(name = "text10", type = String.class) }), @FilterDef(name = "employeeText10InFilter", parameters = { @ParamDef(name = "text10", type = String.class) }), @FilterDef(name = "employeeText2NInFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "employeeText2EqFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "employeeText2NEqFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "employeeText2InFilter", parameters = { @ParamDef(name = "text2", type = String.class) }), @FilterDef(name = "employeeText3NInFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "employeeText3EqFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "employeeText3NEqFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "employeeText3InFilter", parameters = { @ParamDef(name = "text3", type = String.class) }), @FilterDef(name = "employeeText4NInFilter", parameters = { @ParamDef(name = "text4", type = String.class) }), @FilterDef(name = "employeeText4EqFilter", parameters = { @ParamDef(name = "text4", type = String.class) }), @FilterDef(name = "employeeText4NEqFilter", parameters = { @ParamDef(name = "text4", type = String.class) }), @FilterDef(name = "employeeText4InFilter", parameters = { @ParamDef(name = "text4", type = String.class) }), @FilterDef(name = "employeeText5NInFilter", parameters = { @ParamDef(name = "text5", type = String.class) }), @FilterDef(name = "employeeText5EqFilter", parameters = { @ParamDef(name = "text5", type = String.class) }), @FilterDef(name = "employeeText5NEqFilter", parameters = { @ParamDef(name = "text5", type = String.class) }), @FilterDef(name = "employeeText5InFilter", parameters = { @ParamDef(name = "text5", type = String.class) }), @FilterDef(name = "employeeText6NInFilter", parameters = { @ParamDef(name = "text6", type = String.class) }), @FilterDef(name = "employeeText6EqFilter", parameters = { @ParamDef(name = "text6", type = String.class) }), @FilterDef(name = "employeeText6NEqFilter", parameters = { @ParamDef(name = "text6", type = String.class) }), @FilterDef(name = "employeeText6InFilter", parameters = { @ParamDef(name = "text6", type = String.class) }), @FilterDef(name = "employeeText7NInFilter", parameters = { @ParamDef(name = "text7", type = String.class) }), @FilterDef(name = "employeeText7EqFilter", parameters = { @ParamDef(name = "text7", type = String.class) }), @FilterDef(name = "employeeText7NEqFilter", parameters = { @ParamDef(name = "text7", type = String.class) }), @FilterDef(name = "employeeText7InFilter", parameters = { @ParamDef(name = "text7", type = String.class) }), @FilterDef(name = "employeeText8NInFilter", parameters = { @ParamDef(name = "text8", type = String.class) }), @FilterDef(name = "employeeText8EqFilter", parameters = { @ParamDef(name = "text8", type = String.class) }), @FilterDef(name = "employeeText8NEqFilter", parameters = { @ParamDef(name = "text8", type = String.class) }), @FilterDef(name = "employeeText8InFilter", parameters = { @ParamDef(name = "text8", type = String.class) }), @FilterDef(name = "employeeText9NInFilter", parameters = { @ParamDef(name = "text9", type = String.class) }), @FilterDef(name = "employeeText9EqFilter", parameters = { @ParamDef(name = "text9", type = String.class) }), @FilterDef(name = "employeeText9NEqFilter", parameters = { @ParamDef(name = "text9", type = String.class) }), @FilterDef(name = "employeeText9InFilter", parameters = { @ParamDef(name = "text9", type = String.class) }), @FilterDef(name = "employeeTypeContractNInFilter", parameters = { @ParamDef(name = "typeContract", type = String.class) }), @FilterDef(name = "employeeTypeContractEqFilter", parameters = { @ParamDef(name = "typeContract", type = String.class) }), @FilterDef(name = "employeeTypeContractNEqFilter", parameters = { @ParamDef(name = "typeContract", type = String.class) }), @FilterDef(name = "employeeTypeContractInFilter", parameters = { @ParamDef(name = "typeContract", type = String.class) }), @FilterDef(name = "employeeUseridPkGtFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeUseridPkNInFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeUseridPkLtEqFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeUseridPkLtFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeUseridPkEqFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeUseridPkNEqFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeUseridPkInFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeUseridPkBwFilter", parameters = { @ParamDef(name = "useridPk_MIN", type = Integer.class), @ParamDef(name = "useridPk_MAX", type = Integer.class) }), @FilterDef(name = "employeeUseridPkGtEqFilter", parameters = { @ParamDef(name = "useridPk", type = Integer.class) }), @FilterDef(name = "employeeWorkEmailAddressNInFilter", parameters = { @ParamDef(name = "workEmailAddress", type = String.class) }), @FilterDef(name = "employeeWorkEmailAddressEqFilter", parameters = { @ParamDef(name = "workEmailAddress", type = String.class) }), @FilterDef(name = "employeeWorkEmailAddressNEqFilter", parameters = { @ParamDef(name = "workEmailAddress", type = String.class) }), @FilterDef(name = "employeeWorkEmailAddressInFilter", parameters = { @ParamDef(name = "workEmailAddress", type = String.class) }), @FilterDef(name = "employeeWorkPhoneNumberNInFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "employeeWorkPhoneNumberEqFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "employeeWorkPhoneNumberNEqFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }), @FilterDef(name = "employeeWorkPhoneNumberInFilter", parameters = { @ParamDef(name = "workPhoneNumber", type = String.class) }) })
@EntityListeners(PrePersistListener.class)
@JsonFilter("propertyFilter")
@Filters(value = {
		@Filter(name = "employeeReportingManagerUserIdEqFilter", condition = "(REPORTING_MANAGER_USERID_FK = :reportingManagerUserId OR USERID_PK = :reportingManagerUserId)"),
		@Filter(name = "employeeUserIdEqFilter", condition = "USERID_PK = :userId"),
		@Filter(name = "employeeDepartmentNameInFilter", condition = "DEPARTMENT_ID IN (SELECT d.ID FROM DEPARTMENT d WHERE d.NAME = :name)"),
		@Filter(name = "employeeDepartmentNameEqFilter", condition = "DEPARTMENT_ID = (SELECT d.ID FROM DEPARTMENT d WHERE d.NAME = :name)") })
@FilterDefs(value = {
		@FilterDef(name = "employeeReportingManagerUserIdEqFilter", parameters = @ParamDef(name = "reportingManagerUserId", type = Integer.class)),
		@FilterDef(name = "employeeUserIdEqFilter", parameters = @ParamDef(name = "userId", type = Integer.class)),
		@FilterDef(name = "employeeDepartmentNameInFilter", parameters = @ParamDef(name = "name", type = String.class)),
		@FilterDef(name = "employeeDepartmentNameEqFilter", parameters = @ParamDef(name = "name", type = String.class)) })
public class Employee extends BaseEntitySaaS {

	@Size(max = 50)
	@Basic
	@Column(name = "ARABIC_FIRST_NAME", length = 50)
	private String arabicFirstName;

	@Size(max = 100)
	@Basic
	@Column(name = "ARABIC_FULL_NAME", length = 100)
	private String arabicFullName;

	@Size(max = 50)
	@Basic
	@Column(name = "ARABIC_LAST_NAME", length = 50)
	private String arabicLastName;

	@Size(max = 50)
	@Basic
	@Column(name = "ARABIC_MIDDLE_NAME", length = 50)
	private String arabicMiddleName;

	@NotAudited
	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@OneToMany(targetEntity = com.nouros.hrms.model.Asset.class, mappedBy = "employee", cascade = CascadeType.MERGE)
	private Set<Asset> assets = new HashSet<>();

	@Size(max = 100)
	@Basic
	@Column(length = 100)
	private String attachment1;

	@Size(max = 100)
	@Basic
	@Column(length = 100)
	private String attachment2;

	@Size(max = 50)
	@Basic
	@Column(name = "BLOOD_GROUP", length = 50)
	private String bloodGroup;

	@Size(max = 200)
	@Basic
	@Column(name = "WORK_LOCATION", length = 200)
	private String workLocation;

	@Size(max = 50)
	@Basic
	@Column(length = 50)
	private String citizenship;

	@Size(max = 50)
	@Basic
	@Column(length = 50)
	private String company;

	@Size(max = 50)
	@Basic
	@Column(name = "COUNTRY_OF_RESIDENCE", length = 50)
	private String countryOfResidence;

	@Basic
	@Column(name = "DATE_OF_BIRTH", length = 19)
	private Date dateOfBirth;

	@Basic
	@Column(name = "DATE_OF_EXIT", length = 19)
	private Date dateOfExit;

	@Basic
	@Column(name = "DATE_OF_JOINING", length = 19)
	private Date dateOfJoining;

	@Basic
	private boolean deleted;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "DEPARTMENT_ID", columnDefinition = "INT")
	private Department department;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "DESIGNATION_ID", columnDefinition = "INT")
	private Designation designation;

	@NotAudited
	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@OneToMany(targetEntity = com.nouros.hrms.model.Designation.class, mappedBy = "employee", cascade = CascadeType.MERGE)
	private Set<Designation> designations = new HashSet<>();

	@Size(max = 100)
	@Basic
	@Column(name = "GIVEN_NAME", length = 100)
	private String givenName;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "REPORTING_MANAGER", columnDefinition = "INT")
	private Employee reportingManager;

	@NotAudited
	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@OneToMany(targetEntity = com.nouros.hrms.model.EmployeeComplianceLegal.class, mappedBy = "employee", cascade = CascadeType.MERGE)
	private Set<EmployeeComplianceLegal> employeeComplianceLegals = new HashSet<>();

	@NotAudited
	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@OneToMany(targetEntity = com.nouros.hrms.model.EmployeeDependentDetails.class, mappedBy = "employee", cascade = CascadeType.MERGE)
	private Set<EmployeeDependentDetails> employeeDependentDetails = new HashSet<>();

	@Size(max = 100)
	@Basic
	@Column(name = "EMPLOYEE_ID", length = 100)
	private String employeeId;

	@NotAudited
	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@OneToMany(targetEntity = com.nouros.hrms.model.EmployeeNationalIdentification.class, mappedBy = "employee", cascade = CascadeType.MERGE)
	private Set<EmployeeNationalIdentification> employeeNationalIdentifications = new HashSet<>();

	@Basic
	@Column(name = "EMPLOYMENT_STATUS", columnDefinition = "ENUM('Active','Inactive','Terminated','In Onboarding')")
	private String employmentStatus;

	@Size(max = 100)
	@Basic
	@Column(name = "EMPLOYMENT_TYPE", length = 100)
	private String employmentType;

	@Size(max = 50)
	@Basic
	@Column(name = "FIRST_NAME", length = 50)
	private String firstName;

	@Size(max = 70)
	@Basic
	@Column(name = "FULL_NAME", length = 70)
	private String fullName;

	@Basic
	@Column(name = "GENDER", columnDefinition = "ENUM('Male','Female','Other')")
	private String gender;

	@Basic
	@Column(name = "HIJRI_DATE_OF_BIRTH", length = 19)
	private Date hijriDateOfBirth;

	@GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
	@Id
	@Column(columnDefinition = "INT")
	private Integer id;

	@Size(max = 50)
	@Basic
	@Column(name = "LAST_NAME", length = 50)
	private String lastName;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "LOCATION_ID", columnDefinition = "INT")
	private Location location;

	@Basic
	@Column(name = "MARITAL_STATUS", columnDefinition = "ENUM('Single','Married','Divorced','Widowed','Other')")
	private String maritalStatus;

	@Basic
	@Column(name = "SOURCE_HIRE", columnDefinition = "ENUM('Internal-Referral','Job-Boards','Career-Sites','Recruitment-Agencies','Social-Media','Direct-Applications','Campus-Recruitment','Employee-Referral-Programs','Head-Hunted')", length = 8)
	private String sourceHire;

	@Size(max = 50)
	@Basic
	@Column(name = "MIDDLE_NAME", length = 50)
	private String middleName;

	@Size(max = 100)
	@Basic
	@Column(name = "PERSONAL_EMAIL_ADDRESS", length = 100)
	private String personalEmailAddress;

	@Size(max = 20)
	@Basic
	@Column(name = "PERSONAL_MOBILE_NUMBER", length = 20)
	private String personalMobileNumber;

	@Size(max = 20)
	@Basic
	@Column(name = "ALTERNATIVE_PHONE_NUMBER", length = 20)
	private String alternativePhoneNumber;

	@Size(max = 30)
	@Basic
	@Column(name = "PRIMARY_ADDRESS_BUILDING_NUMBER", length = 30)
	private String primaryAddressBuildingNumber;

	@Size(max = 100)
	@Basic
	@Column(name = "PRIMARY_ADDRESS_CITY", length = 100)
	private String primaryAddressCity;

	@Size(max = 100)
	@Basic
	@Column(name = "PRIMARY_ADDRESS_COUNTRY", length = 100)
	private String primaryAddressCountry;

	@Size(max = 100)
	@Basic
	@Column(name = "PRIMARY_ADDRESS_POSTAL_CODE", length = 100)
	private String primaryAddressPostalCode;

	@Size(max = 100)
	@Basic
	@Column(name = "PRIMARY_SHORT_ADDRESS", length = 100)
	private String primaryShortAddress;

	@Size(max = 50)
	@Basic
	@Column(length = 50)
	private String religion;

	@Basic
	@Column(name = "REPORTING_MANAGER_USERID_FK", columnDefinition = "INT")
	private Integer reportingManagerUserId;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text1;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text10;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text2;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text3;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text4;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text5;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text6;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text7;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text8;

	@Size(max = 250)
	@Basic
	@Column(length = 250)
	private String text9;

	@Size(max = 100)
	@Basic
	@Column(name = "CONTRACT_TYPE", length = 100)
	private String contractType;

	@Basic
	@Column(name = "USERID_PK", columnDefinition = "INT")
	private Integer userId;

	@Size(max = 100)
	@Basic
	@Column(name = "WORK_EMAIL_ADDRESS", length = 100)
	private String workEmailAddress;

	@Size(max = 20)
	@Basic
	@Column(name = "WORK_PHONE_NUMBER", length = 20)
	private String workPhoneNumber;

	@Column(name = "PROCESS_INSTANCE_ID")
	private String processInstanceId;

	@Column(name = "WORKFLOW_STAGE")
	private String workflowStage;

	@Basic
	@Column(name = "JOB_GRADE", columnDefinition = "INT")
	private Integer jobGrade;

	public String getEmployeePhoto() {
		return employeePhoto; // not present for all the cases
	}

	public void setEmployeePhoto(String employeePhoto) {
		this.employeePhoto = employeePhoto;
	}

	@Basic
	@Column(name = "JOB_GRADE_RANGE")
	private Double jobGradeRange;

	@Size(max = 200)
	@Basic
	@Column(name = "EMPLOYEE_PHOTO", length = 200)
	private String employeePhoto;

	@Size(max = 200)
	@Basic
	@Column(name = "VISA_CONTRACT", length = 200)
	private String visaContract;

	@Size(max = 200)
	@Basic
	@Column(name = "EDUCATION_LETTER", length = 200)
	private String educationLetter;

	@Size(max = 200)
	@Basic
	@Column(name = "CV", length = 200)
	private String cv;

	@Size(max = 200)
	@Basic
	@Column(name = "VISA_LETTER", length = 200)
	private String visaLetter;

	@Basic
	@Column(name = "PRESENT_SHORT_ADDRESS", length = 255)
	private String presentShortAddress;

	@Basic
	@Column(name = "PRESENT_BUILDING_ADDRESS", length = 255)
	private String presentBuildingAddress;

	@Basic
	@Column(name = "PRESENT_CITY", length = 100)
	private String presentCity;

	@Basic
	@Column(name = "PRESENT_COUNTRY", length = 100)
	private String presentCountry;

	@Basic
	@Column(name = "PRESENT_POSTAL_ADDRESS", length = 100)
	private String presentPostalAddress;

	@Basic
	@Column(name = "NATIONAL_ADDRESS", length = 255)
	private String nationalAddress;

	@Basic
	@Column(name = "PROBATION_PERIOD_END_DATE")
	private Date probationPeriodEndDate;

	@Basic
	@Column(name = "INDUCTION_SESSION_DATE")
	private Date inductionSessionDate;

	@Basic
	@Column(name = "FAMILY_CARD", length = 200)
	private String familyCard;

	@Basic
	@Column(name = "SAUDI_ARAMCO_BADGE", length = 200)
	private String saudiAramcoBadge;

	@Basic
	@Column(name = "BADGE_NO", length = 50)
	private String badgeNo;

	@Basic
	@Column(name = "BADGE_EXPIRY_DATE")
	private Date badgeExpiryDate;

	@Basic
	@Column(name = "ARAMCO_DIGITAL_EMAIL_ID", length = 255)
	private String aramcoDigitalEmailID;

	@Basic
	@Column(name = "MEDICAL_REPORT", length = 200)
	private String medicalReport;

	@Basic
	@Column(name = "ONBOARDING_SPECIALIST_NAME", length = 255)
	private String onboardingSpecialistName;

	@Basic
	@Column(name = "ONBOARDING_SPECIALIST_EMAIL", length = 255)
	private String onboardingSpecialistEmail;

	@Basic
	@Column(name = "WORK_PERMIT_NUMBER", length = 50)
	private String workPermitNumber;

	@Basic
	@Column(name = "WORK_PERMIT_EXPIRY_DATE")
	private Date workPermitExpiryDate;

	@Basic
	@Column(name = "RELOCATION_DATE")
	private Date relocationDate;

	@Basic
	@Column(name = "STATE", length = 100)
	private String state;

	@Basic
	@Column(name = "ONBOARDING_SPECIALIST_MEETING_TIME")
	private Date onboardingSpecialistMeetingTime;

	@Basic
	@Column(name = "IQAMA_NUMBER", length = 255)
	private String iqamaNumber;

	@Basic
	@Column(name = "CYBER_SECURITY_SPECIALIST_NAME", length = 255)
	private String cyberSecuritySpecialistName;

	@Basic
	@Column(name = "CYBER_SECURITY_SESSION_DATE")
	private Date cyberSecuritySessionDate;

//	@NotAudited
//	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
//	@JoinTable(name = "EMPLOYEE_TO_SKILL_MAPPING", joinColumns = {
//			@JoinColumn(name = "EMPLOYEE_ID_FK") }, inverseJoinColumns = {
//					@JoinColumn(name = "SKILLS_ID_FK", referencedColumnName = "ID") })
//	private List<Skill> skills = new ArrayList<Skill>();
	
	@NotAudited
	@OneToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "EMPLOYEE_TO_SKILL_MAPPING", joinColumns = @JoinColumn(name = "EMPLOYEE_ID_FK"), inverseJoinColumns = @JoinColumn(name = "SKILLS_ID_FK", referencedColumnName = "ID"))
	private List<Skill> skills = new ArrayList<>();
	
    public List<Skill> getSkills() {
        if (skills == null) {
            skills = new ArrayList<>();
        }
        return skills;
    }
 
    public void setSkills(List<Skill> skills) {
        if (skills == null) {
            this.skills = new ArrayList<>();
        } else {
            this.skills = skills;
        }
    }

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public Date getOnboardingSpecialistMeetingTime() {
		return onboardingSpecialistMeetingTime;
	}

	public void setOnboardingSpecialistMeetingTime(Date onboardingSpecialistMeetingTime) {
		this.onboardingSpecialistMeetingTime = onboardingSpecialistMeetingTime;
	}

	public String getIqamaNumber() {
		return iqamaNumber;
	}

	public void setIqamaNumber(String iqamaNumber) {
		this.iqamaNumber = iqamaNumber;
	}

	public String getCyberSecuritySpecialistName() {
		return cyberSecuritySpecialistName;
	}

	public void setCyberSecuritySpecialistName(String cyberSecuritySpecialistName) {
		this.cyberSecuritySpecialistName = cyberSecuritySpecialistName;
	}

	public Date getCyberSecuritySessionDate() {
		return cyberSecuritySessionDate;
	}

	public void setCyberSecuritySessionDate(Date cyberSecuritySessionDate) {
		this.cyberSecuritySessionDate = cyberSecuritySessionDate;
	}

	public String getProcessInstanceId() {
		return processInstanceId; // not present for all the cases
	}

	public void setProcessInstanceId(String processInstanceId) {
		this.processInstanceId = processInstanceId;
	}

	public String getWorkflowStage() {
		return workflowStage; // not present for all the cases
	}

	public void setWorkflowStage(String workflowStage) {
		this.workflowStage = workflowStage;
	}

	public List<WorkflowActions> getActions() {
		return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class)
				.getWorkflowActions(id, "Employee");
	} // not present for all the cases

	public Employee() {
	}

	public Employee(Integer id) {
		this.id = id;
	}

	public String getArabicFirstName() {
		return arabicFirstName; // It will be return in all cases
	}

	public void setArabicFirstName(String arabicFirstName) {
		this.arabicFirstName = arabicFirstName;
	}

	public String getArabicLastName() {
		return arabicLastName; // It will be return in all cases
	}

	public void setArabicLastName(String arabicLastName) {
		this.arabicLastName = arabicLastName;
	}

	public String getArabicMiddleName() {
		return arabicMiddleName; // It will be return in all cases
	}

	public void setArabicMiddleName(String arabicMiddleName) {
		this.arabicMiddleName = arabicMiddleName;
	}

	public Set<Asset> getAssets() {
		return assets; // not present in all the cases
	}

	public void setAssets(Set<Asset> assets) {
		this.assets = assets;
	}

	public String getAttachment1() {
		return attachment1; // not present in all the cases
	}

	public void setAttachment1(String attachment1) {
		this.attachment1 = attachment1;
	}

	public Double getJobGradeRange() {
		return jobGradeRange; // not present in all the cases
	}

	public void setJobGradeRange(Double jobGradeRange) {
		this.jobGradeRange = jobGradeRange;
	}

	public String getAttachment2() {
		return attachment2; // not present in all the cases
	}

	public void setAttachment2(String attachment2) {
		this.attachment2 = attachment2;
	}

	public String getBloodGroup() { // It is present for self only but already present for DH also
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return bloodGroup;
		else
			return null;
	}

	public void setBloodGroup(String bloodGroup) {
		this.bloodGroup = bloodGroup;
	}

	public String getCitizenship() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 2)
			return citizenship;
		else
			return null;
	}

	public void setCitizenship(String citizenship) {
		this.citizenship = citizenship;
	}

	public String getCompany() {
		return company; // It will be return in case of other employees also
	}

	public void setCompany(String company) {
		this.company = company;
	}

	public String getCountryOfResidence() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return countryOfResidence;
		else
			return null;
	}

	public void setCountryOfResidence(String countryOfResidence) {
		this.countryOfResidence = countryOfResidence;
	}

	public Date getDateOfBirth() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return dateOfBirth;
		else
			return null;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	public Date getDateOfExit() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 1 || checkRestriction == 2)
			return dateOfExit;
		else
			return null;
	}

	public void setDateOfExit(Date dateOfExit) {
		this.dateOfExit = dateOfExit;
	}

	public String getAlternativePhoneNumber() {
		return alternativePhoneNumber; // It will be return in case of other employees also
	}

	public void setAlternativePhoneNumber(String alternativePhoneNumber) {
		this.alternativePhoneNumber = alternativePhoneNumber;
	}

	public Date getDateOfJoining() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 1 || checkRestriction == 2)
			return dateOfJoining;
		else
			return null;
	}

	public void setDateOfJoining(Date dateOfJoining) {
		this.dateOfJoining = dateOfJoining;
	}

	public boolean isDeleted() {
		return deleted;
	}

	

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	public String getWorkLocation() {
		return workLocation; // It will be return in case of other employees also
	}

	public void setWorkLocation(String workLocation) {
		this.workLocation = workLocation;
	}

	public Designation getDesignation() {
		return designation; // It will be return in case of other employees also
	}

	public void setDesignation(Designation designation) {
		this.designation = designation;
	}

	public Set<Designation> getDesignations() {
		return designations; // It will be return in case of other employees also
	}

	public void setDesignations(Set<Designation> designations) {
		this.designations = designations;
	}

	public String getGivenName() {
		return givenName; // not present for all the cases
	}

	public void setGivenName(String givenName) {
		this.givenName = givenName;
	}

	public Employee getReportingManager() {
		return reportingManager; // It will be return in case of other employees also
	}

	public void setReportingManager(Employee reportingManager) {
		this.reportingManager = reportingManager;
	}

	public Set<EmployeeComplianceLegal> getEmployeeComplianceLegals() {
		return employeeComplianceLegals; // not present for all the cases
	}

	public void setEmployeeComplianceLegals(Set<EmployeeComplianceLegal> employeeComplianceLegals) {
		this.employeeComplianceLegals = employeeComplianceLegals;
	}

	public Set<EmployeeDependentDetails> getEmployeeDependentDetails() {
		return employeeDependentDetails; // not present for all the cases
	}

	public void setEmployeeDependentDetails(Set<EmployeeDependentDetails> employeeDependentDetails) {
		this.employeeDependentDetails = employeeDependentDetails;
	}

	public String getEmployeeId() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 1 || checkRestriction == 2)
			return employeeId;
		else
			return null;
	}

	public void setEmployeeId(String employeeId) {
		this.employeeId = employeeId;
	}

	public Set<EmployeeNationalIdentification> getEmployeeNationalIdentifications() {
		return employeeNationalIdentifications; // not present for all the cases
	}

	public void setEmployeeNationalIdentifications(
			Set<EmployeeNationalIdentification> employeeNationalIdentifications) {
		this.employeeNationalIdentifications = employeeNationalIdentifications;
	}

	public String getEmploymentStatus() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 1 || checkRestriction == 2)
			return employmentStatus;
		else
			return null;
	}

	public void setEmploymentStatus(String employmentStatus) {
		this.employmentStatus = employmentStatus;
	}

	public String getEmploymentType() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 1 || checkRestriction == 2)
			return employmentType;
		else
			return null;
	}

	public void setEmploymentType(String employmentType) {
		this.employmentType = employmentType;
	}

	public String getFirstName() {
		return firstName; // It will be return in case of other employees also
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getFullName() {
		return fullName; // It will be return in case of other employees also
	}

	public void setFullName(String fullName) {
		this.fullName = fullName;
	}

	public String getGender() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 2)
			return gender;
		else
			return null;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public Date getHijriDateOfBirth() {
		return hijriDateOfBirth; // not present for all the cases
	}

	public void setHijriDateOfBirth(Date hijriDateOfBirth) {
		this.hijriDateOfBirth = hijriDateOfBirth;
	}

	public Integer getId() {
		return id; // not present for all the cases
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getLastName() {
		return lastName; // It will be return in case of other employees also
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public Location getLocation() {
		return location; // It will be return in case of other employees also
	}

	public void setLocation(Location location) {
		this.location = location;
	}

	public String getMaritalStatus() { // for department head it is not allowed to be get but for self it is allowed
										// according to list **********
//		int checkRestriction=checkAndReturnValue();
//		if(checkRestriction==0 || checkRestriction==1 )
//			return maritalStatus;
//		else 
//			return null;
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return maritalStatus;
		else
			return null;
	}

	public void setMaritalStatus(String maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	public String getMiddleName() {
		return middleName; // It will be return in case of other employees also
	}

	public String getArabicFullName() {
		return arabicFullName; // It will be return in case of other employees also
	}

	public void setArabicFullName(String arabicFullName) {
		this.arabicFullName = arabicFullName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}

	public String getPersonalEmailAddress() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 2)
			return personalEmailAddress;
		else
			return null;
	}

	public void setPersonalEmailAddress(String personalEmailAddress) {
		this.personalEmailAddress = personalEmailAddress;
	}

	public String getPersonalMobileNumber() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 2)
			return personalMobileNumber;
		else
			return null;
	}

	public void setPersonalMobileNumber(String personalMobileNumber) {
		this.personalMobileNumber = personalMobileNumber;
	}

	public String getPrimaryAddressBuildingNumber() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return primaryAddressBuildingNumber;
		else
			return null;
	}

	public void setPrimaryAddressBuildingNumber(String primaryAddressBuildingNumber) {
		this.primaryAddressBuildingNumber = primaryAddressBuildingNumber;
	}

	public String getPrimaryAddressCity() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return primaryAddressCity;
		else
			return null;
	}

	public void setPrimaryAddressCity(String primaryAddressCity) {
		this.primaryAddressCity = primaryAddressCity;
	}

	public String getPrimaryAddressCountry() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return primaryAddressCountry;
		else
			return null;
	}

	public void setPrimaryAddressCountry(String primaryAddressCountry) {
		this.primaryAddressCountry = primaryAddressCountry;
	}

	public String getPrimaryAddressPostalCode() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return primaryAddressPostalCode;
		else
			return null;
	}

	public void setPrimaryAddressPostalCode(String primaryAddressPostalCode) {
		this.primaryAddressPostalCode = primaryAddressPostalCode;
	}

	public String getPrimaryShortAddress() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return primaryShortAddress;
		else
			return null;
	}

	public void setPrimaryShortAddress(String primaryShortAddress) {
		this.primaryShortAddress = primaryShortAddress;
	}

	public String getReligion() {
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0)
			return religion;
		else
			return null;
	}

	public void setReligion(String religion) {

		this.religion = religion;
	}

	public Integer getReportingManagerUserId() {
		return reportingManagerUserId; // not present in all the cases
	}

	public void setReportingManagerUserId(Integer reportingManagerUserId) {
		this.reportingManagerUserId = reportingManagerUserId;
	}

	public String getText1() {
		return text1; // not present in all the cases
	}

	public void setText1(String text1) {
		this.text1 = text1;
	}

	public String getText10() {
		return text10; // not present in all the cases
	}

	public void setText10(String text10) {
		this.text10 = text10;
	}

	public String getText2() {
		return text2; // not present in all the cases
	}

	public void setText2(String text2) {
		this.text2 = text2;
	}

	public String getText3() {
		return text3; // not present in all the cases
	}

	public void setText3(String text3) {
		this.text3 = text3;
	}

	public String getText4() {
		return text4; // not present in all the cases
	}

	public void setText4(String text4) {
		this.text4 = text4;
	}

	public String getText5() {
		return text5; // not present in all the cases
	}

	public void setText5(String text5) {
		this.text5 = text5;
	}

	public String getText6() {
		return text6; // not present in all the cases
	}

	public void setText6(String text6) {
		this.text6 = text6;
	}

	public String getText7() {
		return text7; // not present in all the cases
	}

	public void setText7(String text7) {
		this.text7 = text7;
	}

	public String getText8() {
		return text8; // not present in all the cases
	}

	public void setText8(String text8) {
		this.text8 = text8;
	}

	public String getText9() {
		return text9; // not present in all the cases
	}

	public void setText9(String text9) {
		this.text9 = text9;
	}

	public String getVisaContract() {
		return visaContract;
	}

	public void setVisaContract(String visaContract) {
		this.visaContract = visaContract;
	}

	public String getEducationLetter() {
		return educationLetter;
	}

	public void setEducationLetter(String educationLetter) {
		this.educationLetter = educationLetter;
	}

	public String getCv() {
		return cv;
	}

	public void setCv(String cv) {
		this.cv = cv;
	}

	public String getVisaLetter() {
		return visaLetter;
	}

	public void setVisaLetter(String visaLetter) {
		this.visaLetter = visaLetter;
	}

	public String getPresentShortAddress() {
		return presentShortAddress;
	}

	public void setPresentShortAddress(String presentShortAddress) {
		this.presentShortAddress = presentShortAddress;
	}

	public String getPresentBuildingAddress() {
		return presentBuildingAddress;
	}

	public void setPresentBuildingAddress(String presentBuildingAddress) {
		this.presentBuildingAddress = presentBuildingAddress;
	}

	public String getPresentCity() {
		return presentCity;
	}

	public void setPresentCity(String presentCity) {
		this.presentCity = presentCity;
	}

	public String getPresentCountry() {
		return presentCountry;
	}

	public void setPresentCountry(String presentCountry) {
		this.presentCountry = presentCountry;
	}

	public String getPresentPostalAddress() {
		return presentPostalAddress;
	}

	public void setPresentPostalAddress(String presentPostalAddress) {
		this.presentPostalAddress = presentPostalAddress;
	}

	public String getNationalAddress() {
		return nationalAddress;
	}

	public void setNationalAddress(String nationalAddress) {
		this.nationalAddress = nationalAddress;
	}

	public Date getProbationPeriodEndDate() {
		return probationPeriodEndDate;
	}

	public void setProbationPeriodEndDate(Date probationPeriodEndDate) {
		this.probationPeriodEndDate = probationPeriodEndDate;
	}

	public Date getInductionSessionDate() {
		return inductionSessionDate;
	}

	public void setInductionSessionDate(Date inductionSessionDate) {
		this.inductionSessionDate = inductionSessionDate;
	}

	public String getFamilyCard() {
		return familyCard;
	}

	public void setFamilyCard(String familyCard) {
		this.familyCard = familyCard;
	}

	public String getSaudiAramcoBadge() {
		return saudiAramcoBadge;
	}

	public void setSaudiAramcoBadge(String saudiAramcoBadge) {
		this.saudiAramcoBadge = saudiAramcoBadge;
	}

	public String getBadgeNo() {
		return badgeNo;
	}

	public void setBadgeNo(String badgeNo) {
		this.badgeNo = badgeNo;
	}

	public Date getBadgeExpiryDate() {
		return badgeExpiryDate;
	}

	public void setBadgeExpiryDate(Date badgeExpiryDate) {
		this.badgeExpiryDate = badgeExpiryDate;
	}

	public String getAramcoDigitalEmailID() {
		return aramcoDigitalEmailID;
	}

	public void setAramcoDigitalEmailID(String aramcoDigitalEmailID) {
		this.aramcoDigitalEmailID = aramcoDigitalEmailID;
	}

	public String getMedicalReport() {
		return medicalReport;
	}

	public void setMedicalReport(String medicalReport) {
		this.medicalReport = medicalReport;
	}

	public String getOnboardingSpecialistName() {
		return onboardingSpecialistName;
	}

	public void setOnboardingSpecialistName(String onboardingSpecialistName) {
		this.onboardingSpecialistName = onboardingSpecialistName;
	}

	public String getOnboardingSpecialistEmail() {
		return onboardingSpecialistEmail;
	}

	public void setOnboardingSpecialistEmail(String onboardingSpecialistEmail) {
		this.onboardingSpecialistEmail = onboardingSpecialistEmail;
	}

	public String getWorkPermitNumber() {
		return workPermitNumber;
	}

	public void setWorkPermitNumber(String workPermitNumber) {
		this.workPermitNumber = workPermitNumber;
	}

	public Date getWorkPermitExpiryDate() {
		return workPermitExpiryDate;
	}

	public void setWorkPermitExpiryDate(Date workPermitExpiryDate) {
		this.workPermitExpiryDate = workPermitExpiryDate;
	}

	public Date getRelocationDate() {
		return relocationDate;
	}

	public void setRelocationDate(Date relocationDate) {
		this.relocationDate = relocationDate;
	}

	public String getContractType() { // It should be be get in case of reporting manager also **************
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;
		if (checkRestriction == 0 || checkRestriction == 1 || checkRestriction == 2)
			return contractType;
		else
			return null;
	}

	public void setContractType(String contractType) {
		this.contractType = contractType;
	}

	public Integer getUserId() {
		return userId; // not present for all the cases
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	public String getWorkEmailAddress() {
		return workEmailAddress; // It will be return in case of other employees also
	}

	public void setWorkEmailAddress(String workEmailAddress) {
		this.workEmailAddress = workEmailAddress;
	}

	public String getWorkPhoneNumber() {
//        int checkRestriction=checkAndReturnValue();
//		if(checkRestriction==0 || checkRestriction==2)
//			return workPhoneNumber;
//		else 
//			return null;
		return workPhoneNumber; // It will be return in case of other employees also
	}

	public void setWorkPhoneNumber(String workPhoneNumber) {
		this.workPhoneNumber = workPhoneNumber;
	}

	public Integer getJobGrade() { // not present in all the cases
		checkAndReturnValue();
		int checkRestriction = this.checkPermisison;

		if (checkRestriction == 0 || checkRestriction == 1 || checkRestriction == 2)
			return jobGrade;
		else
			return null; // According to list not present in all the cases but earlier also present for
							// all
	}

	public void setJobGrade(Integer jobGrade) {
		this.jobGrade = jobGrade;
	}

//	public int checkAndReturnValue() {
//		System.out.print("Inside checkAndReturnValue");
//		try {
//			CustomerInfo customerInfo = ApplicationContextProvider.getApplicationContext().getBean(CustomerInfo.class);
//			System.out.print("customerInfo  found is : " + customerInfo.toString());
//			if (customerInfo.getUserId() != null && this.userId != null && customerInfo.getOrgRoleName() != null
//					&& (customerInfo.getDepartment() != null && !customerInfo.getDepartment().isEmpty())) {
//				System.out.print("Inside Main if Condition after matching department , org role and  user id");
//				if (customerInfo.getUserId().equals(this.userId)
//						|| customerInfo.getOrgRoleName().equalsIgnoreCase("CEO")
//						|| customerInfo.getUsername().contains("system.user")
//						|| customerInfo.getDepartment().get(0).equalsIgnoreCase("People")) {
//					return 0;
//				} else if (
//						//customerInfo.getUsername().contains("system.user")||
//						this.department != null && this.department.getDepartmentLead() != null
//								&& customerInfo.getUserId().equals(this.department.getDepartmentLead())) {
//					return 1;
//				} else if (
//	//					customerInfo.getUsername().contains("system.user") || 
//						this.reportingManager != null && this.reportingManager.userId != null
//								&& customerInfo.getUserId().equals(this.reportingManager.userId)) {
//					return 2;
//				} 
//				else {
//					return 3;
//				}
//			} else {
////				if (customerInfo.getUsername().contains("system.user")) {
////					return 0;
////				} else
////					return 0;
//				return 0 ; 
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		return 0;
//	}

	@Transient
	private Integer checkPermisison = null;
	@Transient 
	private Integer checkSaiPermisison = null;

	// By Piyush Sethiya Dated - 11/10/2024

	public void checkAndReturnValue() {
		System.out.print("Inside checkAndReturnValue");
		System.out.print("before if this.checkPermisison  : " + this.checkPermisison);
		if (this.checkPermisison == null) {
			System.out.print("when this.checkPermisison is null ");
			try {
				CustomerInfo customerInfo = ApplicationContextProvider.getApplicationContext()
						.getBean(CustomerInfo.class);
				System.out.print("customerInfo  found is : " + customerInfo.toString());
				if (customerInfo.getUserId() != null && this.userId != null && customerInfo.getOrgRoleName() != null
						&& (customerInfo.getDepartment() != null && !customerInfo.getDepartment().isEmpty())) {
					System.out.print("Inside Main if Condition after matching department , org role and  user id");
					if (customerInfo.getUserId().equals(this.userId) // Self
							|| customerInfo.getOrgRoleName().equalsIgnoreCase("CEO") // CEO
							|| customerInfo.getUsername().contains("system.user") // System-user
							|| customerInfo.getDepartment().get(0).equalsIgnoreCase("People") // people
							|| customerInfo.getDepartment().get(0).equalsIgnoreCase("Finance")) { // finance

						this.checkPermisison = 0;
					} else if (
					// customerInfo.getUsername().contains("system.user")||
					this.department != null && this.department.getDepartmentLead() != null
							&& customerInfo.getUserId().equals(this.department.getDepartmentLead())) {

						this.checkPermisison = 1;// Department Head
					} else if (
					// customerInfo.getUsername().contains("system.user") ||
					this.reportingManager != null && this.reportingManager.userId != null
							&& customerInfo.getUserId().equals(this.reportingManager.userId)) { // Reporting Manager
						this.checkPermisison = 2;
					} else {
						this.checkPermisison = 3; // It is a case of other employee(All)
					}
				} else {
//				if (customerInfo.getUsername().contains("system.user")) {
//					return 0;
//				} else
//					return 0;
					this.checkPermisison = 0;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			this.checkPermisison = 0;
			System.out.print("inside if this.checkPermisison  : " + this.checkPermisison);
		} else {
			System.out.print("when this.checkPermisison is not null : " + this.checkPermisison);
		}
	}
	
	public String getSourceHire() {
//		checkAndReturnValue();
//		int checkRestriction = this.checkPermisison;
//		if (checkRestriction == 0 || checkRestriction == 1 || checkRestriction == 2)
//			return sourceHire;
//		else
//			return null;
		
		checkAndReturnValueForSai();
		int checkRestriction = this.checkSaiPermisison;
		if (checkRestriction == 1 || checkRestriction == 2 || checkRestriction == 4 || checkRestriction == 5 || checkRestriction == 6 )
			return sourceHire;
		else
			return null;

	}

	public void setSourceHire(String sourceHire) {
//		this.sourceHire = sourceHire;
		
		checkAndReturnValueForSai();
		int checkRestriction = this.checkSaiPermisison;
		if ( checkRestriction == 4 || checkRestriction == 5 || checkRestriction == 6 )
			this.sourceHire = sourceHire;
//		else
//			throw new BusinessException("This user has no permission to edit Source_Hire");
		
	}
	
	public void checkAndReturnValueForSai() {
		System.out.print("Inside checkAndReturnValueForSai");
		System.out.print("before if this.checkSaiPermisison  : " + this.checkSaiPermisison);
		if (this.checkSaiPermisison == null) {
			System.out.print("when this.checkSaiPermisison is null ");
			try {
				CustomerInfo customerInfo = ApplicationContextProvider.getApplicationContext()
						.getBean(CustomerInfo.class);
				System.out.print("customerInfo  found is : " + customerInfo.toString());
				if (customerInfo.getUserId() != null && this.userId != null && customerInfo.getOrgRoleName() != null
						&& (customerInfo.getDepartment() != null && !customerInfo.getDepartment().isEmpty())) {
					System.out.print("Inside Main if Condition after matching department , org role and  user id");
					if (customerInfo.getUserId().equals(this.userId)) {// self

						this.checkSaiPermisison = 0;
					} else if (
					// customerInfo.getUsername().contains("system.user")||
					this.department != null && this.department.getDepartmentLead() != null
							&& customerInfo.getUserId().equals(this.department.getDepartmentLead())) {

						this.checkSaiPermisison = 1;// Department Head
					} else if (
					// customerInfo.getUsername().contains("system.user") ||
					this.reportingManager != null && this.reportingManager.userId != null
							&& customerInfo.getUserId().equals(this.reportingManager.userId)) { // Reporting Manager
						this.checkSaiPermisison = 2;
					} else if(customerInfo.getOrgRoleName().equalsIgnoreCase("CEO")) { 
						this.checkSaiPermisison = 4;
					} else if(customerInfo.getUsername().contains("system.user")) {
						this.checkSaiPermisison = 5;
					} else if(customerInfo.getDepartment().get(0).equalsIgnoreCase("People")) {
						this.checkSaiPermisison = 6;
					} else if(customerInfo.getDepartment().get(0).equalsIgnoreCase("Finance")) {
						this.checkSaiPermisison = 7;
					} else {
						this.checkSaiPermisison = 3; // It is a case of other employee(All)
					}
				} else {
//				if (customerInfo.getUsername().contains("system.user")) {
//					return 0;
//				} else
//					return 0;
					this.checkSaiPermisison = 0;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
//			this.checkPermisison = 0;
			System.out.print("inside if this.checkSaiPermisison  : " + this.checkSaiPermisison);
		} else {
			System.out.print("when this.checkSaiPermisison is not null : " + this.checkSaiPermisison);
		}
	}

	@Override
	public String toString() {
		return "Employee [arabicFirstName=" + arabicFirstName + ", arabicFullName=" + arabicFullName
				+ ", arabicLastName=" + arabicLastName + ", arabicMiddleName=" + arabicMiddleName + ", assets=" + assets
				+ ", attachment1=" + attachment1 + ", attachment2=" + attachment2 + ", bloodGroup=" + bloodGroup
				+ ", workLocation=" + workLocation + ", citizenship=" + citizenship + ", company=" + company
				+ ", countryOfResidence=" + countryOfResidence + ", dateOfBirth=" + dateOfBirth + ", dateOfExit="
				+ dateOfExit + ", dateOfJoining=" + dateOfJoining + ", deleted=" + deleted + ", department="
				+ department + ", designation=" + designation + ", designations=" + designations + ", givenName="
				+ givenName + ", reportingManager=" + reportingManager + ", employeeComplianceLegals="
				+ employeeComplianceLegals + ", employeeDependentDetails=" + employeeDependentDetails + ", employeeId="
				+ employeeId + ", employeeNationalIdentifications=" + employeeNationalIdentifications
				+ ", employmentStatus=" + employmentStatus + ", employmentType=" + employmentType + ", firstName="
				+ firstName + ", fullName=" + fullName + ", gender=" + gender + ", hijriDateOfBirth=" + hijriDateOfBirth
				+ ", id=" + id + ", lastName=" + lastName + ", location=" + location + ", maritalStatus="
				+ maritalStatus + ", sourceHire=" + sourceHire + ", middleName=" + middleName
				+ ", personalEmailAddress=" + personalEmailAddress + ", personalMobileNumber=" + personalMobileNumber
				+ ", alternativePhoneNumber=" + alternativePhoneNumber + ", primaryAddressBuildingNumber="
				+ primaryAddressBuildingNumber + ", primaryAddressCity=" + primaryAddressCity
				+ ", primaryAddressCountry=" + primaryAddressCountry + ", primaryAddressPostalCode="
				+ primaryAddressPostalCode + ", primaryShortAddress=" + primaryShortAddress + ", religion=" + religion
				+ ", reportingManagerUserId=" + reportingManagerUserId + ", text1=" + text1 + ", text10=" + text10
				+ ", text2=" + text2 + ", text3=" + text3 + ", text4=" + text4 + ", text5=" + text5 + ", text6=" + text6
				+ ", text7=" + text7 + ", text8=" + text8 + ", text9=" + text9 + ", contractType=" + contractType
				+ ", userId=" + userId + ", workEmailAddress=" + workEmailAddress + ", workPhoneNumber="
				+ workPhoneNumber + ", processInstanceId=" + processInstanceId + ", workflowStage=" + workflowStage
				+ ", jobGrade=" + jobGrade + ", jobGradeRange=" + jobGradeRange + ", employeePhoto=" + employeePhoto
				+ ", visaContract=" + visaContract + ", educationLetter=" + educationLetter + ", cv=" + cv
				+ ", visaLetter=" + visaLetter + ", presentShortAddress=" + presentShortAddress
				+ ", presentBuildingAddress=" + presentBuildingAddress + ", presentCity=" + presentCity
				+ ", presentCountry=" + presentCountry + ", presentPostalAddress=" + presentPostalAddress
				+ ", nationalAddress=" + nationalAddress + ", probationPeriodEndDate=" + probationPeriodEndDate
				+ ", inductionSessionDate=" + inductionSessionDate + ", familyCard=" + familyCard
				+ ", saudiAramcoBadge=" + saudiAramcoBadge + ", badgeNo=" + badgeNo + ", badgeExpiryDate="
				+ badgeExpiryDate + ", aramcoDigitalEmailID=" + aramcoDigitalEmailID + ", medicalReport="
				+ medicalReport + ", onboardingSpecialistName=" + onboardingSpecialistName
				+ ", onboardingSpecialistEmail=" + onboardingSpecialistEmail + ", workPermitNumber=" + workPermitNumber
				+ ", workPermitExpiryDate=" + workPermitExpiryDate + ", relocationDate=" + relocationDate + ", state="
				+ state + ", onboardingSpecialistMeetingTime=" + onboardingSpecialistMeetingTime + ", iqamaNumber="
				+ iqamaNumber + ", cyberSecuritySpecialistName=" + cyberSecuritySpecialistName
				+ ", cyberSecuritySessionDate=" + cyberSecuritySessionDate + ", skills=" + skills + ", checkPermisison="
				+ checkPermisison + "]";
	}
	
	

}

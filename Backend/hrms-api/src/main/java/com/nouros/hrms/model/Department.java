package com.nouros.hrms.model;

import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Audited
@Table(name = "DEPARTMENT")
@Filters(value = { @Filter(name = "departmentApprovalStatusNInFilter", condition = "APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "departmentApprovalStatusEqFilter", condition = "APPROVAL_STATUS = :approvalStatus"), @Filter(name = "departmentApprovalStatusNEqFilter", condition = "APPROVAL_STATUS != :approvalStatus"), @Filter(name = "departmentApprovalStatusInFilter", condition = "APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "departmentDepartmentCodeNInFilter", condition = "DEPARTMENT_CODE not in (:departmentCode)"), @Filter(name = "departmentDepartmentCodeEqFilter", condition = "DEPARTMENT_CODE = :departmentCode"), @Filter(name = "departmentDepartmentCodeNEqFilter", condition = "DEPARTMENT_CODE != :departmentCode"), @Filter(name = "departmentDepartmentCodeInFilter", condition = "DEPARTMENT_CODE in (:departmentCode)"), @Filter(name = "departmentDepartmentLeadGtFilter", condition = "DEPARTMENT_LEAD > :departmentLead"), @Filter(name = "departmentDepartmentLeadNInFilter", condition = "DEPARTMENT_LEAD not in (:departmentLead)"), @Filter(name = "departmentDepartmentLeadLtEqFilter", condition = "DEPARTMENT_LEAD <= :departmentLead"), @Filter(name = "departmentDepartmentLeadLtFilter", condition = "DEPARTMENT_LEAD < :departmentLead"), @Filter(name = "departmentDepartmentLeadEqFilter", condition = "DEPARTMENT_LEAD = :departmentLead"), @Filter(name = "departmentDepartmentLeadNEqFilter", condition = "DEPARTMENT_LEAD != :departmentLead"), @Filter(name = "departmentDepartmentLeadInFilter", condition = "DEPARTMENT_LEAD in (:departmentLead)"), @Filter(name = "departmentDepartmentLeadBwFilter", condition = "DEPARTMENT_LEAD > :departmentLead_MIN  AND DEPARTMENT_LEAD < :departmentLead_MAX"), @Filter(name = "departmentDepartmentLeadGtEqFilter", condition = "DEPARTMENT_LEAD >= :departmentLead"), @Filter(name = "departmentDepartmentLeadEqFilter", condition = "DEPARTMENT_LEAD = :departmentLead"), @Filter(name = "departmentIdGtFilter", condition = "ID > :id"), @Filter(name = "departmentIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "departmentIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "departmentIdLtFilter", condition = "ID < :id"), @Filter(name = "departmentIdEqFilter", condition = "ID = :id"), @Filter(name = "departmentIdNEqFilter", condition = "ID != :id"), @Filter(name = "departmentIdInFilter", condition = "ID in (:id)"), @Filter(name = "departmentIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "departmentIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "departmentIdEqFilter", condition = "ID = :id"), @Filter(name = "departmentMailAliasNInFilter", condition = "MAIL_ALIAS not in (:mailAlias)"), @Filter(name = "departmentMailAliasEqFilter", condition = "MAIL_ALIAS = :mailAlias"), @Filter(name = "departmentMailAliasNEqFilter", condition = "MAIL_ALIAS != :mailAlias"), @Filter(name = "departmentMailAliasInFilter", condition = "MAIL_ALIAS in (:mailAlias)"), @Filter(name = "departmentNameNInFilter", condition = "NAME not in (:name)"), @Filter(name = "departmentNameEqFilter", condition = "NAME = :name"), @Filter(name = "departmentNameNEqFilter", condition = "NAME != :name"), @Filter(name = "departmentNameInFilter", condition = "NAME in (:name)"), @Filter(name = "departmentParentDepartmentGtFilter", condition = "PARENT_DEPARTMENT > :parentDepartment"), @Filter(name = "departmentParentDepartmentNInFilter", condition = "PARENT_DEPARTMENT not in (:parentDepartment)"), @Filter(name = "departmentParentDepartmentLtEqFilter", condition = "PARENT_DEPARTMENT <= :parentDepartment"), @Filter(name = "departmentParentDepartmentLtFilter", condition = "PARENT_DEPARTMENT < :parentDepartment"), @Filter(name = "departmentParentDepartmentEqFilter", condition = "PARENT_DEPARTMENT = :parentDepartment"), @Filter(name = "departmentParentDepartmentNEqFilter", condition = "PARENT_DEPARTMENT != :parentDepartment"), @Filter(name = "departmentParentDepartmentInFilter", condition = "PARENT_DEPARTMENT in (:parentDepartment)"), @Filter(name = "departmentParentDepartmentBwFilter", condition = "PARENT_DEPARTMENT > :parentDepartment_MIN  AND PARENT_DEPARTMENT < :parentDepartment_MAX"), @Filter(name = "departmentParentDepartmentGtEqFilter", condition = "PARENT_DEPARTMENT >= :parentDepartment"), @Filter(name = "departmentParentDepartmentEqFilter", condition = "PARENT_DEPARTMENT = :parentDepartment"), @Filter(name = "departmentWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "departmentWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "departmentWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "departmentWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "departmentWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "departmentWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "departmentWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "departmentWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "departmentWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "departmentWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "departmentApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "departmentApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "departmentApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "departmentApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "departmentDepartmentCodeNInFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "departmentDepartmentCodeEqFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "departmentDepartmentCodeNEqFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "departmentDepartmentCodeInFilter", parameters = { @ParamDef(name = "departmentCode", type = String.class) }), @FilterDef(name = "departmentDepartmentLeadGtFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "departmentDepartmentLeadNInFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "departmentDepartmentLeadLtEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "departmentDepartmentLeadLtFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "departmentDepartmentLeadEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "departmentDepartmentLeadNEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "departmentDepartmentLeadInFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "departmentDepartmentLeadBwFilter", parameters = { @ParamDef(name = "departmentLead_MIN", type = Integer.class), @ParamDef(name = "departmentLead_MAX", type = Integer.class) }), @FilterDef(name = "departmentDepartmentLeadGtEqFilter", parameters = { @ParamDef(name = "departmentLead", type = Integer.class) }), @FilterDef(name = "departmentIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "departmentIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "departmentIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "departmentIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "departmentIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "departmentIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "departmentIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "departmentIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "departmentIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "departmentMailAliasNInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "departmentMailAliasEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "departmentMailAliasNEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "departmentMailAliasInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "departmentNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "departmentNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "departmentNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "departmentNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "departmentParentDepartmentGtFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "departmentParentDepartmentNInFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "departmentParentDepartmentLtEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "departmentParentDepartmentLtFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "departmentParentDepartmentEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "departmentParentDepartmentNEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "departmentParentDepartmentInFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "departmentParentDepartmentBwFilter", parameters = { @ParamDef(name = "parentDepartment_MIN", type = Integer.class), @ParamDef(name = "parentDepartment_MAX", type = Integer.class) }), @FilterDef(name = "departmentParentDepartmentGtEqFilter", parameters = { @ParamDef(name = "parentDepartment", type = Integer.class) }), @FilterDef(name = "departmentWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "departmentWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "departmentWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "departmentWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "departmentWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "departmentWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "departmentWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "departmentWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "departmentWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Department extends BaseEntitySaaS{

    @Basic
    @Column(name = "APPROVAL_STATUS", columnDefinition = "ENUM('Pending','Approved','Reject','Under-Review','Closed','On Hold')", length = 12)
    private String approvalStatus;

    @Size(max = 50)
    @Basic
    @Column(name = "DEPARTMENT_CODE", length = 50)
    private String departmentCode;

   
    @Basic
    @Column(name = "DEPARTMENT_LEAD", columnDefinition = "INT")
    private Integer departmentLead;
    
    @Size(max = 50)
    @Basic
    @Column(name = "DEPARTMENT_LEAD_FULL_NAME")
    private String departmentLeadFullName;
    
    @Size(max = 50)
    @Basic
    @Column(name = "DEPARTMENT_LEAD_EMAIL_ID", length = 50)
    private String departmentLeadEmailId;

    public String getDepartmentLeadEmailId() {
		return departmentLeadEmailId;
	}

	public void setDepartmentLeadEmailId(String departmentLeadEmailId) {
		this.departmentLeadEmailId = departmentLeadEmailId;
	}

	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.Employee.class, mappedBy = "department", cascade = CascadeType.MERGE)
    private Set<Employee> employees = new HashSet<>();

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.Interview.class, mappedBy = "department", cascade = CascadeType.MERGE)
    private Set<Interview> interviews = new HashSet<>();

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.JobOpening.class, mappedBy = "department", cascade = CascadeType.MERGE)
    private Set<JobOpening> jobOpenings = new HashSet<>();

    @Size(max = 100)
    @Basic
    @Column(name = "MAIL_ALIAS", length = 100)
    private String mailAlias;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String name;

//    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
//    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
//    @OneToMany(targetEntity = com.nouros.hrms.model.Offers.class, mappedBy = "department", cascade = CascadeType.MERGE)
//    private Set<Offers> offers = new HashSet<>();

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "PARENT_DEPARTMENT", columnDefinition = "INT")
    private Department parentDepartment;
    
    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "DIVISION_ID", columnDefinition = "INT")
    private Division division;

	@Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;
	
	@Size(max = 100)
    @Basic
    @Column(name = "BUSINESS_UNIT", length = 100)
    private String businessUnit;
	
	
    public Department getParentDepartment() {
		return parentDepartment;
	}

	public void setParentDepartment(Department parentDepartment) {
		this.parentDepartment = parentDepartment;
	}
	
    public Department() {
    }

    public Department(Integer id) {
        this.id = id;
    }

    
    public String getApprovalStatus() {
        return approvalStatus;
    }
    
    public void setApprovalStatus(String approvalStatus) {
        this.approvalStatus = approvalStatus;
    }
    
    public String getBusinessUnit() {
		return businessUnit;
	}

	public void setBusinessUnit(String businessUnit) {
		this.businessUnit = businessUnit;
	}

    public String getDepartmentCode() {
        return departmentCode;
    }

    public void setDepartmentCode(String departmentCode) {
        this.departmentCode = departmentCode;
    }

  
	public Set<Employee> getEmployees() {
        return employees;
    }

    public Integer getDepartmentLead() {
		return departmentLead;
	}

	public void setDepartmentLead(Integer departmentLead) {
		this.departmentLead = departmentLead;
	}

	public String getDepartmentLeadFullName() {
		return departmentLeadFullName;
	}

	public void setDepartmentLeadFullName(String departmentLeadFullName) {
		this.departmentLeadFullName = departmentLeadFullName;
	}

	public void setEmployees(Set<Employee> employees) {
        this.employees = employees;
    }


    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Set<Interview> getInterviews() {
        return interviews;
    }

    public void setInterviews(Set<Interview> interviews) {
        this.interviews = interviews;
    }

    public Set<JobOpening> getJobOpenings() {
        return jobOpenings;
    }

    public void setJobOpenings(Set<JobOpening> jobOpenings) {
        this.jobOpenings = jobOpenings;
    }

    public String getMailAlias() {
        return mailAlias;
    }

    public void setMailAlias(String mailAlias) {
        this.mailAlias = mailAlias;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

//    public Set<Offers> getOffers() {
//        return offers;
//    }
//
//    public void setOffers(Set<Offers> offers) {
//        this.offers = offers;
//    }

    public Division getDivision() {
		return division;
	}

	public void setDivision(Division division) {
		this.division = division;
	}

	public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

/* (C)2024 */
package com.nouros.hrms.model;

import java.util.Date;

import org.hibernate.envers.Audited;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@Audited
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "EMPLOYEE_CLEARANCE_CERTIFICATE")
//@Filters(value = { @Filter(name = "employeeClearanceCertificateApprovalDateGtFilter", condition = "APPROVAL_DATE > (SELECT DATE_FORMAT(:approvalDate, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateApprovalDateLtFilter", condition = "APPROVAL_DATE < (SELECT DATE_FORMAT(:approvalDate, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateApprovalDateBwFilter", condition = "APPROVAL_DATE >(SELECT DATE_FORMAT(:approvalDate_MIN, '%Y-%m-%d')) AND APPROVAL_DATE <(SELECT DATE_FORMAT(:approvalDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateApproverDesignationNInFilter", condition = "APPROVER_DESIGNATION not in (:approverDesignation)"), @Filter(name = "employeeClearanceCertificateApproverDesignationEqFilter", condition = "APPROVER_DESIGNATION = :approverDesignation"), @Filter(name = "employeeClearanceCertificateApproverDesignationNEqFilter", condition = "APPROVER_DESIGNATION != :approverDesignation"), @Filter(name = "employeeClearanceCertificateApproverDesignationInFilter", condition = "APPROVER_DESIGNATION in (:approverDesignation)"), @Filter(name = "employeeClearanceCertificateApproverNameNInFilter", condition = "APPROVER_NAME not in (:approverName)"), @Filter(name = "employeeClearanceCertificateApproverNameEqFilter", condition = "APPROVER_NAME = :approverName"), @Filter(name = "employeeClearanceCertificateApproverNameNEqFilter", condition = "APPROVER_NAME != :approverName"), @Filter(name = "employeeClearanceCertificateApproverNameInFilter", condition = "APPROVER_NAME in (:approverName)"), @Filter(name = "employeeClearanceCertificateCertificateNumberNInFilter", condition = "CERTIFICATE_NUMBER not in (:certificateNumber)"), @Filter(name = "employeeClearanceCertificateCertificateNumberEqFilter", condition = "CERTIFICATE_NUMBER = :certificateNumber"), @Filter(name = "employeeClearanceCertificateCertificateNumberNEqFilter", condition = "CERTIFICATE_NUMBER != :certificateNumber"), @Filter(name = "employeeClearanceCertificateCertificateNumberInFilter", condition = "CERTIFICATE_NUMBER in (:certificateNumber)"), @Filter(name = "employeeClearanceCertificateCertificateTypeNInFilter", condition = "CERTIFICATE_TYPE not in (:certificateType)"), @Filter(name = "employeeClearanceCertificateCertificateTypeEqFilter", condition = "CERTIFICATE_TYPE = :certificateType"), @Filter(name = "employeeClearanceCertificateCertificateTypeNEqFilter", condition = "CERTIFICATE_TYPE != :certificateType"), @Filter(name = "employeeClearanceCertificateCertificateTypeInFilter", condition = "CERTIFICATE_TYPE in (:certificateType)"), @Filter(name = "employeeClearanceCertificateClearanceStatusNInFilter", condition = "CLEARANCE_STATUS not in (:clearanceStatus)"), @Filter(name = "employeeClearanceCertificateClearanceStatusEqFilter", condition = "CLEARANCE_STATUS = :clearanceStatus"), @Filter(name = "employeeClearanceCertificateClearanceStatusNEqFilter", condition = "CLEARANCE_STATUS != :clearanceStatus"), @Filter(name = "employeeClearanceCertificateClearanceStatusInFilter", condition = "CLEARANCE_STATUS in (:clearanceStatus)"), @Filter(name = "employeeClearanceCertificateDeletedEqFilter", condition = "DELETED = :deleted"), @Filter(name = "employeeClearanceCertificateDeletedNEqFilter", condition = "DELETED != :deleted"), @Filter(name = "employeeClearanceCertificateDependenciesNInFilter", condition = "DEPENDENCIES not in (:dependencies)"), @Filter(name = "employeeClearanceCertificateDependenciesEqFilter", condition = "DEPENDENCIES = :dependencies"), @Filter(name = "employeeClearanceCertificateDependenciesNEqFilter", condition = "DEPENDENCIES != :dependencies"), @Filter(name = "employeeClearanceCertificateDependenciesInFilter", condition = "DEPENDENCIES in (:dependencies)"), @Filter(name = "employeeClearanceCertificateDocumentUploadNInFilter", condition = "DOCUMENT_UPLOAD not in (:documentUpload)"), @Filter(name = "employeeClearanceCertificateDocumentUploadEqFilter", condition = "DOCUMENT_UPLOAD = :documentUpload"), @Filter(name = "employeeClearanceCertificateDocumentUploadNEqFilter", condition = "DOCUMENT_UPLOAD != :documentUpload"), @Filter(name = "employeeClearanceCertificateDocumentUploadInFilter", condition = "DOCUMENT_UPLOAD in (:documentUpload)"), @Filter(name = "employeeClearanceCertificateEmployeeIdGtFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id)"), @Filter(name = "employeeClearanceCertificateEmployeeIdNInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID not in (:id)"), @Filter(name = "employeeClearanceCertificateEmployeeIdLtEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID <= :id)"), @Filter(name = "employeeClearanceCertificateEmployeeIdLtFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID < :id)"), @Filter(name = "employeeClearanceCertificateEmployeeIdEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID = :id)"), @Filter(name = "employeeClearanceCertificateEmployeeIdNEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID != :id)"), @Filter(name = "employeeClearanceCertificateEmployeeIdInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID in (:id)"), @Filter(name = "employeeClearanceCertificateEmployeeIdBwFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id_MIN  AND EMPLOYEE.ID < :id_MAX )"), @Filter(name = "employeeClearanceCertificateEmployeeIdGtEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID >= :id)"), @Filter(name = "employeeClearanceCertificateEmployeeName2NInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 not in (:name2)"), @Filter(name = "employeeClearanceCertificateEmployeeName2EqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 = :name2)"), @Filter(name = "employeeClearanceCertificateEmployeeName2NEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 != :name2)"), @Filter(name = "employeeClearanceCertificateEmployeeName2InFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 in (:name2)"), @Filter(name = "employeeClearanceCertificateEmployeeName1NInFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 not in (:name1)"), @Filter(name = "employeeClearanceCertificateEmployeeName1EqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 = :name1)"), @Filter(name = "employeeClearanceCertificateEmployeeName1NEqFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 != :name1)"), @Filter(name = "employeeClearanceCertificateEmployeeName1InFilter", condition = "+++++++++ in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 in (:name1)"), @Filter(name = "employeeClearanceCertificateExpiryDateGtFilter", condition = "EXPIRY_DATE > (SELECT DATE_FORMAT(:expiryDate, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateExpiryDateLtFilter", condition = "EXPIRY_DATE < (SELECT DATE_FORMAT(:expiryDate, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateExpiryDateBwFilter", condition = "EXPIRY_DATE >(SELECT DATE_FORMAT(:expiryDate_MIN, '%Y-%m-%d')) AND EXPIRY_DATE <(SELECT DATE_FORMAT(:expiryDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateIdGtFilter", condition = "ID > :id"), @Filter(name = "employeeClearanceCertificateIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "employeeClearanceCertificateIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "employeeClearanceCertificateIdLtFilter", condition = "ID < :id"), @Filter(name = "employeeClearanceCertificateIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeClearanceCertificateIdNEqFilter", condition = "ID != :id"), @Filter(name = "employeeClearanceCertificateIdInFilter", condition = "ID in (:id)"), @Filter(name = "employeeClearanceCertificateIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "employeeClearanceCertificateIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "employeeClearanceCertificateIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeClearanceCertificateIssueDateGtFilter", condition = "ISSUE_DATE > (SELECT DATE_FORMAT(:issueDate, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateIssueDateLtFilter", condition = "ISSUE_DATE < (SELECT DATE_FORMAT(:issueDate, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateIssueDateBwFilter", condition = "ISSUE_DATE >(SELECT DATE_FORMAT(:issueDate_MIN, '%Y-%m-%d')) AND ISSUE_DATE <(SELECT DATE_FORMAT(:issueDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateIssuingDepartmentNInFilter", condition = "ISSUING_DEPARTMENT not in (:issuingDepartment)"), @Filter(name = "employeeClearanceCertificateIssuingDepartmentEqFilter", condition = "ISSUING_DEPARTMENT = :issuingDepartment"), @Filter(name = "employeeClearanceCertificateIssuingDepartmentNEqFilter", condition = "ISSUING_DEPARTMENT != :issuingDepartment"), @Filter(name = "employeeClearanceCertificateIssuingDepartmentInFilter", condition = "ISSUING_DEPARTMENT in (:issuingDepartment)"), @Filter(name = "employeeClearanceCertificateMandatoryEqFilter", condition = "MANDATORY = :mandatory"), @Filter(name = "employeeClearanceCertificateMandatoryNEqFilter", condition = "MANDATORY != :mandatory"), @Filter(name = "employeeClearanceCertificateRemarksNInFilter", condition = "REMARKS not in (:remarks)"), @Filter(name = "employeeClearanceCertificateRemarksEqFilter", condition = "REMARKS = :remarks"), @Filter(name = "employeeClearanceCertificateRemarksNEqFilter", condition = "REMARKS != :remarks"), @Filter(name = "employeeClearanceCertificateRemarksInFilter", condition = "REMARKS in (:remarks)"), @Filter(name = "employeeClearanceCertificateRoleRequirementsNInFilter", condition = "ROLE_REQUIREMENTS not in (:roleRequirements)"), @Filter(name = "employeeClearanceCertificateRoleRequirementsEqFilter", condition = "ROLE_REQUIREMENTS = :roleRequirements"), @Filter(name = "employeeClearanceCertificateRoleRequirementsNEqFilter", condition = "ROLE_REQUIREMENTS != :roleRequirements"), @Filter(name = "employeeClearanceCertificateRoleRequirementsInFilter", condition = "ROLE_REQUIREMENTS in (:roleRequirements)"), @Filter(name = "employeeClearanceCertificateValidityScopeNInFilter", condition = "VALIDITY_SCOPE not in (:validityScope)"), @Filter(name = "employeeClearanceCertificateValidityScopeEqFilter", condition = "VALIDITY_SCOPE = :validityScope"), @Filter(name = "employeeClearanceCertificateValidityScopeNEqFilter", condition = "VALIDITY_SCOPE != :validityScope"), @Filter(name = "employeeClearanceCertificateValidityScopeInFilter", condition = "VALIDITY_SCOPE in (:validityScope)"), @Filter(name = "employeeClearanceCertificateVerificationDetailsNInFilter", condition = "VERIFICATION_DETAILS not in (:verificationDetails)"), @Filter(name = "employeeClearanceCertificateVerificationDetailsEqFilter", condition = "VERIFICATION_DETAILS = :verificationDetails"), @Filter(name = "employeeClearanceCertificateVerificationDetailsNEqFilter", condition = "VERIFICATION_DETAILS != :verificationDetails"), @Filter(name = "employeeClearanceCertificateVerificationDetailsInFilter", condition = "VERIFICATION_DETAILS in (:verificationDetails)"), @Filter(name = "employeeClearanceCertificateCreatorUserFirstNameNInFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME not in (:firstName)"), @Filter(name = "employeeClearanceCertificateCreatorUserFirstNameEqFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME = :firstName)"), @Filter(name = "employeeClearanceCertificateCreatorUserFirstNameNEqFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME != :firstName)"), @Filter(name = "employeeClearanceCertificateCreatorUserFirstNameInFilter", condition = "creator in (select USER.id from USER where USER.FIRST_NAME in (:firstName)"), @Filter(name = "employeeClearanceCertificateCreatorUserLastNameNInFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME not in (:lastName)"), @Filter(name = "employeeClearanceCertificateCreatorUserLastNameEqFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME = :lastName)"), @Filter(name = "employeeClearanceCertificateCreatorUserLastNameNEqFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME != :lastName)"), @Filter(name = "employeeClearanceCertificateCreatorUserLastNameInFilter", condition = "creator in (select USER.id from USER where USER.LAST_NAME in (:lastName)"), @Filter(name = "employeeClearanceCertificateCreatorUserMiddleNameNInFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME not in (:middleName)"), @Filter(name = "employeeClearanceCertificateCreatorUserMiddleNameEqFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME = :middleName)"), @Filter(name = "employeeClearanceCertificateCreatorUserMiddleNameNEqFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME != :middleName)"), @Filter(name = "employeeClearanceCertificateCreatorUserMiddleNameInFilter", condition = "creator in (select USER.id from USER where USER.MIDDLE_NAME in (:middleName)"), @Filter(name = "employeeClearanceCertificateCreatorUserUserNameNInFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME not in (:userName)"), @Filter(name = "employeeClearanceCertificateCreatorUserUserNameEqFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME = :userName)"), @Filter(name = "employeeClearanceCertificateCreatorUserUserNameNEqFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME != :userName)"), @Filter(name = "employeeClearanceCertificateCreatorUserUserNameInFilter", condition = "creator in (select USER.id from USER where USER.USER_NAME in (:userName)"), @Filter(name = "employeeClearanceCertificateCreatorUserUseridGtFilter", condition = "creator in (select USER.id from USER where USER.USERID > :userid)"), @Filter(name = "employeeClearanceCertificateCreatorUserUseridNInFilter", condition = "creator in (select USER.id from USER where USER.USERID not in (:userid)"), @Filter(name = "employeeClearanceCertificateCreatorUserUseridLtEqFilter", condition = "creator in (select USER.id from USER where USER.USERID <= :userid)"), @Filter(name = "employeeClearanceCertificateCreatorUserUseridLtFilter", condition = "creator in (select USER.id from USER where USER.USERID < :userid)"), @Filter(name = "employeeClearanceCertificateCreatorUserUseridEqFilter", condition = "creator in (select USER.id from USER where USER.USERID = :userid)"), @Filter(name = "employeeClearanceCertificateCreatorUserUseridNEqFilter", condition = "creator in (select USER.id from USER where USER.USERID != :userid)"), @Filter(name = "employeeClearanceCertificateCreatorUserUseridInFilter", condition = "creator in (select USER.id from USER where USER.USERID in (:userid)"), @Filter(name = "employeeClearanceCertificateCreatorUserUseridBwFilter", condition = "creator in (select USER.id from USER where USER.USERID > :userid_MIN  AND USER.USERID < :userid_MAX )"), @Filter(name = "employeeClearanceCertificateCreatorUserUseridGtEqFilter", condition = "creator in (select USER.id from USER where USER.USERID >= :userid)"), @Filter(name = "employeeClearanceCertificateCreatedTimeGtFilter", condition = "CREATED_TIME > (SELECT DATE_FORMAT(:createdTime, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateCreatedTimeLtFilter", condition = "CREATED_TIME < (SELECT DATE_FORMAT(:createdTime, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateCreatedTimeBwFilter", condition = "CREATED_TIME >(SELECT DATE_FORMAT(:createdTime_MIN, '%Y-%m-%d')) AND CREATED_TIME <(SELECT DATE_FORMAT(:createdTime_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateLastModifierUserFirstNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME not in (:firstName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserFirstNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME = :firstName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserFirstNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME != :firstName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserFirstNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.FIRST_NAME in (:firstName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserLastNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME not in (:lastName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserLastNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME = :lastName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserLastNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME != :lastName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserLastNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.LAST_NAME in (:lastName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserMiddleNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME not in (:middleName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserMiddleNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME = :middleName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserMiddleNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME != :middleName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserMiddleNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.MIDDLE_NAME in (:middleName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUserNameNInFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME not in (:userName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUserNameEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME = :userName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUserNameNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME != :userName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUserNameInFilter", condition = "lastModifier in (select USER.id from USER where USER.USER_NAME in (:userName)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUseridGtFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID > :userid)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUseridNInFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID not in (:userid)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUseridLtEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID <= :userid)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUseridLtFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID < :userid)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUseridEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID = :userid)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUseridNEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID != :userid)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUseridInFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID in (:userid)"), @Filter(name = "employeeClearanceCertificateLastModifierUserUseridBwFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID > :userid_MIN  AND USER.USERID < :userid_MAX )"), @Filter(name = "employeeClearanceCertificateLastModifierUserUseridGtEqFilter", condition = "lastModifier in (select USER.id from USER where USER.USERID >= :userid)"), @Filter(name = "employeeClearanceCertificateModifiedTimeGtFilter", condition = "MODIFIED_TIME > (SELECT DATE_FORMAT(:modifiedTime, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateModifiedTimeLtFilter", condition = "MODIFIED_TIME < (SELECT DATE_FORMAT(:modifiedTime, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateModifiedTimeBwFilter", condition = "MODIFIED_TIME >(SELECT DATE_FORMAT(:modifiedTime_MIN, '%Y-%m-%d')) AND MODIFIED_TIME <(SELECT DATE_FORMAT(:modifiedTime_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeClearanceCertificateCustomerIdGtFilter", condition = "CUSTOMER_ID > :customerId"), @Filter(name = "employeeClearanceCertificateCustomerIdNInFilter", condition = "CUSTOMER_ID not in (:customerId)"), @Filter(name = "employeeClearanceCertificateCustomerIdLtEqFilter", condition = "CUSTOMER_ID <= :customerId"), @Filter(name = "employeeClearanceCertificateCustomerIdLtFilter", condition = "CUSTOMER_ID < :customerId"), @Filter(name = "employeeClearanceCertificateCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId"), @Filter(name = "employeeClearanceCertificateCustomerIdNEqFilter", condition = "CUSTOMER_ID != :customerId"), @Filter(name = "employeeClearanceCertificateCustomerIdInFilter", condition = "CUSTOMER_ID in (:customerId)"), @Filter(name = "employeeClearanceCertificateCustomerIdBwFilter", condition = "CUSTOMER_ID > :customerId_MIN  AND CUSTOMER_ID < :customerId_MAX"), @Filter(name = "employeeClearanceCertificateCustomerIdGtEqFilter", condition = "CUSTOMER_ID >= :customerId"), @Filter(name = "employeeClearanceCertificateCustomerIdEqFilter", condition = "CUSTOMER_ID = :customerId") })
//@FilterDefs(value = { @FilterDef(name = "employeeClearanceCertificateApprovalDateGtFilter", parameters = { @ParamDef(name = "approvalDate", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApprovalDateLtFilter", parameters = { @ParamDef(name = "approvalDate", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApprovalDateBwFilter", parameters = { @ParamDef(name = "approvalDate_MIN", type = String.class), @ParamDef(name = "approvalDate_MAX", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApproverDesignationNInFilter", parameters = { @ParamDef(name = "approverDesignation", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApproverDesignationEqFilter", parameters = { @ParamDef(name = "approverDesignation", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApproverDesignationNEqFilter", parameters = { @ParamDef(name = "approverDesignation", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApproverDesignationInFilter", parameters = { @ParamDef(name = "approverDesignation", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApproverNameNInFilter", parameters = { @ParamDef(name = "approverName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApproverNameEqFilter", parameters = { @ParamDef(name = "approverName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApproverNameNEqFilter", parameters = { @ParamDef(name = "approverName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateApproverNameInFilter", parameters = { @ParamDef(name = "approverName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCertificateNumberNInFilter", parameters = { @ParamDef(name = "certificateNumber", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCertificateNumberEqFilter", parameters = { @ParamDef(name = "certificateNumber", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCertificateNumberNEqFilter", parameters = { @ParamDef(name = "certificateNumber", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCertificateNumberInFilter", parameters = { @ParamDef(name = "certificateNumber", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCertificateTypeNInFilter", parameters = { @ParamDef(name = "certificateType", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCertificateTypeEqFilter", parameters = { @ParamDef(name = "certificateType", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCertificateTypeNEqFilter", parameters = { @ParamDef(name = "certificateType", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCertificateTypeInFilter", parameters = { @ParamDef(name = "certificateType", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateClearanceStatusNInFilter", parameters = { @ParamDef(name = "clearanceStatus", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateClearanceStatusEqFilter", parameters = { @ParamDef(name = "clearanceStatus", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateClearanceStatusNEqFilter", parameters = { @ParamDef(name = "clearanceStatus", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateClearanceStatusInFilter", parameters = { @ParamDef(name = "clearanceStatus", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateDeletedEqFilter", parameters = { @ParamDef(name = "deleted", type = boolean.class) }), @FilterDef(name = "employeeClearanceCertificateDeletedNEqFilter", parameters = { @ParamDef(name = "deleted", type = boolean.class) }), @FilterDef(name = "employeeClearanceCertificateDependenciesNInFilter", parameters = { @ParamDef(name = "dependencies", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateDependenciesEqFilter", parameters = { @ParamDef(name = "dependencies", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateDependenciesNEqFilter", parameters = { @ParamDef(name = "dependencies", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateDependenciesInFilter", parameters = { @ParamDef(name = "dependencies", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateDocumentUploadNInFilter", parameters = { @ParamDef(name = "documentUpload", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateDocumentUploadEqFilter", parameters = { @ParamDef(name = "documentUpload", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateDocumentUploadNEqFilter", parameters = { @ParamDef(name = "documentUpload", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateDocumentUploadInFilter", parameters = { @ParamDef(name = "documentUpload", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeName2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeName2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeName2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeName2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeName1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeName1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeName1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateEmployeeName1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateExpiryDateGtFilter", parameters = { @ParamDef(name = "expiryDate", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateExpiryDateLtFilter", parameters = { @ParamDef(name = "expiryDate", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateExpiryDateBwFilter", parameters = { @ParamDef(name = "expiryDate_MIN", type = String.class), @ParamDef(name = "expiryDate_MAX", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateIssueDateGtFilter", parameters = { @ParamDef(name = "issueDate", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateIssueDateLtFilter", parameters = { @ParamDef(name = "issueDate", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateIssueDateBwFilter", parameters = { @ParamDef(name = "issueDate_MIN", type = String.class), @ParamDef(name = "issueDate_MAX", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateIssuingDepartmentNInFilter", parameters = { @ParamDef(name = "issuingDepartment", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateIssuingDepartmentEqFilter", parameters = { @ParamDef(name = "issuingDepartment", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateIssuingDepartmentNEqFilter", parameters = { @ParamDef(name = "issuingDepartment", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateIssuingDepartmentInFilter", parameters = { @ParamDef(name = "issuingDepartment", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateMandatoryEqFilter", parameters = { @ParamDef(name = "mandatory", type = Boolean.class) }), @FilterDef(name = "employeeClearanceCertificateMandatoryNEqFilter", parameters = { @ParamDef(name = "mandatory", type = Boolean.class) }), @FilterDef(name = "employeeClearanceCertificateRemarksNInFilter", parameters = { @ParamDef(name = "remarks", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateRemarksEqFilter", parameters = { @ParamDef(name = "remarks", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateRemarksNEqFilter", parameters = { @ParamDef(name = "remarks", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateRemarksInFilter", parameters = { @ParamDef(name = "remarks", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateRoleRequirementsNInFilter", parameters = { @ParamDef(name = "roleRequirements", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateRoleRequirementsEqFilter", parameters = { @ParamDef(name = "roleRequirements", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateRoleRequirementsNEqFilter", parameters = { @ParamDef(name = "roleRequirements", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateRoleRequirementsInFilter", parameters = { @ParamDef(name = "roleRequirements", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateValidityScopeNInFilter", parameters = { @ParamDef(name = "validityScope", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateValidityScopeEqFilter", parameters = { @ParamDef(name = "validityScope", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateValidityScopeNEqFilter", parameters = { @ParamDef(name = "validityScope", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateValidityScopeInFilter", parameters = { @ParamDef(name = "validityScope", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateVerificationDetailsNInFilter", parameters = { @ParamDef(name = "verificationDetails", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateVerificationDetailsEqFilter", parameters = { @ParamDef(name = "verificationDetails", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateVerificationDetailsNEqFilter", parameters = { @ParamDef(name = "verificationDetails", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateVerificationDetailsInFilter", parameters = { @ParamDef(name = "verificationDetails", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUserNameNInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUserNameEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUserNameNEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUserNameInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUseridGtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUseridNInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUseridLtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUseridLtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUseridEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUseridNEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUseridInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUseridBwFilter", parameters = { @ParamDef(name = "userid_MIN", type = Integer.class), @ParamDef(name = "userid_MAX", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCreatorUserUseridGtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCreatedTimeGtFilter", parameters = { @ParamDef(name = "createdTime", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatedTimeLtFilter", parameters = { @ParamDef(name = "createdTime", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCreatedTimeBwFilter", parameters = { @ParamDef(name = "createdTime_MIN", type = String.class), @ParamDef(name = "createdTime_MAX", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserMiddleNameNInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserMiddleNameEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserMiddleNameNEqFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserMiddleNameInFilter", parameters = { @ParamDef(name = "middleName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUserNameNInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUserNameEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUserNameNEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUserNameInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUseridGtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUseridNInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUseridLtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUseridLtFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUseridEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUseridNEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUseridInFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUseridBwFilter", parameters = { @ParamDef(name = "userid_MIN", type = Integer.class), @ParamDef(name = "userid_MAX", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateLastModifierUserUseridGtEqFilter", parameters = { @ParamDef(name = "userid", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateModifiedTimeGtFilter", parameters = { @ParamDef(name = "modifiedTime", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateModifiedTimeLtFilter", parameters = { @ParamDef(name = "modifiedTime", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateModifiedTimeBwFilter", parameters = { @ParamDef(name = "modifiedTime_MIN", type = String.class), @ParamDef(name = "modifiedTime_MAX", type = String.class) }), @FilterDef(name = "employeeClearanceCertificateCustomerIdGtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCustomerIdNInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCustomerIdLtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCustomerIdLtFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCustomerIdEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCustomerIdNEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCustomerIdInFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCustomerIdBwFilter", parameters = { @ParamDef(name = "customerId_MIN", type = Integer.class), @ParamDef(name = "customerId_MAX", type = Integer.class) }), @FilterDef(name = "employeeClearanceCertificateCustomerIdGtEqFilter", parameters = { @ParamDef(name = "customerId", type = Integer.class) }) })
public class EmployeeClearanceCertificate extends BaseEntitySaaS {

    @Basic
    @Column(name = "APPROVAL_DATE", length = 19)
    private Date approvalDate;

    @Size(max = 100)
    @Basic
    @Column(name = "APPROVER_DESIGNATION", length = 100)
    private String approverDesignation;

    @Size(max = 100)
    @Basic
    @Column(name = "APPROVER_NAME", length = 100)
    private String approverName;

    @Size(max = 50)
    @Basic
    @Column(name = "CERTIFICATE_NUMBER", length = 50)
    private String certificateNumber;

    @Basic
    @Column(name = "CERTIFICATE_TYPE", columnDefinition = "ENUM('Medical','Security','Financial','Employment','Background','Compliance','Exit','Project','Legal','IT','Safety','Government','Tax')")
    private String certificateType;

    @Basic
    @Column(name = "CLEARANCE_STATUS", columnDefinition = "ENUM('Pending','Approved','Rejected')")
    private String clearanceStatus;

    @Basic
    private boolean deleted;

    @Basic
    @Column(columnDefinition = "LONGTEXT")
    private String dependencies;

    @Size(max = 255)
    @Basic
    @Column(name = "DOCUMENT_UPLOAD")
    private String documentUpload;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "EMPLOYEE_ID", columnDefinition = "INT")
    private Employee employee;

    @Basic
    @Column(name = "EXPIRY_DATE", length = 19)
    private Date expiryDate;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(name = "ISSUE_DATE", length = 19)
    private Date issueDate;

    @Size(max = 100)
    @Basic
    @Column(name = "ISSUING_DEPARTMENT", length = 100)
    private String issuingDepartment;

    @NotNull
    @Basic
    @Column(nullable = false)
    private Boolean mandatory;

    @Basic
    @Column(columnDefinition = "LONGTEXT")
    private String remarks;

    @Basic
    @Column(name = "ROLE_REQUIREMENTS", columnDefinition = "LONGTEXT")
    private String roleRequirements;

    @Size(max = 100)
    @Basic
    @Column(name = "VALIDITY_SCOPE", length = 100)
    private String validityScope;

    @Basic
    @Column(name = "VERIFICATION_DETAILS", columnDefinition = "LONGTEXT")
    private String verificationDetails;

    public EmployeeClearanceCertificate() {
    }

    public EmployeeClearanceCertificate(Integer id) {
        this.id = id;
    }

    public Date getApprovalDate() {
        return approvalDate;
    }

    public void setApprovalDate(Date approvalDate) {
        this.approvalDate = approvalDate;
    }

    public String getApproverDesignation() {
        return approverDesignation;
    }

    public void setApproverDesignation(String approverDesignation) {
        this.approverDesignation = approverDesignation;
    }

    public String getApproverName() {
        return approverName;
    }

    public void setApproverName(String approverName) {
        this.approverName = approverName;
    }

    public String getCertificateNumber() {
        return certificateNumber;
    }

    public void setCertificateNumber(String certificateNumber) {
        this.certificateNumber = certificateNumber;
    }

    public String getCertificateType() {
        return certificateType;
    }

    public void setCertificateType(String certificateType) {
        this.certificateType = certificateType;
    }

    public String getClearanceStatus() {
        return clearanceStatus;
    }

    public void setClearanceStatus(String clearanceStatus) {
        this.clearanceStatus = clearanceStatus;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public String getDependencies() {
        return dependencies;
    }

    public void setDependencies(String dependencies) {
        this.dependencies = dependencies;
    }

    public String getDocumentUpload() {
        return documentUpload;
    }

    public void setDocumentUpload(String documentUpload) {
        this.documentUpload = documentUpload;
    }

    public Employee getEmployee() {
        return employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    public Date getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(Date expiryDate) {
        this.expiryDate = expiryDate;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Date getIssueDate() {
        return issueDate;
    }

    public void setIssueDate(Date issueDate) {
        this.issueDate = issueDate;
    }

    public String getIssuingDepartment() {
        return issuingDepartment;
    }

    public void setIssuingDepartment(String issuingDepartment) {
        this.issuingDepartment = issuingDepartment;
    }

    public Boolean isMandatory() {
        return mandatory;
    }

    public void setMandatory(Boolean mandatory) {
        this.mandatory = mandatory;
    }

    public String getRemarks() {
        return remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    public String getRoleRequirements() {
        return roleRequirements;
    }

    public void setRoleRequirements(String roleRequirements) {
        this.roleRequirements = roleRequirements;
    }

    public String getValidityScope() {
        return validityScope;
    }

    public void setValidityScope(String validityScope) {
        this.validityScope = validityScope;
    }

    public String getVerificationDetails() {
        return verificationDetails;
    }

    public void setVerificationDetails(String verificationDetails) {
        this.verificationDetails = verificationDetails;
    }
}

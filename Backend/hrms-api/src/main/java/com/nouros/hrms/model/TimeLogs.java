package com.nouros.hrms.model;

import java.util.Date;
import java.util.List;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Audited
@Table(name = "TIME_LOGS")
@JsonFilter("propertyFilter")
@Filters(value = { @Filter(name = "timeLogsBillableStatusNInFilter", condition = "BILLABLE_STATUS not in (:billableStatus)"), @Filter(name = "timeLogsBillableStatusEqFilter", condition = "BILLABLE_STATUS = :billableStatus"), @Filter(name = "timeLogsBillableStatusNEqFilter", condition = "BILLABLE_STATUS != :billableStatus"), @Filter(name = "timeLogsBillableStatusInFilter", condition = "BILLABLE_STATUS in (:billableStatus)"), @Filter(name = "timeLogsDateGtFilter", condition = "DATE > (SELECT DATE_FORMAT(:date, '%Y-%m-%d'))"), @Filter(name = "timeLogsDateLtFilter", condition = "DATE < (SELECT DATE_FORMAT(:date, '%Y-%m-%d'))"), @Filter(name = "timeLogsDateBwFilter", condition = "DATE >(SELECT DATE_FORMAT(:date_MIN, '%Y-%m-%d')) AND DATE <(SELECT DATE_FORMAT(:date_MAX, '%Y-%m-%d'))"), @Filter(name = "timeLogsDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "timeLogsDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "timeLogsDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "timeLogsDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "timeLogsFromTimeGtFilter", condition = "FROM_TIME > (SELECT DATE_FORMAT(:fromTime, '%Y-%m-%d'))"), @Filter(name = "timeLogsFromTimeLtFilter", condition = "FROM_TIME < (SELECT DATE_FORMAT(:fromTime, '%Y-%m-%d'))"), @Filter(name = "timeLogsFromTimeBwFilter", condition = "FROM_TIME >(SELECT DATE_FORMAT(:fromTime_MIN, '%Y-%m-%d')) AND FROM_TIME <(SELECT DATE_FORMAT(:fromTime_MAX, '%Y-%m-%d'))"), @Filter(name = "timeLogsHoursGtFilter", condition = "HOURS > :hours"), @Filter(name = "timeLogsHoursNInFilter", condition = "HOURS not in (:hours)"), @Filter(name = "timeLogsHoursLtEqFilter", condition = "HOURS <= :hours"), @Filter(name = "timeLogsHoursLtFilter", condition = "HOURS < :hours"), @Filter(name = "timeLogsHoursEqFilter", condition = "HOURS = :hours"), @Filter(name = "timeLogsHoursNEqFilter", condition = "HOURS != :hours"), @Filter(name = "timeLogsHoursInFilter", condition = "HOURS in (:hours)"), @Filter(name = "timeLogsHoursBwFilter", condition = "HOURS > :hours_MIN  AND HOURS < :hours_MAX"), @Filter(name = "timeLogsHoursGtEqFilter", condition = "HOURS >= :hours"), @Filter(name = "timeLogsHoursEqFilter", condition = "HOURS = :hours"), @Filter(name = "timeLogsIdGtFilter", condition = "ID > :id"), @Filter(name = "timeLogsIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "timeLogsIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "timeLogsIdLtFilter", condition = "ID < :id"), @Filter(name = "timeLogsIdEqFilter", condition = "ID = :id"), @Filter(name = "timeLogsIdNEqFilter", condition = "ID != :id"), @Filter(name = "timeLogsIdInFilter", condition = "ID in (:id)"), @Filter(name = "timeLogsIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "timeLogsIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "timeLogsIdEqFilter", condition = "ID = :id"), @Filter(name = "timeLogsJobsEndDateGtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.END_DATE > (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))))"), @Filter(name = "timeLogsJobsEndDateLtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.END_DATE < (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))))"), @Filter(name = "timeLogsJobsEndDateBwFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.END_DATE > (SELECT DATE_FORMAT(:endDate_MIN , '%Y-%m-%d')) AND JOBS.END_DATE < (SELECT DATE_FORMAT(:endDate_MAX , '%Y-%m-%d')))"), @Filter(name = "timeLogsJobsProjectNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.PROJECT not in (:project)"), @Filter(name = "timeLogsJobsProjectEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.PROJECT = :project)"), @Filter(name = "timeLogsJobsProjectNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.PROJECT != :project)"), @Filter(name = "timeLogsJobsProjectInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.PROJECT in (:project)"), @Filter(name = "timeLogsJobsRatePerHourGtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.RATE_PER_HOUR > :ratePerHour)"), @Filter(name = "timeLogsJobsRatePerHourNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.RATE_PER_HOUR not in (:ratePerHour)"), @Filter(name = "timeLogsJobsRatePerHourLtEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.RATE_PER_HOUR <= :ratePerHour)"), @Filter(name = "timeLogsJobsRatePerHourLtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.RATE_PER_HOUR < :ratePerHour)"), @Filter(name = "timeLogsJobsRatePerHourEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.RATE_PER_HOUR = :ratePerHour)"), @Filter(name = "timeLogsJobsRatePerHourNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.RATE_PER_HOUR != :ratePerHour)"), @Filter(name = "timeLogsJobsRatePerHourInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.RATE_PER_HOUR in (:ratePerHour)"), @Filter(name = "timeLogsJobsRatePerHourBwFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.RATE_PER_HOUR > :ratePerHour_MIN  AND JOBS.RATE_PER_HOUR < :ratePerHour_MAX )"), @Filter(name = "timeLogsJobsRatePerHourGtEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.RATE_PER_HOUR >= :ratePerHour)"), @Filter(name = "timeLogsJobsIdGtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.ID > :id)"), @Filter(name = "timeLogsJobsIdNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.ID not in (:id)"), @Filter(name = "timeLogsJobsIdLtEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.ID <= :id)"), @Filter(name = "timeLogsJobsIdLtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.ID < :id)"), @Filter(name = "timeLogsJobsIdEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.ID = :id)"), @Filter(name = "timeLogsJobsIdNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.ID != :id)"), @Filter(name = "timeLogsJobsIdInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.ID in (:id)"), @Filter(name = "timeLogsJobsIdBwFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.ID > :id_MIN  AND JOBS.ID < :id_MAX )"), @Filter(name = "timeLogsJobsIdGtEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.ID >= :id)"), @Filter(name = "timeLogsJobsJobNameNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.JOB_NAME not in (:jobName)"), @Filter(name = "timeLogsJobsJobNameEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.JOB_NAME = :jobName)"), @Filter(name = "timeLogsJobsJobNameNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.JOB_NAME != :jobName)"), @Filter(name = "timeLogsJobsJobNameInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.JOB_NAME in (:jobName)"), @Filter(name = "timeLogsJobsBillableStatusNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.BILLABLE_STATUS not in (:billableStatus)"), @Filter(name = "timeLogsJobsBillableStatusEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.BILLABLE_STATUS = :billableStatus)"), @Filter(name = "timeLogsJobsBillableStatusNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.BILLABLE_STATUS != :billableStatus)"), @Filter(name = "timeLogsJobsBillableStatusInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.BILLABLE_STATUS in (:billableStatus)"), @Filter(name = "timeLogsJobsStartDateGtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.START_DATE > (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))))"), @Filter(name = "timeLogsJobsStartDateLtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.START_DATE < (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))))"), @Filter(name = "timeLogsJobsStartDateBwFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.START_DATE > (SELECT DATE_FORMAT(:startDate_MIN , '%Y-%m-%d')) AND JOBS.START_DATE < (SELECT DATE_FORMAT(:startDate_MAX , '%Y-%m-%d')))"), @Filter(name = "timeLogsJobsStatusNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.STATUS not in (:status)"), @Filter(name = "timeLogsJobsStatusEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.STATUS = :status)"), @Filter(name = "timeLogsJobsStatusNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.STATUS != :status)"), @Filter(name = "timeLogsJobsStatusInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.STATUS in (:status)"), @Filter(name = "timeLogsJobsDescriptionNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.DESCRIPTION not in (:description)"), @Filter(name = "timeLogsJobsDescriptionEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.DESCRIPTION = :description)"), @Filter(name = "timeLogsJobsDescriptionNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.DESCRIPTION != :description)"), @Filter(name = "timeLogsJobsDescriptionInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.DESCRIPTION in (:description)"), @Filter(name = "timeLogsJobsApprovalStatusNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "timeLogsJobsApprovalStatusEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.APPROVAL_STATUS = :approvalStatus)"), @Filter(name = "timeLogsJobsApprovalStatusNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.APPROVAL_STATUS != :approvalStatus)"), @Filter(name = "timeLogsJobsApprovalStatusInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "timeLogsJobsHoursGtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.HOURS > :hours)"), @Filter(name = "timeLogsJobsHoursNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.HOURS not in (:hours)"), @Filter(name = "timeLogsJobsHoursLtEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.HOURS <= :hours)"), @Filter(name = "timeLogsJobsHoursLtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.HOURS < :hours)"), @Filter(name = "timeLogsJobsHoursEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.HOURS = :hours)"), @Filter(name = "timeLogsJobsHoursNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.HOURS != :hours)"), @Filter(name = "timeLogsJobsHoursInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.HOURS in (:hours)"), @Filter(name = "timeLogsJobsHoursBwFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.HOURS > :hours_MIN  AND JOBS.HOURS < :hours_MAX )"), @Filter(name = "timeLogsJobsHoursGtEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.HOURS >= :hours)"), @Filter(name = "timeLogsJobsReminderNInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.REMINDER not in (:reminder)"), @Filter(name = "timeLogsJobsReminderEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.REMINDER = :reminder)"), @Filter(name = "timeLogsJobsReminderNEqFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.REMINDER != :reminder)"), @Filter(name = "timeLogsJobsReminderInFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.REMINDER in (:reminder)"), @Filter(name = "timeLogsJobsReminderTimeGtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.REMINDER_TIME > (SELECT DATE_FORMAT(:reminderTime, '%Y-%m-%d'))))"), @Filter(name = "timeLogsJobsReminderTimeLtFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.REMINDER_TIME < (SELECT DATE_FORMAT(:reminderTime, '%Y-%m-%d'))))"), @Filter(name = "timeLogsJobsReminderTimeBwFilter", condition = "JOB_ID in (select JOBS.id from JOBS where JOBS.REMINDER_TIME > (SELECT DATE_FORMAT(:reminderTime_MIN , '%Y-%m-%d')) AND JOBS.REMINDER_TIME < (SELECT DATE_FORMAT(:reminderTime_MAX , '%Y-%m-%d')))"), @Filter(name = "timeLogsProjectsIdGtFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.ID > :id)"), @Filter(name = "timeLogsProjectsIdNInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.ID not in (:id)"), @Filter(name = "timeLogsProjectsIdLtEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.ID <= :id)"), @Filter(name = "timeLogsProjectsIdLtFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.ID < :id)"), @Filter(name = "timeLogsProjectsIdEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.ID = :id)"), @Filter(name = "timeLogsProjectsIdNEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.ID != :id)"), @Filter(name = "timeLogsProjectsIdInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.ID in (:id)"), @Filter(name = "timeLogsProjectsIdBwFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.ID > :id_MIN  AND PROJECTS.ID < :id_MAX )"), @Filter(name = "timeLogsProjectsIdGtEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.ID >= :id)"), @Filter(name = "timeLogsProjectsProjectNameNInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_NAME not in (:projectName)"), @Filter(name = "timeLogsProjectsProjectNameEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_NAME = :projectName)"), @Filter(name = "timeLogsProjectsProjectNameNEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_NAME != :projectName)"), @Filter(name = "timeLogsProjectsProjectNameInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_NAME in (:projectName)"), @Filter(name = "timeLogsProjectsStatusNInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.STATUS not in (:status)"), @Filter(name = "timeLogsProjectsStatusEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.STATUS = :status)"), @Filter(name = "timeLogsProjectsStatusNEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.STATUS != :status)"), @Filter(name = "timeLogsProjectsStatusInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.STATUS in (:status)"), @Filter(name = "timeLogsProjectsProjectManagerNInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_MANAGER not in (:projectManager)"), @Filter(name = "timeLogsProjectsProjectManagerEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_MANAGER = :projectManager)"), @Filter(name = "timeLogsProjectsProjectManagerNEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_MANAGER != :projectManager)"), @Filter(name = "timeLogsProjectsProjectManagerInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_MANAGER in (:projectManager)"), @Filter(name = "timeLogsProjectsClientNameNInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.CLIENT_NAME not in (:clientName)"), @Filter(name = "timeLogsProjectsClientNameEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.CLIENT_NAME = :clientName)"), @Filter(name = "timeLogsProjectsClientNameNEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.CLIENT_NAME != :clientName)"), @Filter(name = "timeLogsProjectsClientNameInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.CLIENT_NAME in (:clientName)"), @Filter(name = "timeLogsProjectsDescriptionNInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.DESCRIPTION not in (:description)"), @Filter(name = "timeLogsProjectsDescriptionEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.DESCRIPTION = :description)"), @Filter(name = "timeLogsProjectsDescriptionNEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.DESCRIPTION != :description)"), @Filter(name = "timeLogsProjectsDescriptionInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.DESCRIPTION in (:description)"), @Filter(name = "timeLogsProjectsApprovalStatusNInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "timeLogsProjectsApprovalStatusEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.APPROVAL_STATUS = :approvalStatus)"), @Filter(name = "timeLogsProjectsApprovalStatusNEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.APPROVAL_STATUS != :approvalStatus)"), @Filter(name = "timeLogsProjectsApprovalStatusInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "timeLogsProjectsProjectHeadNInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_HEAD not in (:projectHead)"), @Filter(name = "timeLogsProjectsProjectHeadEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_HEAD = :projectHead)"), @Filter(name = "timeLogsProjectsProjectHeadNEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_HEAD != :projectHead)"), @Filter(name = "timeLogsProjectsProjectHeadInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_HEAD in (:projectHead)"), @Filter(name = "timeLogsProjectsProjectCostGtFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_COST > :projectCost)"), @Filter(name = "timeLogsProjectsProjectCostNInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_COST not in (:projectCost)"), @Filter(name = "timeLogsProjectsProjectCostLtEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_COST <= :projectCost)"), @Filter(name = "timeLogsProjectsProjectCostLtFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_COST < :projectCost)"), @Filter(name = "timeLogsProjectsProjectCostEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_COST = :projectCost)"), @Filter(name = "timeLogsProjectsProjectCostNEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_COST != :projectCost)"), @Filter(name = "timeLogsProjectsProjectCostInFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_COST in (:projectCost)"), @Filter(name = "timeLogsProjectsProjectCostBwFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_COST > :projectCost_MIN  AND PROJECTS.PROJECT_COST < :projectCost_MAX )"), @Filter(name = "timeLogsProjectsProjectCostGtEqFilter", condition = "PROJECT in (select PROJECTS.id from PROJECTS where PROJECTS.PROJECT_COST >= :projectCost)"), @Filter(name = "timeLogsToTimeGtFilter", condition = "TO_TIME > (SELECT DATE_FORMAT(:toTime, '%Y-%m-%d'))"), @Filter(name = "timeLogsToTimeLtFilter", condition = "TO_TIME < (SELECT DATE_FORMAT(:toTime, '%Y-%m-%d'))"), @Filter(name = "timeLogsToTimeBwFilter", condition = "TO_TIME >(SELECT DATE_FORMAT(:toTime_MIN, '%Y-%m-%d')) AND TO_TIME <(SELECT DATE_FORMAT(:toTime_MAX, '%Y-%m-%d'))"), @Filter(name = "timeLogsUserNameNInFilter", condition = "USER_NAME not in (:userName)"), @Filter(name = "timeLogsUserNameEqFilter", condition = "USER_NAME = :userName"), @Filter(name = "timeLogsUserNameNEqFilter", condition = "USER_NAME != :userName"), @Filter(name = "timeLogsUserNameInFilter", condition = "USER_NAME in (:userName)"), @Filter(name = "timeLogsWorkItemNInFilter", condition = "WORK_ITEM not in (:workItem)"), @Filter(name = "timeLogsWorkItemEqFilter", condition = "WORK_ITEM = :workItem"), @Filter(name = "timeLogsWorkItemNEqFilter", condition = "WORK_ITEM != :workItem"), @Filter(name = "timeLogsWorkItemInFilter", condition = "WORK_ITEM in (:workItem)"), @Filter(name = "timeLogsWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "timeLogsWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "timeLogsWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "timeLogsWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "timeLogsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "timeLogsWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "timeLogsWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "timeLogsWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "timeLogsWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "timeLogsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "timeLogsBillableStatusNInFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "timeLogsBillableStatusEqFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "timeLogsBillableStatusNEqFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "timeLogsBillableStatusInFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "timeLogsDateGtFilter", parameters = { @ParamDef(name = "date", type = String.class) }), @FilterDef(name = "timeLogsDateLtFilter", parameters = { @ParamDef(name = "date", type = String.class) }), @FilterDef(name = "timeLogsDateBwFilter", parameters = { @ParamDef(name = "date_MIN", type = String.class), @ParamDef(name = "date_MAX", type = String.class) }), @FilterDef(name = "timeLogsDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsFromTimeGtFilter", parameters = { @ParamDef(name = "fromTime", type = String.class) }), @FilterDef(name = "timeLogsFromTimeLtFilter", parameters = { @ParamDef(name = "fromTime", type = String.class) }), @FilterDef(name = "timeLogsFromTimeBwFilter", parameters = { @ParamDef(name = "fromTime_MIN", type = String.class), @ParamDef(name = "fromTime_MAX", type = String.class) }), @FilterDef(name = "timeLogsHoursGtFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsHoursNInFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsHoursLtEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsHoursLtFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsHoursEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsHoursNEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsHoursInFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsHoursBwFilter", parameters = { @ParamDef(name = "hours_MIN", type = Double.class), @ParamDef(name = "hours_MAX", type = Double.class) }), @FilterDef(name = "timeLogsHoursGtEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "timeLogsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsJobsEndDateGtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "timeLogsJobsEndDateLtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "timeLogsJobsEndDateBwFilter", parameters = { @ParamDef(name = "endDate_MIN", type = String.class), @ParamDef(name = "endDate_MAX", type = String.class) }), @FilterDef(name = "timeLogsJobsProjectNInFilter", parameters = { @ParamDef(name = "project", type = String.class) }), @FilterDef(name = "timeLogsJobsProjectEqFilter", parameters = { @ParamDef(name = "project", type = String.class) }), @FilterDef(name = "timeLogsJobsProjectNEqFilter", parameters = { @ParamDef(name = "project", type = String.class) }), @FilterDef(name = "timeLogsJobsProjectInFilter", parameters = { @ParamDef(name = "project", type = String.class) }), @FilterDef(name = "timeLogsJobsRatePerHourGtFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "timeLogsJobsRatePerHourNInFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "timeLogsJobsRatePerHourLtEqFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "timeLogsJobsRatePerHourLtFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "timeLogsJobsRatePerHourEqFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "timeLogsJobsRatePerHourNEqFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "timeLogsJobsRatePerHourInFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "timeLogsJobsRatePerHourBwFilter", parameters = { @ParamDef(name = "ratePerHour_MIN", type = Double.class), @ParamDef(name = "ratePerHour_MAX", type = Double.class) }), @FilterDef(name = "timeLogsJobsRatePerHourGtEqFilter", parameters = { @ParamDef(name = "ratePerHour", type = Double.class) }), @FilterDef(name = "timeLogsJobsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsJobsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsJobsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsJobsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsJobsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsJobsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsJobsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsJobsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "timeLogsJobsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsJobsJobNameNInFilter", parameters = { @ParamDef(name = "jobName", type = String.class) }), @FilterDef(name = "timeLogsJobsJobNameEqFilter", parameters = { @ParamDef(name = "jobName", type = String.class) }), @FilterDef(name = "timeLogsJobsJobNameNEqFilter", parameters = { @ParamDef(name = "jobName", type = String.class) }), @FilterDef(name = "timeLogsJobsJobNameInFilter", parameters = { @ParamDef(name = "jobName", type = String.class) }), @FilterDef(name = "timeLogsJobsBillableStatusNInFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "timeLogsJobsBillableStatusEqFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "timeLogsJobsBillableStatusNEqFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "timeLogsJobsBillableStatusInFilter", parameters = { @ParamDef(name = "billableStatus", type = String.class) }), @FilterDef(name = "timeLogsJobsStartDateGtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "timeLogsJobsStartDateLtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "timeLogsJobsStartDateBwFilter", parameters = { @ParamDef(name = "startDate_MIN", type = String.class), @ParamDef(name = "startDate_MAX", type = String.class) }), @FilterDef(name = "timeLogsJobsStatusNInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "timeLogsJobsStatusEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "timeLogsJobsStatusNEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "timeLogsJobsStatusInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "timeLogsJobsDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsJobsDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsJobsDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsJobsDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsJobsApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeLogsJobsApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeLogsJobsApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeLogsJobsApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeLogsJobsHoursGtFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsJobsHoursNInFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsJobsHoursLtEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsJobsHoursLtFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsJobsHoursEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsJobsHoursNEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsJobsHoursInFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsJobsHoursBwFilter", parameters = { @ParamDef(name = "hours_MIN", type = Double.class), @ParamDef(name = "hours_MAX", type = Double.class) }), @FilterDef(name = "timeLogsJobsHoursGtEqFilter", parameters = { @ParamDef(name = "hours", type = Double.class) }), @FilterDef(name = "timeLogsJobsReminderNInFilter", parameters = { @ParamDef(name = "reminder", type = String.class) }), @FilterDef(name = "timeLogsJobsReminderEqFilter", parameters = { @ParamDef(name = "reminder", type = String.class) }), @FilterDef(name = "timeLogsJobsReminderNEqFilter", parameters = { @ParamDef(name = "reminder", type = String.class) }), @FilterDef(name = "timeLogsJobsReminderInFilter", parameters = { @ParamDef(name = "reminder", type = String.class) }), @FilterDef(name = "timeLogsJobsReminderTimeGtFilter", parameters = { @ParamDef(name = "reminderTime", type = String.class) }), @FilterDef(name = "timeLogsJobsReminderTimeLtFilter", parameters = { @ParamDef(name = "reminderTime", type = String.class) }), @FilterDef(name = "timeLogsJobsReminderTimeBwFilter", parameters = { @ParamDef(name = "reminderTime_MIN", type = String.class), @ParamDef(name = "reminderTime_MAX", type = String.class) }), @FilterDef(name = "timeLogsProjectsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsProjectsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsProjectsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsProjectsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsProjectsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsProjectsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsProjectsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsProjectsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "timeLogsProjectsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeLogsProjectsProjectNameNInFilter", parameters = { @ParamDef(name = "projectName", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectNameEqFilter", parameters = { @ParamDef(name = "projectName", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectNameNEqFilter", parameters = { @ParamDef(name = "projectName", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectNameInFilter", parameters = { @ParamDef(name = "projectName", type = String.class) }), @FilterDef(name = "timeLogsProjectsStatusNInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "timeLogsProjectsStatusEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "timeLogsProjectsStatusNEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "timeLogsProjectsStatusInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectManagerNInFilter", parameters = { @ParamDef(name = "projectManager", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectManagerEqFilter", parameters = { @ParamDef(name = "projectManager", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectManagerNEqFilter", parameters = { @ParamDef(name = "projectManager", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectManagerInFilter", parameters = { @ParamDef(name = "projectManager", type = String.class) }), @FilterDef(name = "timeLogsProjectsClientNameNInFilter", parameters = { @ParamDef(name = "clientName", type = String.class) }), @FilterDef(name = "timeLogsProjectsClientNameEqFilter", parameters = { @ParamDef(name = "clientName", type = String.class) }), @FilterDef(name = "timeLogsProjectsClientNameNEqFilter", parameters = { @ParamDef(name = "clientName", type = String.class) }), @FilterDef(name = "timeLogsProjectsClientNameInFilter", parameters = { @ParamDef(name = "clientName", type = String.class) }), @FilterDef(name = "timeLogsProjectsDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsProjectsDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsProjectsDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsProjectsDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeLogsProjectsApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeLogsProjectsApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeLogsProjectsApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeLogsProjectsApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectHeadNInFilter", parameters = { @ParamDef(name = "projectHead", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectHeadEqFilter", parameters = { @ParamDef(name = "projectHead", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectHeadNEqFilter", parameters = { @ParamDef(name = "projectHead", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectHeadInFilter", parameters = { @ParamDef(name = "projectHead", type = String.class) }), @FilterDef(name = "timeLogsProjectsProjectCostGtFilter", parameters = { @ParamDef(name = "projectCost", type = Double.class) }), @FilterDef(name = "timeLogsProjectsProjectCostNInFilter", parameters = { @ParamDef(name = "projectCost", type = Double.class) }), @FilterDef(name = "timeLogsProjectsProjectCostLtEqFilter", parameters = { @ParamDef(name = "projectCost", type = Double.class) }), @FilterDef(name = "timeLogsProjectsProjectCostLtFilter", parameters = { @ParamDef(name = "projectCost", type = Double.class) }), @FilterDef(name = "timeLogsProjectsProjectCostEqFilter", parameters = { @ParamDef(name = "projectCost", type = Double.class) }), @FilterDef(name = "timeLogsProjectsProjectCostNEqFilter", parameters = { @ParamDef(name = "projectCost", type = Double.class) }), @FilterDef(name = "timeLogsProjectsProjectCostInFilter", parameters = { @ParamDef(name = "projectCost", type = Double.class) }), @FilterDef(name = "timeLogsProjectsProjectCostBwFilter", parameters = { @ParamDef(name = "projectCost_MIN", type = Double.class), @ParamDef(name = "projectCost_MAX", type = Double.class) }), @FilterDef(name = "timeLogsProjectsProjectCostGtEqFilter", parameters = { @ParamDef(name = "projectCost", type = Double.class) }), @FilterDef(name = "timeLogsToTimeGtFilter", parameters = { @ParamDef(name = "toTime", type = String.class) }), @FilterDef(name = "timeLogsToTimeLtFilter", parameters = { @ParamDef(name = "toTime", type = String.class) }), @FilterDef(name = "timeLogsToTimeBwFilter", parameters = { @ParamDef(name = "toTime_MIN", type = String.class), @ParamDef(name = "toTime_MAX", type = String.class) }), @FilterDef(name = "timeLogsUserNameNInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "timeLogsUserNameEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "timeLogsUserNameNEqFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "timeLogsUserNameInFilter", parameters = { @ParamDef(name = "userName", type = String.class) }), @FilterDef(name = "timeLogsWorkItemNInFilter", parameters = { @ParamDef(name = "workItem", type = String.class) }), @FilterDef(name = "timeLogsWorkItemEqFilter", parameters = { @ParamDef(name = "workItem", type = String.class) }), @FilterDef(name = "timeLogsWorkItemNEqFilter", parameters = { @ParamDef(name = "workItem", type = String.class) }), @FilterDef(name = "timeLogsWorkItemInFilter", parameters = { @ParamDef(name = "workItem", type = String.class) }), @FilterDef(name = "timeLogsWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeLogsWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeLogsWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeLogsWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeLogsWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeLogsWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeLogsWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeLogsWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "timeLogsWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class TimeLogs extends BaseEntitySaaS{

    @Basic
    @Column(name = "BILLABLE_STATUS", columnDefinition = "ENUM", length = 12)
    private String billableStatus;


    @Basic
    @Column(columnDefinition = "LONGTEXT")
    private String description;

    @Basic
    @Column(name = "FROM_TIME", length = 19)
    private Date fromTime;

    
    @Basic
    @Column(name = "TOTAL_MINUTES",columnDefinition = "INT")
    private Integer totalMinutes;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;
     
    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "JOB_ID", columnDefinition = "INT")
    private Jobs jobs;
    
    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "PROJECT", columnDefinition = "INT")
    private Projects projects;

    @Basic
    @Column(name = "TO_TIME", length = 19)
    private Date toTime;

    @Size(max = 50)
    @Basic
    @Column(name = "USER_NAME", length = 50)
    private String userName;

    @Size(max = 100)
    @Basic
    @Column(name = "WORK_ITEM", length = 100)
    private String workItem;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;
    
    @Basic
    @Column(name = "MONTH", columnDefinition = "INT")
    private Integer month;
    
    @Basic
    @Column(name = "WEEK_NO", columnDefinition = "INT")
    private Integer weekNo;
    
    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "EMPLOYEE_ID", columnDefinition = "INT")
    private Employee employeeId;
    
    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "TIMESHEET_FK", columnDefinition = "INT")
    private TimeSheet timesheetFk;
    
    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "CLIENT_FK", columnDefinition = "INT")
    private Clients clientFk;
    
    @Basic
    @Column(name = "SUNDAY",columnDefinition = "INT")
    private Integer sunday;
    
    @Basic
    @Column(name = "MONDAY",columnDefinition = "INT")
    private Integer monday;
    
    @Basic
    @Column(name = "TUESDAY",columnDefinition = "INT")
    private Integer tuesday;
    
    @Basic
    @Column(name = "WEDNESDAY",columnDefinition = "INT")
    private Integer wednesday;
    
    @Basic
    @Column(name = "THURSDAY",columnDefinition = "INT")
    private Integer thursday;
    
    @Basic
    @Column(name = "FRIDAY",columnDefinition = "INT")
    private Integer friday;
    
    @Basic
    @Column(name = "SATURDAY",columnDefinition = "INT")
    private Integer saturday;
    
    
    @Size(max = 100)
    @Basic
    @Column(name = "TASK_NAME", length = 100)
    private String taskName;
    
    
    @Basic
    @Column(name = "YEAR", columnDefinition = "INT")
    private Integer year;
    

    public TimeLogs() {
    }

    public TimeLogs(Integer id) {
        this.id = id;
    }

    public String getBillableStatus() {
        return billableStatus;
    }

    public void setBillableStatus(String billableStatus) {
        this.billableStatus = billableStatus;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Date getFromTime() {
        return fromTime;
    }

    public void setFromTime(Date fromTime) {
        this.fromTime = fromTime;
    }


    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Jobs getJobs() {
        return jobs;
    }

    public void setJobs(Jobs jobs) {
        this.jobs = jobs;
    }

    public Projects getProjects() {
        return projects;
    }

    public void setProjects(Projects projects) {
        this.projects = projects;
    }

    public Date getToTime() {
        return toTime;
    }

    public void setToTime(Date toTime) {
        this.toTime = toTime;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getWorkItem() {
        return workItem;
    }

    public void setWorkItem(String workItem) {
        this.workItem = workItem;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
    
    @Column(name = "PROCESS_INSTANCE_ID")
    private String processInstanceId;

    @Column(name = "WORKFLOW_STAGE")
    private String workflowStage;

    public String getProcessInstanceId() {
        return processInstanceId;
    }

    public void setProcessInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
    }

    public String getWorkflowStage() {
        return workflowStage;
    }

    public void setWorkflowStage(String workflowStage) {
        this.workflowStage = workflowStage;
    }

    public List<WorkflowActions> getActions() {
        return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class).getWorkflowActions(id, "TimeLogs");
    }

	public Integer getMonth() {
		return month;
	}

	public void setMonth(Integer month) {
		this.month = month;
	}

	public Integer getWeekNo() {
		return weekNo;
	}

	public void setWeekNo(Integer weekNo) {
		this.weekNo = weekNo;
	}

	public Employee getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(Employee employeeId) {
		this.employeeId = employeeId;
	}

	public TimeSheet getTimesheetFk() {
		return timesheetFk;
	}

	public void setTimesheetFk(TimeSheet timesheetFk) {
		this.timesheetFk = timesheetFk;
	}

	public Clients getClientFk() {
		return clientFk;
	}

	public void setClientFk(Clients clientFk) {
		this.clientFk = clientFk;
	}

	public String getTaskName() {
		return taskName;
	}

	public void setTaskName(String taskName) {
		this.taskName = taskName;
	}

	public Integer getYear() {
		return year;
	}

	public void setYear(Integer year) {
		this.year = year;
	}

	public Integer getTotalMinutes() {
		return totalMinutes;
	}

	public void setTotalMinutes(Integer totalMinutes) {
		this.totalMinutes = totalMinutes;
	}

	public Integer getSunday() {
		return sunday;
	}

	public void setSunday(Integer sunday) {
		this.sunday = sunday;
	}

	public Integer getMonday() {
		return monday;
	}

	public void setMonday(Integer monday) {
		this.monday = monday;
	}

	public Integer getTuesday() {
		return tuesday;
	}

	public void setTuesday(Integer tuesday) {
		this.tuesday = tuesday;
	}

	public Integer getWednesday() {
		return wednesday;
	}

	public void setWednesday(Integer wednesday) {
		this.wednesday = wednesday;
	}

	public Integer getThursday() {
		return thursday;
	}

	public void setThursday(Integer thursday) {
		this.thursday = thursday;
	}

	public Integer getFriday() {
		return friday;
	}

	public void setFriday(Integer friday) {
		this.friday = friday;
	}

	public Integer getSaturday() {
		return saturday;
	}

	public void setSaturday(Integer saturday) {
		this.saturday = saturday;
	}

	@Override
	public String toString() {
		return "TimeLogs [billableStatus=" + billableStatus + ", description=" + description + ", fromTime=" + fromTime
				+ ", totalMinutes=" + totalMinutes + ", id=" + id + ", jobs=" + jobs + ", projects=" + projects
				+ ", toTime=" + toTime + ", userName=" + userName + ", workItem=" + workItem + ", workspaceId="
				+ workspaceId + ", month=" + month + ", weekNo=" + weekNo + ", employeeId=" + employeeId
				+ ", timesheetFk=" + timesheetFk + ", clientFk=" + clientFk + ", sunday=" + sunday + ", monday="
				+ monday + ", tuesday=" + tuesday + ", wednesday=" + wednesday + ", thursday=" + thursday + ", friday="
				+ friday + ", saturday=" + saturday + ", taskName=" + taskName + ", year=" + year
				+ ", processInstanceId=" + processInstanceId + ", workflowStage=" + workflowStage + "]";
	}
	
	

	
	
	

	
    
    
    
}

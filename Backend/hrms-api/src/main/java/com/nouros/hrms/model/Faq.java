package com.nouros.hrms.model;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "FAQ")
@Filters(value = { @Filter(name = "faqDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "faqDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "faqDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "faqDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "faqIdGtFilter", condition = "ID > :id"), @Filter(name = "faqIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "faqIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "faqIdLtFilter", condition = "ID < :id"), @Filter(name = "faqIdEqFilter", condition = "ID = :id"), @Filter(name = "faqIdNEqFilter", condition = "ID != :id"), @Filter(name = "faqIdInFilter", condition = "ID in (:id)"), @Filter(name = "faqIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "faqIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "faqIdEqFilter", condition = "ID = :id"), @Filter(name = "faqQuestionNInFilter", condition = "QUESTION not in (:question)"), @Filter(name = "faqQuestionEqFilter", condition = "QUESTION = :question"), @Filter(name = "faqQuestionNEqFilter", condition = "QUESTION != :question"), @Filter(name = "faqQuestionInFilter", condition = "QUESTION in (:question)"), @Filter(name = "faqTagsNInFilter", condition = "TAGS not in (:tags)"), @Filter(name = "faqTagsEqFilter", condition = "TAGS = :tags"), @Filter(name = "faqTagsNEqFilter", condition = "TAGS != :tags"), @Filter(name = "faqTagsInFilter", condition = "TAGS in (:tags)"), @Filter(name = "faqWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "faqWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "faqWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "faqWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "faqWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "faqWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "faqWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "faqWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "faqWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "faqWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "faqDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "faqDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "faqDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "faqDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "faqIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "faqIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "faqIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "faqIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "faqIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "faqIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "faqIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "faqIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "faqIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "faqQuestionNInFilter", parameters = { @ParamDef(name = "question", type = String.class) }), @FilterDef(name = "faqQuestionEqFilter", parameters = { @ParamDef(name = "question", type = String.class) }), @FilterDef(name = "faqQuestionNEqFilter", parameters = { @ParamDef(name = "question", type = String.class) }), @FilterDef(name = "faqQuestionInFilter", parameters = { @ParamDef(name = "question", type = String.class) }), @FilterDef(name = "faqTagsNInFilter", parameters = { @ParamDef(name = "tags", type = String.class) }), @FilterDef(name = "faqTagsEqFilter", parameters = { @ParamDef(name = "tags", type = String.class) }), @FilterDef(name = "faqTagsNEqFilter", parameters = { @ParamDef(name = "tags", type = String.class) }), @FilterDef(name = "faqTagsInFilter", parameters = { @ParamDef(name = "tags", type = String.class) }), @FilterDef(name = "faqWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "faqWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "faqWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "faqWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "faqWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "faqWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "faqWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "faqWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "faqWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Faq extends BaseEntitySaaS{

    @Basic
    @Column(columnDefinition = "LONGTEXT")
    private String description;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 255)
    @Basic
    private String question;

    @Basic
    @Column(name = "TAGS",  columnDefinition = "ENUM", length = 9)
    private String tags;
    
    @Size(max = 100)
    @Basic
    @Column(name="CATEGORY_NAME")
    private String categoryName;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public Faq() {
    }

    public Faq(Integer id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getQuestion() {
        return question;
    }

    public void setQuestion(String question) {
        this.question = question;
    }

    public String getTags() {
        return tags;
    }
  
    public String getCategoryName() {
		return categoryName;
	}

	public void setCategoryName(String categoryName) {
		this.categoryName = categoryName;
	}

	public void setTags(String tags) {
        this.tags = tags;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

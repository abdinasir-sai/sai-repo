package com.nouros.hrms.model;

import java.util.Date;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "HOLIDAY")
@Filters(value = { @Filter(name = "holidayApplicableForNInFilter", condition = "APPLICABLE_FOR not in (:applicableFor)"), @Filter(name = "holidayApplicableForEqFilter", condition = "APPLICABLE_FOR = :applicableFor"), @Filter(name = "holidayApplicableForNEqFilter", condition = "APPLICABLE_FOR != :applicableFor"), @Filter(name = "holidayApplicableForInFilter", condition = "APPLICABLE_FOR in (:applicableFor)"), @Filter(name = "holidayDateGtFilter", condition = "DATE > (SELECT DATE_FORMAT(:date, '%Y-%m-%d'))"), @Filter(name = "holidayDateLtFilter", condition = "DATE < (SELECT DATE_FORMAT(:date, '%Y-%m-%d'))"), @Filter(name = "holidayDateBwFilter", condition = "DATE >(SELECT DATE_FORMAT(:date_MIN, '%Y-%m-%d')) AND DATE <(SELECT DATE_FORMAT(:date_MAX, '%Y-%m-%d'))"), @Filter(name = "holidayDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "holidayDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "holidayDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "holidayDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "holidayIdGtFilter", condition = "ID > :id"), @Filter(name = "holidayIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "holidayIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "holidayIdLtFilter", condition = "ID < :id"), @Filter(name = "holidayIdEqFilter", condition = "ID = :id"), @Filter(name = "holidayIdNEqFilter", condition = "ID != :id"), @Filter(name = "holidayIdInFilter", condition = "ID in (:id)"), @Filter(name = "holidayIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "holidayIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "holidayIdEqFilter", condition = "ID = :id"), @Filter(name = "holidayNameNInFilter", condition = "NAME not in (:name)"), @Filter(name = "holidayNameEqFilter", condition = "NAME = :name"), @Filter(name = "holidayNameNEqFilter", condition = "NAME != :name"), @Filter(name = "holidayNameInFilter", condition = "NAME in (:name)"), @Filter(name = "holidayNotifyApplicableEmployeesEqFilter", condition = "NOTIFY_APPLICABLE_EMPLOYEES = :notifyApplicableEmployees"), @Filter(name = "holidayNotifyApplicableEmployeesNEqFilter", condition = "NOTIFY_APPLICABLE_EMPLOYEES != :notifyApplicableEmployees"), @Filter(name = "holidayReminderDaysNInFilter", condition = "REMINDER_DAYS not in (:reminderDays)"), @Filter(name = "holidayReminderDaysEqFilter", condition = "REMINDER_DAYS = :reminderDays"), @Filter(name = "holidayReminderDaysNEqFilter", condition = "REMINDER_DAYS != :reminderDays"), @Filter(name = "holidayReminderDaysInFilter", condition = "REMINDER_DAYS in (:reminderDays)"), @Filter(name = "holidayReprocessLeaveHolidayEqFilter", condition = "REPROCESS_LEAVE_HOLIDAY = :reprocessLeaveHoliday"), @Filter(name = "holidayReprocessLeaveHolidayNEqFilter", condition = "REPROCESS_LEAVE_HOLIDAY != :reprocessLeaveHoliday"), @Filter(name = "holidayRestrictedEqFilter", condition = "RESTRICTED = :restricted"), @Filter(name = "holidayRestrictedNEqFilter", condition = "RESTRICTED != :restricted"), @Filter(name = "holidayWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "holidayWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "holidayWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "holidayWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "holidayWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "holidayWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "holidayWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "holidayWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "holidayWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "holidayWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "holidayApplicableForNInFilter", parameters = { @ParamDef(name = "applicableFor", type = String.class) }), @FilterDef(name = "holidayApplicableForEqFilter", parameters = { @ParamDef(name = "applicableFor", type = String.class) }), @FilterDef(name = "holidayApplicableForNEqFilter", parameters = { @ParamDef(name = "applicableFor", type = String.class) }), @FilterDef(name = "holidayApplicableForInFilter", parameters = { @ParamDef(name = "applicableFor", type = String.class) }), @FilterDef(name = "holidayDateGtFilter", parameters = { @ParamDef(name = "date", type = String.class) }), @FilterDef(name = "holidayDateLtFilter", parameters = { @ParamDef(name = "date", type = String.class) }), @FilterDef(name = "holidayDateBwFilter", parameters = { @ParamDef(name = "date_MIN", type = String.class), @ParamDef(name = "date_MAX", type = String.class) }), @FilterDef(name = "holidayDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "holidayDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "holidayDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "holidayDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "holidayIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "holidayIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "holidayIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "holidayIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "holidayIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "holidayIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "holidayIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "holidayIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "holidayIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "holidayNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "holidayNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "holidayNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "holidayNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "holidayNotifyApplicableEmployeesEqFilter", parameters = { @ParamDef(name = "notifyApplicableEmployees", type = Boolean.class) }), @FilterDef(name = "holidayNotifyApplicableEmployeesNEqFilter", parameters = { @ParamDef(name = "notifyApplicableEmployees", type = Boolean.class) }), @FilterDef(name = "holidayReminderDaysNInFilter", parameters = { @ParamDef(name = "reminderDays", type = String.class) }), @FilterDef(name = "holidayReminderDaysEqFilter", parameters = { @ParamDef(name = "reminderDays", type = String.class) }), @FilterDef(name = "holidayReminderDaysNEqFilter", parameters = { @ParamDef(name = "reminderDays", type = String.class) }), @FilterDef(name = "holidayReminderDaysInFilter", parameters = { @ParamDef(name = "reminderDays", type = String.class) }), @FilterDef(name = "holidayReprocessLeaveHolidayEqFilter", parameters = { @ParamDef(name = "reprocessLeaveHoliday", type = Boolean.class) }), @FilterDef(name = "holidayReprocessLeaveHolidayNEqFilter", parameters = { @ParamDef(name = "reprocessLeaveHoliday", type = Boolean.class) }), @FilterDef(name = "holidayRestrictedEqFilter", parameters = { @ParamDef(name = "restricted", type = Boolean.class) }), @FilterDef(name = "holidayRestrictedNEqFilter", parameters = { @ParamDef(name = "restricted", type = Boolean.class) }), @FilterDef(name = "holidayWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "holidayWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "holidayWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "holidayWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "holidayWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "holidayWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "holidayWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "holidayWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "holidayWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Holiday extends BaseEntitySaaS{

    @Basic
    @Column(name = "APPLICABLE_FOR", columnDefinition = "ENUM", length = 21)
    private String applicableFor;

    @Basic
    @Column(length = 19)
    private Date date;

    @Size(max = 255)
    @Basic
    private String description;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 100)
    @Basic
    @Column(length = 100)
    private String name;

    @Basic
    @Column(name = "NOTIFY_APPLICABLE_EMPLOYEES")
    private Boolean notifyApplicableEmployees;

    @Basic
    @Column(name = "REMINDER_DAYS", columnDefinition = "ENUM", length = 6)
    private String reminderDays;

    @Basic
    @Column(name = "REPROCESS_LEAVE_HOLIDAY")
    private Boolean reprocessLeaveHoliday;

    @Basic
    private Boolean restricted;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public Holiday() {
    }

    public Holiday(Integer id) {
        this.id = id;
    }

    public String getApplicableFor() {
        return applicableFor;
    }

    public void setApplicableFor(String applicableFor) {
        this.applicableFor = applicableFor;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boolean isNotifyApplicableEmployees() {
        return notifyApplicableEmployees;
    }

    public void setNotifyApplicableEmployees(Boolean notifyApplicableEmployees) {
        this.notifyApplicableEmployees = notifyApplicableEmployees;
    }

    public String getReminderDays() {
        return reminderDays;
    }

    public void setReminderDays(String reminderDays) {
        this.reminderDays = reminderDays;
    }

    public Boolean isReprocessLeaveHoliday() {
        return reprocessLeaveHoliday;
    }

    public void setReprocessLeaveHoliday(Boolean reprocessLeaveHoliday) {
        this.reprocessLeaveHoliday = reprocessLeaveHoliday;
    }

    public Boolean isRestricted() {
        return restricted;
    }

    public void setRestricted(Boolean restricted) {
        this.restricted = restricted;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

package com.nouros.hrms.model;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "CITY")
@Filters(value = { @Filter(name = "cityDisplayNameNInFilter", condition = "DISPLAY_NAME not in (:displayName)"), @Filter(name = "cityDisplayNameEqFilter", condition = "DISPLAY_NAME = :displayName"), @Filter(name = "cityDisplayNameNEqFilter", condition = "DISPLAY_NAME != :displayName"), @Filter(name = "cityDisplayNameInFilter", condition = "DISPLAY_NAME in (:displayName)"), @Filter(name = "cityIdGtFilter", condition = "ID > :id"), @Filter(name = "cityIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "cityIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "cityIdLtFilter", condition = "ID < :id"), @Filter(name = "cityIdEqFilter", condition = "ID = :id"), @Filter(name = "cityIdNEqFilter", condition = "ID != :id"), @Filter(name = "cityIdInFilter", condition = "ID in (:id)"), @Filter(name = "cityIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "cityIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "cityIdEqFilter", condition = "ID = :id"), @Filter(name = "cityNameNInFilter", condition = "NAME not in (:name)"), @Filter(name = "cityNameEqFilter", condition = "NAME = :name"), @Filter(name = "cityNameNEqFilter", condition = "NAME != :name"), @Filter(name = "cityNameInFilter", condition = "NAME in (:name)"), @Filter(name = "cityStateIdGtFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.ID > :id)"), @Filter(name = "cityStateIdNInFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.ID not in (:id)"), @Filter(name = "cityStateIdLtEqFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.ID <= :id)"), @Filter(name = "cityStateIdLtFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.ID < :id)"), @Filter(name = "cityStateIdEqFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.ID = :id)"), @Filter(name = "cityStateIdNEqFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.ID != :id)"), @Filter(name = "cityStateIdInFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.ID in (:id)"), @Filter(name = "cityStateIdBwFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.ID > :id_MIN  AND STATE.ID < :id_MAX )"), @Filter(name = "cityStateIdGtEqFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.ID >= :id)"), @Filter(name = "cityStateNameNInFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.NAME not in (:name)"), @Filter(name = "cityStateNameEqFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.NAME = :name)"), @Filter(name = "cityStateNameNEqFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.NAME != :name)"), @Filter(name = "cityStateNameInFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.NAME in (:name)"), @Filter(name = "cityStateDisplayNameNInFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.DISPLAY_NAME not in (:displayName)"), @Filter(name = "cityStateDisplayNameEqFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.DISPLAY_NAME = :displayName)"), @Filter(name = "cityStateDisplayNameNEqFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.DISPLAY_NAME != :displayName)"), @Filter(name = "cityStateDisplayNameInFilter", condition = "STATE_ID in (select STATE.id from STATE where STATE.DISPLAY_NAME in (:displayName)"), @Filter(name = "cityWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "cityWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "cityWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "cityWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "cityWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "cityWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "cityWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "cityWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "cityWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "cityWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "cityDisplayNameNInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "cityDisplayNameEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "cityDisplayNameNEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "cityDisplayNameInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "cityIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "cityIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "cityNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "cityNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "cityNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "cityStateIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityStateIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityStateIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityStateIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityStateIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityStateIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityStateIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityStateIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "cityStateIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "cityStateNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "cityStateNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "cityStateNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "cityStateNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "cityStateDisplayNameNInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "cityStateDisplayNameEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "cityStateDisplayNameNEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "cityStateDisplayNameInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "cityWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "cityWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "cityWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "cityWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "cityWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "cityWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "cityWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "cityWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "cityWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class City extends BaseEntitySaaS{

    @Size(max = 50)
    @Size(max = 50)
    @Basic
    @Column(name = "DISPLAY_NAME", length = 50)
    private String displayName;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String name;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "STATE_ID", columnDefinition = "INT")
    private State state;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public City() {
    }

    public City(Integer id) {
        this.id = id;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public State getState() {
        return state;
    }

    public void setState(State state) {
        this.state = state;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

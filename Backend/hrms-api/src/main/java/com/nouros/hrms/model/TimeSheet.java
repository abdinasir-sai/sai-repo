package com.nouros.hrms.model;

import java.util.Date;
import java.util.List;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Audited
@Table(name = "TIME_SHEET")
//@Filters(value = { @Filter(name = "timeSheetApprovalStatusNInFilter", condition = "APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "timeSheetApprovalStatusEqFilter", condition = "APPROVAL_STATUS = :approvalStatus"), @Filter(name = "timeSheetApprovalStatusNEqFilter", condition = "APPROVAL_STATUS != :approvalStatus"), @Filter(name = "timeSheetApprovalStatusInFilter", condition = "APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "timeSheetApprovedBillableHoursGtFilter", condition = "APPROVED_BILLABLE_HOURS > :approvedBillableHours"), @Filter(name = "timeSheetApprovedBillableHoursNInFilter", condition = "APPROVED_BILLABLE_HOURS not in (:approvedBillableHours)"), @Filter(name = "timeSheetApprovedBillableHoursLtEqFilter", condition = "APPROVED_BILLABLE_HOURS <= :approvedBillableHours"), @Filter(name = "timeSheetApprovedBillableHoursLtFilter", condition = "APPROVED_BILLABLE_HOURS < :approvedBillableHours"), @Filter(name = "timeSheetApprovedBillableHoursEqFilter", condition = "APPROVED_BILLABLE_HOURS = :approvedBillableHours"), @Filter(name = "timeSheetApprovedBillableHoursNEqFilter", condition = "APPROVED_BILLABLE_HOURS != :approvedBillableHours"), @Filter(name = "timeSheetApprovedBillableHoursInFilter", condition = "APPROVED_BILLABLE_HOURS in (:approvedBillableHours)"), @Filter(name = "timeSheetApprovedBillableHoursBwFilter", condition = "APPROVED_BILLABLE_HOURS > :approvedBillableHours_MIN  AND APPROVED_BILLABLE_HOURS < :approvedBillableHours_MAX"), @Filter(name = "timeSheetApprovedBillableHoursGtEqFilter", condition = "APPROVED_BILLABLE_HOURS >= :approvedBillableHours"), @Filter(name = "timeSheetApprovedBillableHoursEqFilter", condition = "APPROVED_BILLABLE_HOURS = :approvedBillableHours"), @Filter(name = "timeSheetApprovedNonBillableHoursGtFilter", condition = "APPROVED_NON_BILLABLE_HOURS > :approvedNonBillableHours"), @Filter(name = "timeSheetApprovedNonBillableHoursNInFilter", condition = "APPROVED_NON_BILLABLE_HOURS not in (:approvedNonBillableHours)"), @Filter(name = "timeSheetApprovedNonBillableHoursLtEqFilter", condition = "APPROVED_NON_BILLABLE_HOURS <= :approvedNonBillableHours"), @Filter(name = "timeSheetApprovedNonBillableHoursLtFilter", condition = "APPROVED_NON_BILLABLE_HOURS < :approvedNonBillableHours"), @Filter(name = "timeSheetApprovedNonBillableHoursEqFilter", condition = "APPROVED_NON_BILLABLE_HOURS = :approvedNonBillableHours"), @Filter(name = "timeSheetApprovedNonBillableHoursNEqFilter", condition = "APPROVED_NON_BILLABLE_HOURS != :approvedNonBillableHours"), @Filter(name = "timeSheetApprovedNonBillableHoursInFilter", condition = "APPROVED_NON_BILLABLE_HOURS in (:approvedNonBillableHours)"), @Filter(name = "timeSheetApprovedNonBillableHoursBwFilter", condition = "APPROVED_NON_BILLABLE_HOURS > :approvedNonBillableHours_MIN  AND APPROVED_NON_BILLABLE_HOURS < :approvedNonBillableHours_MAX"), @Filter(name = "timeSheetApprovedNonBillableHoursGtEqFilter", condition = "APPROVED_NON_BILLABLE_HOURS >= :approvedNonBillableHours"), @Filter(name = "timeSheetApprovedNonBillableHoursEqFilter", condition = "APPROVED_NON_BILLABLE_HOURS = :approvedNonBillableHours"), @Filter(name = "timeSheetApprovedRatePerHourGtFilter", condition = "APPROVED_RATE_PER_HOUR > :approvedRatePerHour"), @Filter(name = "timeSheetApprovedRatePerHourNInFilter", condition = "APPROVED_RATE_PER_HOUR not in (:approvedRatePerHour)"), @Filter(name = "timeSheetApprovedRatePerHourLtEqFilter", condition = "APPROVED_RATE_PER_HOUR <= :approvedRatePerHour"), @Filter(name = "timeSheetApprovedRatePerHourLtFilter", condition = "APPROVED_RATE_PER_HOUR < :approvedRatePerHour"), @Filter(name = "timeSheetApprovedRatePerHourEqFilter", condition = "APPROVED_RATE_PER_HOUR = :approvedRatePerHour"), @Filter(name = "timeSheetApprovedRatePerHourNEqFilter", condition = "APPROVED_RATE_PER_HOUR != :approvedRatePerHour"), @Filter(name = "timeSheetApprovedRatePerHourInFilter", condition = "APPROVED_RATE_PER_HOUR in (:approvedRatePerHour)"), @Filter(name = "timeSheetApprovedRatePerHourBwFilter", condition = "APPROVED_RATE_PER_HOUR > :approvedRatePerHour_MIN  AND APPROVED_RATE_PER_HOUR < :approvedRatePerHour_MAX"), @Filter(name = "timeSheetApprovedRatePerHourGtEqFilter", condition = "APPROVED_RATE_PER_HOUR >= :approvedRatePerHour"), @Filter(name = "timeSheetApprovedRatePerHourEqFilter", condition = "APPROVED_RATE_PER_HOUR = :approvedRatePerHour"), @Filter(name = "timeSheetApprovedTotalAmountGtFilter", condition = "APPROVED_TOTAL_AMOUNT > :approvedTotalAmount"), @Filter(name = "timeSheetApprovedTotalAmountNInFilter", condition = "APPROVED_TOTAL_AMOUNT not in (:approvedTotalAmount)"), @Filter(name = "timeSheetApprovedTotalAmountLtEqFilter", condition = "APPROVED_TOTAL_AMOUNT <= :approvedTotalAmount"), @Filter(name = "timeSheetApprovedTotalAmountLtFilter", condition = "APPROVED_TOTAL_AMOUNT < :approvedTotalAmount"), @Filter(name = "timeSheetApprovedTotalAmountEqFilter", condition = "APPROVED_TOTAL_AMOUNT = :approvedTotalAmount"), @Filter(name = "timeSheetApprovedTotalAmountNEqFilter", condition = "APPROVED_TOTAL_AMOUNT != :approvedTotalAmount"), @Filter(name = "timeSheetApprovedTotalAmountInFilter", condition = "APPROVED_TOTAL_AMOUNT in (:approvedTotalAmount)"), @Filter(name = "timeSheetApprovedTotalAmountBwFilter", condition = "APPROVED_TOTAL_AMOUNT > :approvedTotalAmount_MIN  AND APPROVED_TOTAL_AMOUNT < :approvedTotalAmount_MAX"), @Filter(name = "timeSheetApprovedTotalAmountGtEqFilter", condition = "APPROVED_TOTAL_AMOUNT >= :approvedTotalAmount"), @Filter(name = "timeSheetApprovedTotalAmountEqFilter", condition = "APPROVED_TOTAL_AMOUNT = :approvedTotalAmount"), @Filter(name = "timeSheetApprovedTotalHoursGtFilter", condition = "APPROVED_TOTAL_HOURS > :approvedTotalHours"), @Filter(name = "timeSheetApprovedTotalHoursNInFilter", condition = "APPROVED_TOTAL_HOURS not in (:approvedTotalHours)"), @Filter(name = "timeSheetApprovedTotalHoursLtEqFilter", condition = "APPROVED_TOTAL_HOURS <= :approvedTotalHours"), @Filter(name = "timeSheetApprovedTotalHoursLtFilter", condition = "APPROVED_TOTAL_HOURS < :approvedTotalHours"), @Filter(name = "timeSheetApprovedTotalHoursEqFilter", condition = "APPROVED_TOTAL_HOURS = :approvedTotalHours"), @Filter(name = "timeSheetApprovedTotalHoursNEqFilter", condition = "APPROVED_TOTAL_HOURS != :approvedTotalHours"), @Filter(name = "timeSheetApprovedTotalHoursInFilter", condition = "APPROVED_TOTAL_HOURS in (:approvedTotalHours)"), @Filter(name = "timeSheetApprovedTotalHoursBwFilter", condition = "APPROVED_TOTAL_HOURS > :approvedTotalHours_MIN  AND APPROVED_TOTAL_HOURS < :approvedTotalHours_MAX"), @Filter(name = "timeSheetApprovedTotalHoursGtEqFilter", condition = "APPROVED_TOTAL_HOURS >= :approvedTotalHours"), @Filter(name = "timeSheetApprovedTotalHoursEqFilter", condition = "APPROVED_TOTAL_HOURS = :approvedTotalHours"), @Filter(name = "timeSheetCurrencyCodeNInFilter", condition = "CURRENCY_CODE not in (:currencyCode)"), @Filter(name = "timeSheetCurrencyCodeEqFilter", condition = "CURRENCY_CODE = :currencyCode"), @Filter(name = "timeSheetCurrencyCodeNEqFilter", condition = "CURRENCY_CODE != :currencyCode"), @Filter(name = "timeSheetCurrencyCodeInFilter", condition = "CURRENCY_CODE in (:currencyCode)"), @Filter(name = "timeSheetDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "timeSheetDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "timeSheetDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "timeSheetDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "timeSheetIdGtFilter", condition = "ID > :id"), @Filter(name = "timeSheetIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "timeSheetIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "timeSheetIdLtFilter", condition = "ID < :id"), @Filter(name = "timeSheetIdEqFilter", condition = "ID = :id"), @Filter(name = "timeSheetIdNEqFilter", condition = "ID != :id"), @Filter(name = "timeSheetIdInFilter", condition = "ID in (:id)"), @Filter(name = "timeSheetIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "timeSheetIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "timeSheetIdEqFilter", condition = "ID = :id"), @Filter(name = "timeSheetSubmittedBillableHoursGtFilter", condition = "SUBMITTED_BILLABLE_HOURS > :submittedBillableHours"), @Filter(name = "timeSheetSubmittedBillableHoursNInFilter", condition = "SUBMITTED_BILLABLE_HOURS not in (:submittedBillableHours)"), @Filter(name = "timeSheetSubmittedBillableHoursLtEqFilter", condition = "SUBMITTED_BILLABLE_HOURS <= :submittedBillableHours"), @Filter(name = "timeSheetSubmittedBillableHoursLtFilter", condition = "SUBMITTED_BILLABLE_HOURS < :submittedBillableHours"), @Filter(name = "timeSheetSubmittedBillableHoursEqFilter", condition = "SUBMITTED_BILLABLE_HOURS = :submittedBillableHours"), @Filter(name = "timeSheetSubmittedBillableHoursNEqFilter", condition = "SUBMITTED_BILLABLE_HOURS != :submittedBillableHours"), @Filter(name = "timeSheetSubmittedBillableHoursInFilter", condition = "SUBMITTED_BILLABLE_HOURS in (:submittedBillableHours)"), @Filter(name = "timeSheetSubmittedBillableHoursBwFilter", condition = "SUBMITTED_BILLABLE_HOURS > :submittedBillableHours_MIN  AND SUBMITTED_BILLABLE_HOURS < :submittedBillableHours_MAX"), @Filter(name = "timeSheetSubmittedBillableHoursGtEqFilter", condition = "SUBMITTED_BILLABLE_HOURS >= :submittedBillableHours"), @Filter(name = "timeSheetSubmittedBillableHoursEqFilter", condition = "SUBMITTED_BILLABLE_HOURS = :submittedBillableHours"), @Filter(name = "timeSheetSubmittedRatePerHourGtFilter", condition = "SUBMITTED_RATE_PER_HOUR > :submittedRatePerHour"), @Filter(name = "timeSheetSubmittedRatePerHourNInFilter", condition = "SUBMITTED_RATE_PER_HOUR not in (:submittedRatePerHour)"), @Filter(name = "timeSheetSubmittedRatePerHourLtEqFilter", condition = "SUBMITTED_RATE_PER_HOUR <= :submittedRatePerHour"), @Filter(name = "timeSheetSubmittedRatePerHourLtFilter", condition = "SUBMITTED_RATE_PER_HOUR < :submittedRatePerHour"), @Filter(name = "timeSheetSubmittedRatePerHourEqFilter", condition = "SUBMITTED_RATE_PER_HOUR = :submittedRatePerHour"), @Filter(name = "timeSheetSubmittedRatePerHourNEqFilter", condition = "SUBMITTED_RATE_PER_HOUR != :submittedRatePerHour"), @Filter(name = "timeSheetSubmittedRatePerHourInFilter", condition = "SUBMITTED_RATE_PER_HOUR in (:submittedRatePerHour)"), @Filter(name = "timeSheetSubmittedRatePerHourBwFilter", condition = "SUBMITTED_RATE_PER_HOUR > :submittedRatePerHour_MIN  AND SUBMITTED_RATE_PER_HOUR < :submittedRatePerHour_MAX"), @Filter(name = "timeSheetSubmittedRatePerHourGtEqFilter", condition = "SUBMITTED_RATE_PER_HOUR >= :submittedRatePerHour"), @Filter(name = "timeSheetSubmittedRatePerHourEqFilter", condition = "SUBMITTED_RATE_PER_HOUR = :submittedRatePerHour"), @Filter(name = "timeSheetSubmittedTotalAmountGtFilter", condition = "SUBMITTED_TOTAL_AMOUNT > :submittedTotalAmount"), @Filter(name = "timeSheetSubmittedTotalAmountNInFilter", condition = "SUBMITTED_TOTAL_AMOUNT not in (:submittedTotalAmount)"), @Filter(name = "timeSheetSubmittedTotalAmountLtEqFilter", condition = "SUBMITTED_TOTAL_AMOUNT <= :submittedTotalAmount"), @Filter(name = "timeSheetSubmittedTotalAmountLtFilter", condition = "SUBMITTED_TOTAL_AMOUNT < :submittedTotalAmount"), @Filter(name = "timeSheetSubmittedTotalAmountEqFilter", condition = "SUBMITTED_TOTAL_AMOUNT = :submittedTotalAmount"), @Filter(name = "timeSheetSubmittedTotalAmountNEqFilter", condition = "SUBMITTED_TOTAL_AMOUNT != :submittedTotalAmount"), @Filter(name = "timeSheetSubmittedTotalAmountInFilter", condition = "SUBMITTED_TOTAL_AMOUNT in (:submittedTotalAmount)"), @Filter(name = "timeSheetSubmittedTotalAmountBwFilter", condition = "SUBMITTED_TOTAL_AMOUNT > :submittedTotalAmount_MIN  AND SUBMITTED_TOTAL_AMOUNT < :submittedTotalAmount_MAX"), @Filter(name = "timeSheetSubmittedTotalAmountGtEqFilter", condition = "SUBMITTED_TOTAL_AMOUNT >= :submittedTotalAmount"), @Filter(name = "timeSheetSubmittedTotalAmountEqFilter", condition = "SUBMITTED_TOTAL_AMOUNT = :submittedTotalAmount"), @Filter(name = "timeSheetSubmittedTotalHoursGtFilter", condition = "SUBMITTED_TOTAL_HOURS > :submittedTotalHours"), @Filter(name = "timeSheetSubmittedTotalHoursNInFilter", condition = "SUBMITTED_TOTAL_HOURS not in (:submittedTotalHours)"), @Filter(name = "timeSheetSubmittedTotalHoursLtEqFilter", condition = "SUBMITTED_TOTAL_HOURS <= :submittedTotalHours"), @Filter(name = "timeSheetSubmittedTotalHoursLtFilter", condition = "SUBMITTED_TOTAL_HOURS < :submittedTotalHours"), @Filter(name = "timeSheetSubmittedTotalHoursEqFilter", condition = "SUBMITTED_TOTAL_HOURS = :submittedTotalHours"), @Filter(name = "timeSheetSubmittedTotalHoursNEqFilter", condition = "SUBMITTED_TOTAL_HOURS != :submittedTotalHours"), @Filter(name = "timeSheetSubmittedTotalHoursInFilter", condition = "SUBMITTED_TOTAL_HOURS in (:submittedTotalHours)"), @Filter(name = "timeSheetSubmittedTotalHoursBwFilter", condition = "SUBMITTED_TOTAL_HOURS > :submittedTotalHours_MIN  AND SUBMITTED_TOTAL_HOURS < :submittedTotalHours_MAX"), @Filter(name = "timeSheetSubmittedTotalHoursGtEqFilter", condition = "SUBMITTED_TOTAL_HOURS >= :submittedTotalHours"), @Filter(name = "timeSheetSubmittedTotalHoursEqFilter", condition = "SUBMITTED_TOTAL_HOURS = :submittedTotalHours"), @Filter(name = "timeSheetSubmittednOnBillableHoursGtFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS > :submittednOnBillableHours"), @Filter(name = "timeSheetSubmittednOnBillableHoursNInFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS not in (:submittednOnBillableHours)"), @Filter(name = "timeSheetSubmittednOnBillableHoursLtEqFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS <= :submittednOnBillableHours"), @Filter(name = "timeSheetSubmittednOnBillableHoursLtFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS < :submittednOnBillableHours"), @Filter(name = "timeSheetSubmittednOnBillableHoursEqFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS = :submittednOnBillableHours"), @Filter(name = "timeSheetSubmittednOnBillableHoursNEqFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS != :submittednOnBillableHours"), @Filter(name = "timeSheetSubmittednOnBillableHoursInFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS in (:submittednOnBillableHours)"), @Filter(name = "timeSheetSubmittednOnBillableHoursBwFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS > :submittednOnBillableHours_MIN  AND SUBMITTEDN_ON_BILLABLE_HOURS < :submittednOnBillableHours_MAX"), @Filter(name = "timeSheetSubmittednOnBillableHoursGtEqFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS >= :submittednOnBillableHours"), @Filter(name = "timeSheetSubmittednOnBillableHoursEqFilter", condition = "SUBMITTEDN_ON_BILLABLE_HOURS = :submittednOnBillableHours"), @Filter(name = "timeSheetTimesheetNameNInFilter", condition = "TIMESHEET_NAME not in (:timesheetName)"), @Filter(name = "timeSheetTimesheetNameEqFilter", condition = "TIMESHEET_NAME = :timesheetName"), @Filter(name = "timeSheetTimesheetNameNEqFilter", condition = "TIMESHEET_NAME != :timesheetName"), @Filter(name = "timeSheetTimesheetNameInFilter", condition = "TIMESHEET_NAME in (:timesheetName)"), @Filter(name = "timeSheetWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "timeSheetWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "timeSheetWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "timeSheetWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "timeSheetWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "timeSheetWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "timeSheetWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "timeSheetWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "timeSheetWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "timeSheetWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
//@FilterDefs(value = { @FilterDef(name = "timeSheetApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeSheetApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeSheetApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeSheetApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "timeSheetApprovedBillableHoursGtFilter", parameters = { @ParamDef(name = "approvedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedBillableHoursNInFilter", parameters = { @ParamDef(name = "approvedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedBillableHoursLtEqFilter", parameters = { @ParamDef(name = "approvedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedBillableHoursLtFilter", parameters = { @ParamDef(name = "approvedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedBillableHoursEqFilter", parameters = { @ParamDef(name = "approvedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedBillableHoursNEqFilter", parameters = { @ParamDef(name = "approvedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedBillableHoursInFilter", parameters = { @ParamDef(name = "approvedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedBillableHoursBwFilter", parameters = { @ParamDef(name = "approvedBillableHours_MIN", type = Double.class), @ParamDef(name = "approvedBillableHours_MAX", type = Double.class) }), @FilterDef(name = "timeSheetApprovedBillableHoursGtEqFilter", parameters = { @ParamDef(name = "approvedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedNonBillableHoursGtFilter", parameters = { @ParamDef(name = "approvedNonBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedNonBillableHoursNInFilter", parameters = { @ParamDef(name = "approvedNonBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedNonBillableHoursLtEqFilter", parameters = { @ParamDef(name = "approvedNonBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedNonBillableHoursLtFilter", parameters = { @ParamDef(name = "approvedNonBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedNonBillableHoursEqFilter", parameters = { @ParamDef(name = "approvedNonBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedNonBillableHoursNEqFilter", parameters = { @ParamDef(name = "approvedNonBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedNonBillableHoursInFilter", parameters = { @ParamDef(name = "approvedNonBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedNonBillableHoursBwFilter", parameters = { @ParamDef(name = "approvedNonBillableHours_MIN", type = Double.class), @ParamDef(name = "approvedNonBillableHours_MAX", type = Double.class) }), @FilterDef(name = "timeSheetApprovedNonBillableHoursGtEqFilter", parameters = { @ParamDef(name = "approvedNonBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedRatePerHourGtFilter", parameters = { @ParamDef(name = "approvedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetApprovedRatePerHourNInFilter", parameters = { @ParamDef(name = "approvedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetApprovedRatePerHourLtEqFilter", parameters = { @ParamDef(name = "approvedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetApprovedRatePerHourLtFilter", parameters = { @ParamDef(name = "approvedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetApprovedRatePerHourEqFilter", parameters = { @ParamDef(name = "approvedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetApprovedRatePerHourNEqFilter", parameters = { @ParamDef(name = "approvedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetApprovedRatePerHourInFilter", parameters = { @ParamDef(name = "approvedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetApprovedRatePerHourBwFilter", parameters = { @ParamDef(name = "approvedRatePerHour_MIN", type = Double.class), @ParamDef(name = "approvedRatePerHour_MAX", type = Double.class) }), @FilterDef(name = "timeSheetApprovedRatePerHourGtEqFilter", parameters = { @ParamDef(name = "approvedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalAmountGtFilter", parameters = { @ParamDef(name = "approvedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalAmountNInFilter", parameters = { @ParamDef(name = "approvedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalAmountLtEqFilter", parameters = { @ParamDef(name = "approvedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalAmountLtFilter", parameters = { @ParamDef(name = "approvedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalAmountEqFilter", parameters = { @ParamDef(name = "approvedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalAmountNEqFilter", parameters = { @ParamDef(name = "approvedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalAmountInFilter", parameters = { @ParamDef(name = "approvedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalAmountBwFilter", parameters = { @ParamDef(name = "approvedTotalAmount_MIN", type = Double.class), @ParamDef(name = "approvedTotalAmount_MAX", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalAmountGtEqFilter", parameters = { @ParamDef(name = "approvedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalHoursGtFilter", parameters = { @ParamDef(name = "approvedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalHoursNInFilter", parameters = { @ParamDef(name = "approvedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalHoursLtEqFilter", parameters = { @ParamDef(name = "approvedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalHoursLtFilter", parameters = { @ParamDef(name = "approvedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalHoursEqFilter", parameters = { @ParamDef(name = "approvedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalHoursNEqFilter", parameters = { @ParamDef(name = "approvedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalHoursInFilter", parameters = { @ParamDef(name = "approvedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalHoursBwFilter", parameters = { @ParamDef(name = "approvedTotalHours_MIN", type = Double.class), @ParamDef(name = "approvedTotalHours_MAX", type = Double.class) }), @FilterDef(name = "timeSheetApprovedTotalHoursGtEqFilter", parameters = { @ParamDef(name = "approvedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetCurrencyCodeNInFilter", parameters = { @ParamDef(name = "currencyCode", type = String.class) }), @FilterDef(name = "timeSheetCurrencyCodeEqFilter", parameters = { @ParamDef(name = "currencyCode", type = String.class) }), @FilterDef(name = "timeSheetCurrencyCodeNEqFilter", parameters = { @ParamDef(name = "currencyCode", type = String.class) }), @FilterDef(name = "timeSheetCurrencyCodeInFilter", parameters = { @ParamDef(name = "currencyCode", type = String.class) }), @FilterDef(name = "timeSheetDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeSheetDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeSheetDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeSheetDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "timeSheetIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeSheetIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeSheetIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeSheetIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeSheetIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeSheetIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeSheetIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeSheetIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "timeSheetIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "timeSheetSubmittedBillableHoursGtFilter", parameters = { @ParamDef(name = "submittedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedBillableHoursNInFilter", parameters = { @ParamDef(name = "submittedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedBillableHoursLtEqFilter", parameters = { @ParamDef(name = "submittedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedBillableHoursLtFilter", parameters = { @ParamDef(name = "submittedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedBillableHoursEqFilter", parameters = { @ParamDef(name = "submittedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedBillableHoursNEqFilter", parameters = { @ParamDef(name = "submittedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedBillableHoursInFilter", parameters = { @ParamDef(name = "submittedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedBillableHoursBwFilter", parameters = { @ParamDef(name = "submittedBillableHours_MIN", type = Double.class), @ParamDef(name = "submittedBillableHours_MAX", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedBillableHoursGtEqFilter", parameters = { @ParamDef(name = "submittedBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedRatePerHourGtFilter", parameters = { @ParamDef(name = "submittedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedRatePerHourNInFilter", parameters = { @ParamDef(name = "submittedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedRatePerHourLtEqFilter", parameters = { @ParamDef(name = "submittedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedRatePerHourLtFilter", parameters = { @ParamDef(name = "submittedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedRatePerHourEqFilter", parameters = { @ParamDef(name = "submittedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedRatePerHourNEqFilter", parameters = { @ParamDef(name = "submittedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedRatePerHourInFilter", parameters = { @ParamDef(name = "submittedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedRatePerHourBwFilter", parameters = { @ParamDef(name = "submittedRatePerHour_MIN", type = Double.class), @ParamDef(name = "submittedRatePerHour_MAX", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedRatePerHourGtEqFilter", parameters = { @ParamDef(name = "submittedRatePerHour", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalAmountGtFilter", parameters = { @ParamDef(name = "submittedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalAmountNInFilter", parameters = { @ParamDef(name = "submittedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalAmountLtEqFilter", parameters = { @ParamDef(name = "submittedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalAmountLtFilter", parameters = { @ParamDef(name = "submittedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalAmountEqFilter", parameters = { @ParamDef(name = "submittedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalAmountNEqFilter", parameters = { @ParamDef(name = "submittedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalAmountInFilter", parameters = { @ParamDef(name = "submittedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalAmountBwFilter", parameters = { @ParamDef(name = "submittedTotalAmount_MIN", type = Double.class), @ParamDef(name = "submittedTotalAmount_MAX", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalAmountGtEqFilter", parameters = { @ParamDef(name = "submittedTotalAmount", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalHoursGtFilter", parameters = { @ParamDef(name = "submittedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalHoursNInFilter", parameters = { @ParamDef(name = "submittedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalHoursLtEqFilter", parameters = { @ParamDef(name = "submittedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalHoursLtFilter", parameters = { @ParamDef(name = "submittedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalHoursEqFilter", parameters = { @ParamDef(name = "submittedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalHoursNEqFilter", parameters = { @ParamDef(name = "submittedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalHoursInFilter", parameters = { @ParamDef(name = "submittedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalHoursBwFilter", parameters = { @ParamDef(name = "submittedTotalHours_MIN", type = Double.class), @ParamDef(name = "submittedTotalHours_MAX", type = Double.class) }), @FilterDef(name = "timeSheetSubmittedTotalHoursGtEqFilter", parameters = { @ParamDef(name = "submittedTotalHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittednOnBillableHoursGtFilter", parameters = { @ParamDef(name = "submittednOnBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittednOnBillableHoursNInFilter", parameters = { @ParamDef(name = "submittednOnBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittednOnBillableHoursLtEqFilter", parameters = { @ParamDef(name = "submittednOnBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittednOnBillableHoursLtFilter", parameters = { @ParamDef(name = "submittednOnBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittednOnBillableHoursEqFilter", parameters = { @ParamDef(name = "submittednOnBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittednOnBillableHoursNEqFilter", parameters = { @ParamDef(name = "submittednOnBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittednOnBillableHoursInFilter", parameters = { @ParamDef(name = "submittednOnBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetSubmittednOnBillableHoursBwFilter", parameters = { @ParamDef(name = "submittednOnBillableHours_MIN", type = Double.class), @ParamDef(name = "submittednOnBillableHours_MAX", type = Double.class) }), @FilterDef(name = "timeSheetSubmittednOnBillableHoursGtEqFilter", parameters = { @ParamDef(name = "submittednOnBillableHours", type = Double.class) }), @FilterDef(name = "timeSheetTimesheetNameNInFilter", parameters = { @ParamDef(name = "timesheetName", type = String.class) }), @FilterDef(name = "timeSheetTimesheetNameEqFilter", parameters = { @ParamDef(name = "timesheetName", type = String.class) }), @FilterDef(name = "timeSheetTimesheetNameNEqFilter", parameters = { @ParamDef(name = "timesheetName", type = String.class) }), @FilterDef(name = "timeSheetTimesheetNameInFilter", parameters = { @ParamDef(name = "timesheetName", type = String.class) }), @FilterDef(name = "timeSheetWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeSheetWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeSheetWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeSheetWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeSheetWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeSheetWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeSheetWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "timeSheetWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "timeSheetWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
@JsonFilter("propertyFilter")
@Filters(value = { @Filter(name = "timeSheetEmployeeIdInFilter",condition = "EMPLOYEE_ID IN (select e.ID FROM EMPLOYEE e WHERE e.REPORTING_MANAGER_USERID_FK = (:id) OR e.USERID_PK = (:id)) "),
@Filter(name = "timeSheetEmployeeDepartmentInFilter", condition = "EMPLOYEE_ID IN ( SELECT e.ID FROM EMPLOYEE e where e.DEPARTMENT_ID IN (SELECT d.ID FROM DEPARTMENT d WHERE d.NAME IN (:department)))")})
@FilterDefs(value = { @FilterDef(name = "timeSheetEmployeeIdInFilter", parameters = {@ParamDef(name = "id", type = Integer.class)}),
@FilterDef(name = "timeSheetEmployeeDepartmentInFilter", parameters = @ParamDef(name = "department", type = String.class))})
public class TimeSheet extends BaseEntitySaaS {

    @Basic
    @Column(name = "APPROVAL_STATUS", columnDefinition = "ENUM", length = 12)
    private String approvalStatus;

    @Basic
    @Column(name = "APPROVED_BILLABLE_HOURS")
    private Double approvedBillableHours;

    @Basic
    @Column(name = "APPROVED_NON_BILLABLE_HOURS")
    private Double approvedNonBillableHours;

    
    @Basic
    @Column(name = "APPROVED_TOTAL_HOURS")
    private Double approvedTotalHours;

    @Size(max = 50)
    @Basic
    @Column(name = "CURRENCY_CODE", length = 50)
    private String currencyCode;
    
    @Size(max = 50)
    @Basic
    @Column(name = "YEAR", length = 50)
    private String year;
    
    
    @Basic
    @Column(columnDefinition = "INT",name = "MONTH")
    private Integer month;

    @Basic
    @Column(columnDefinition = "LONGTEXT")
    private String description;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(name = "SUBMITTED_BILLABLE_HOURS")
    private Double submittedBillableHours;

    
    @Basic
    @Column(name = "SUBMITTED_TOTAL_MINUTES",columnDefinition = "INT")
    private Integer submittedTotalMinutes;
    
    @Basic
    @Column(name = "SUBMITTED_TOTAL_HOURS",columnDefinition = "DOUBLE")
    private Double submittedTotalHours;

    @Basic
    @Column(name = "SUBMITTEDN_ON_BILLABLE_HOURS")
    private Double submittednOnBillableHours;
    
    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "EMPLOYEE_ID", columnDefinition = "INT")
    //private Employee employeeId;  to Solve AOA
    private Employee employee;
    
    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "REPORTING_MANAGER_ID", columnDefinition = "INT")
    private Employee reportingManagerId;
    
    @Basic
    @Column(name = "WEEK_NUMBER", columnDefinition = "INT")
    private Integer weekNumber;
    
    @Column(name = "PROCESS_INSTANCE_ID")
    private String processInstanceId;

    @Column(name = "WORKFLOW_STAGE")
    private String workflowStage;
        
	@Basic
    @Column(name = "PERIOD", columnDefinition = "ENUM", length = 5)
    private String period;
    
    @Basic
    @Column(name = "BILLABLE_STATUS", columnDefinition = "ENUM", length = 2)
    private String billableStatus;
    
    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;
    
    @Basic
    @Column(name = "WEEK_START_DATE", length = 19)
    private Date weekStartDate;
    
    @Basic
    @Column(name = "WEEK_END_DATE", length = 19)
    private Date weekEndDate;
    
    
    public String getProcessInstanceId() {
        return processInstanceId;
    }

    public void setProcessInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
    }

    public String getWorkflowStage() {
        return workflowStage;
    }

    public void setWorkflowStage(String workflowStage) {
        this.workflowStage = workflowStage;
    }

    public List<WorkflowActions> getActions() {
        return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class).getWorkflowActions(id, "TimeSheet");
    }

    public TimeSheet() {
    }
    
    public Employee getReportingManagerId() {
		return reportingManagerId;
	}

	public void setReportingManagerId(Employee reportingManagerId) {
		this.reportingManagerId = reportingManagerId;
	}

	public Integer getWeekNumber() {
		return weekNumber;
	}

	public void setWeekNumber(Integer weekNumber) {
		this.weekNumber = weekNumber;
	}

    public TimeSheet(Integer id) {
        this.id = id;
    }

    public String getApprovalStatus() {
        return approvalStatus;
    }
    
    public Date getWeekStartDate() {
		return weekStartDate;
	}

	public void setWeekStartDate(Date weekStartDate) {
		this.weekStartDate = weekStartDate;
	}

	public Date getWeekEndDate() {
		return weekEndDate;
	}

	public void setWeekEndDate(Date weekEndDate) {
		this.weekEndDate = weekEndDate;
	}

	public void setApprovalStatus(String approvalStatus) {
        this.approvalStatus = approvalStatus;
    }

    public Double getApprovedBillableHours() {
        return approvedBillableHours;
    }

    public void setApprovedBillableHours(Double approvedBillableHours) {
        this.approvedBillableHours = approvedBillableHours;
    }

    public Double getApprovedNonBillableHours() {
        return approvedNonBillableHours;
    }

    public void setApprovedNonBillableHours(Double approvedNonBillableHours) {
        this.approvedNonBillableHours = approvedNonBillableHours;
    }

    public Double getApprovedTotalHours() {
        return approvedTotalHours;
    }

    public void setApprovedTotalHours(Double approvedTotalHours) {
        this.approvedTotalHours = approvedTotalHours;
    }

    public String getCurrencyCode() {
        return currencyCode;
    }

    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getId() {
        return id;
    }
    
   
    public String getYear() {
		return year;
	}

	public void setYear(String year) {
		this.year = year;
	}

	public Integer getMonth() {
		return month;
	}

	public void setMonth(Integer month) {
		this.month = month;
	}

	public void setId(Integer id) {
        this.id = id;
    }

    public Double getSubmittedBillableHours() {
        return submittedBillableHours;
    }

    public void setSubmittedBillableHours(Double submittedBillableHours) {
        this.submittedBillableHours = submittedBillableHours;
    }

   
	public Integer getSubmittedTotalMinutes() {
		return submittedTotalMinutes;
	}

	public void setSubmittedTotalMinutes(Integer submittedTotalMinutes) {
		this.submittedTotalMinutes = submittedTotalMinutes;
	}

	public Double getSubmittednOnBillableHours() {
        return submittednOnBillableHours;
    }

    public void setSubmittednOnBillableHours(Double submittednOnBillableHours) {
        this.submittednOnBillableHours = submittednOnBillableHours;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	public String getPeriod() {
		return period;
	}

	public void setPeriod(String period) {
		this.period = period;
	}

	public String getBillableStatus() {
		return billableStatus;
	}

	public void setBillableStatus(String billableStatus) {
		this.billableStatus = billableStatus;
	}

	public Double getSubmittedTotalHours() {
		return submittedTotalHours;
	}

	public void setSubmittedTotalHours(Double submittedTotalHours) {
		this.submittedTotalHours = submittedTotalHours;
	}

	
	
	
}

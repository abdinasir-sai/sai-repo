package com.nouros.hrms.model;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "EMPLOYEE_SKILL_MAPPING")
@Filters(value = { @Filter(name = "employeeSkillMappingEmployeeIdGtFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id)"), @Filter(name = "employeeSkillMappingEmployeeIdNInFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID not in (:id)"), @Filter(name = "employeeSkillMappingEmployeeIdLtEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID <= :id)"), @Filter(name = "employeeSkillMappingEmployeeIdLtFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID < :id)"), @Filter(name = "employeeSkillMappingEmployeeIdEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID = :id)"), @Filter(name = "employeeSkillMappingEmployeeIdNEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID != :id)"), @Filter(name = "employeeSkillMappingEmployeeIdInFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID in (:id)"), @Filter(name = "employeeSkillMappingEmployeeIdBwFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID > :id_MIN  AND EMPLOYEE.ID < :id_MAX )"), @Filter(name = "employeeSkillMappingEmployeeIdGtEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.ID >= :id)"), @Filter(name = "employeeSkillMappingEmployeeName2NInFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 not in (:name2)"), @Filter(name = "employeeSkillMappingEmployeeName2EqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 = :name2)"), @Filter(name = "employeeSkillMappingEmployeeName2NEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 != :name2)"), @Filter(name = "employeeSkillMappingEmployeeName2InFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME2 in (:name2)"), @Filter(name = "employeeSkillMappingEmployeeName1NInFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 not in (:name1)"), @Filter(name = "employeeSkillMappingEmployeeName1EqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 = :name1)"), @Filter(name = "employeeSkillMappingEmployeeName1NEqFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 != :name1)"), @Filter(name = "employeeSkillMappingEmployeeName1InFilter", condition = "EMPLOYEE_ID in (select EMPLOYEE.id from EMPLOYEE where EMPLOYEE.NAME1 in (:name1)"), @Filter(name = "employeeSkillMappingEmployee2IdGtFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.ID > :id)"), @Filter(name = "employeeSkillMappingEmployee2IdNInFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.ID not in (:id)"), @Filter(name = "employeeSkillMappingEmployee2IdLtEqFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.ID <= :id)"), @Filter(name = "employeeSkillMappingEmployee2IdLtFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.ID < :id)"), @Filter(name = "employeeSkillMappingEmployee2IdEqFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.ID = :id)"), @Filter(name = "employeeSkillMappingEmployee2IdNEqFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.ID != :id)"), @Filter(name = "employeeSkillMappingEmployee2IdInFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.ID in (:id)"), @Filter(name = "employeeSkillMappingEmployee2IdBwFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.ID > :id_MIN  AND EMPLOYEE2.ID < :id_MAX )"), @Filter(name = "employeeSkillMappingEmployee2IdGtEqFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.ID >= :id)"), @Filter(name = "employeeSkillMappingEmployee2Name2NInFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.NAME2 not in (:name2)"), @Filter(name = "employeeSkillMappingEmployee2Name2EqFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.NAME2 = :name2)"), @Filter(name = "employeeSkillMappingEmployee2Name2NEqFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.NAME2 != :name2)"), @Filter(name = "employeeSkillMappingEmployee2Name2InFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.NAME2 in (:name2)"), @Filter(name = "employeeSkillMappingEmployee2Name1NInFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.NAME1 not in (:name1)"), @Filter(name = "employeeSkillMappingEmployee2Name1EqFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.NAME1 = :name1)"), @Filter(name = "employeeSkillMappingEmployee2Name1NEqFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.NAME1 != :name1)"), @Filter(name = "employeeSkillMappingEmployee2Name1InFilter", condition = "REVIEWER_ID in (select EMPLOYEE2.id from EMPLOYEE2 where EMPLOYEE2.NAME1 in (:name1)"), @Filter(name = "employeeSkillMappingIdGtFilter", condition = "ID > :id"), @Filter(name = "employeeSkillMappingIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "employeeSkillMappingIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "employeeSkillMappingIdLtFilter", condition = "ID < :id"), @Filter(name = "employeeSkillMappingIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeSkillMappingIdNEqFilter", condition = "ID != :id"), @Filter(name = "employeeSkillMappingIdInFilter", condition = "ID in (:id)"), @Filter(name = "employeeSkillMappingIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "employeeSkillMappingIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "employeeSkillMappingIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeSkillMappingSkillIdGtFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.ID > :id)"), @Filter(name = "employeeSkillMappingSkillIdNInFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.ID not in (:id)"), @Filter(name = "employeeSkillMappingSkillIdLtEqFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.ID <= :id)"), @Filter(name = "employeeSkillMappingSkillIdLtFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.ID < :id)"), @Filter(name = "employeeSkillMappingSkillIdEqFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.ID = :id)"), @Filter(name = "employeeSkillMappingSkillIdNEqFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.ID != :id)"), @Filter(name = "employeeSkillMappingSkillIdInFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.ID in (:id)"), @Filter(name = "employeeSkillMappingSkillIdBwFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.ID > :id_MIN  AND SKILL.ID < :id_MAX )"), @Filter(name = "employeeSkillMappingSkillIdGtEqFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.ID >= :id)"), @Filter(name = "employeeSkillMappingSkillName2NInFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.NAME2 not in (:name2)"), @Filter(name = "employeeSkillMappingSkillName2EqFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.NAME2 = :name2)"), @Filter(name = "employeeSkillMappingSkillName2NEqFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.NAME2 != :name2)"), @Filter(name = "employeeSkillMappingSkillName2InFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.NAME2 in (:name2)"), @Filter(name = "employeeSkillMappingSkillName1NInFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.NAME1 not in (:name1)"), @Filter(name = "employeeSkillMappingSkillName1EqFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.NAME1 = :name1)"), @Filter(name = "employeeSkillMappingSkillName1NEqFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.NAME1 != :name1)"), @Filter(name = "employeeSkillMappingSkillName1InFilter", condition = "SKILL_ID in (select SKILL.id from SKILL where SKILL.NAME1 in (:name1)"), @Filter(name = "employeeSkillMappingText1NInFilter", condition = "TEXT1 not in (:text1)"), @Filter(name = "employeeSkillMappingText1EqFilter", condition = "TEXT1 = :text1"), @Filter(name = "employeeSkillMappingText1NEqFilter", condition = "TEXT1 != :text1"), @Filter(name = "employeeSkillMappingText1InFilter", condition = "TEXT1 in (:text1)"), @Filter(name = "employeeSkillMappingWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "employeeSkillMappingWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "employeeSkillMappingWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "employeeSkillMappingWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "employeeSkillMappingWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "employeeSkillMappingWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "employeeSkillMappingWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "employeeSkillMappingWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "employeeSkillMappingWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "employeeSkillMappingWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "employeeSkillMappingEmployeeIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployeeIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployeeIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployeeIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployeeIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployeeIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployeeIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployeeIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployeeIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployeeName2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployeeName2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployeeName2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployeeName2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployeeName1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployeeName1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployeeName1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployeeName1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployee2IdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployee2IdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployee2IdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployee2IdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployee2IdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployee2IdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployee2IdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployee2IdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployee2IdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingEmployee2Name2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployee2Name2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployee2Name2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployee2Name2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployee2Name1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployee2Name1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployee2Name1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingEmployee2Name1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingSkillName2NInFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingSkillName2EqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingSkillName2NEqFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingSkillName2InFilter", parameters = { @ParamDef(name = "name2", type = String.class) }), @FilterDef(name = "employeeSkillMappingSkillName1NInFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingSkillName1EqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingSkillName1NEqFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingSkillName1InFilter", parameters = { @ParamDef(name = "name1", type = String.class) }), @FilterDef(name = "employeeSkillMappingText1NInFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeSkillMappingText1EqFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeSkillMappingText1NEqFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeSkillMappingText1InFilter", parameters = { @ParamDef(name = "text1", type = String.class) }), @FilterDef(name = "employeeSkillMappingWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "employeeSkillMappingWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class EmployeeSkillMapping extends BaseEntitySaaS{

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "EMPLOYEE_ID", columnDefinition = "INT")
    private Employee employee;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "REVIEWER_ID", columnDefinition = "INT")
    private Employee employee2;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "PERFORMANCE_SKILLS_ID", columnDefinition = "INT")
    private PerformanceSkills performanceSkills;

    @Size(max = 255)
    @Basic
    private String text1;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public EmployeeSkillMapping() {
    }

    public EmployeeSkillMapping(Integer id) {
        this.id = id;
    }

    public Employee getEmployee() {
        return employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    public Employee getEmployee2() {
        return employee2;
    }

    public void setEmployee2(Employee employee2) {
        this.employee2 = employee2;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public PerformanceSkills getPerformanceSkills() {
		return performanceSkills;
	}

	public void setPerformanceSkills(PerformanceSkills performanceSkills) {
		this.performanceSkills = performanceSkills;
	}

	public String getText1() {
        return text1;
    }

    public void setText1(String text1) {
        this.text1 = text1;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

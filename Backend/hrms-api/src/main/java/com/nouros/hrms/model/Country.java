package com.nouros.hrms.model;

import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "COUNTRY")
@Filters(value = { @Filter(name = "countryCountryCodeNInFilter", condition = "COUNTRY_CODE not in (:countryCode)"), @Filter(name = "countryCountryCodeEqFilter", condition = "COUNTRY_CODE = :countryCode"), @Filter(name = "countryCountryCodeNEqFilter", condition = "COUNTRY_CODE != :countryCode"), @Filter(name = "countryCountryCodeInFilter", condition = "COUNTRY_CODE in (:countryCode)"), @Filter(name = "countryDisplayNameNInFilter", condition = "DISPLAY_NAME not in (:displayName)"), @Filter(name = "countryDisplayNameEqFilter", condition = "DISPLAY_NAME = :displayName"), @Filter(name = "countryDisplayNameNEqFilter", condition = "DISPLAY_NAME != :displayName"), @Filter(name = "countryDisplayNameInFilter", condition = "DISPLAY_NAME in (:displayName)"), @Filter(name = "countryIdGtFilter", condition = "ID > :id"), @Filter(name = "countryIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "countryIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "countryIdLtFilter", condition = "ID < :id"), @Filter(name = "countryIdEqFilter", condition = "ID = :id"), @Filter(name = "countryIdNEqFilter", condition = "ID != :id"), @Filter(name = "countryIdInFilter", condition = "ID in (:id)"), @Filter(name = "countryIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "countryIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "countryIdEqFilter", condition = "ID = :id"), @Filter(name = "countryNameNInFilter", condition = "NAME not in (:name)"), @Filter(name = "countryNameEqFilter", condition = "NAME = :name"), @Filter(name = "countryNameNEqFilter", condition = "NAME != :name"), @Filter(name = "countryNameInFilter", condition = "NAME in (:name)"), @Filter(name = "countryWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "countryWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "countryWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "countryWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "countryWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "countryWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "countryWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "countryWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "countryWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "countryWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "countryCountryCodeNInFilter", parameters = { @ParamDef(name = "countryCode", type = String.class) }), @FilterDef(name = "countryCountryCodeEqFilter", parameters = { @ParamDef(name = "countryCode", type = String.class) }), @FilterDef(name = "countryCountryCodeNEqFilter", parameters = { @ParamDef(name = "countryCode", type = String.class) }), @FilterDef(name = "countryCountryCodeInFilter", parameters = { @ParamDef(name = "countryCode", type = String.class) }), @FilterDef(name = "countryDisplayNameNInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "countryDisplayNameEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "countryDisplayNameNEqFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "countryDisplayNameInFilter", parameters = { @ParamDef(name = "displayName", type = String.class) }), @FilterDef(name = "countryIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "countryIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "countryIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "countryIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "countryIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "countryIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "countryIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "countryIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "countryIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "countryNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "countryNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "countryNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "countryNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "countryWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "countryWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "countryWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "countryWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "countryWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "countryWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "countryWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "countryWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "countryWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Country extends BaseEntitySaaS{

    @Size(max = 50)
    @Basic
    @Column(name = "COUNTRY_CODE", length = 50)
    private String countryCode;

    @Size(max = 50)
    @Size(max = 50)
    @Basic
    @Column(name = "DISPLAY_NAME", length = 50)
    private String displayName;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String name;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.State.class, mappedBy = "country", cascade = CascadeType.MERGE)
    private Set<State> states = new HashSet<>();

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public Country() {
    }

    public Country(Integer id) {
        this.id = id;
    }

    public String getCountryCode() {
        return countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Set<State> getStates() {
        return states;
    }

    public void setStates(Set<State> states) {
        this.states = states;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

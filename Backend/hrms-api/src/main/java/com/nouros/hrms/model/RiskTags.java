package com.nouros.hrms.model;

import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "RISK_TAGS")
@Filters(value = { @Filter(name = "riskTagsIdGtFilter", condition = "ID > :id"), @Filter(name = "riskTagsIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "riskTagsIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "riskTagsIdLtFilter", condition = "ID < :id"), @Filter(name = "riskTagsIdEqFilter", condition = "ID = :id"), @Filter(name = "riskTagsIdNEqFilter", condition = "ID != :id"), @Filter(name = "riskTagsIdInFilter", condition = "ID in (:id)"), @Filter(name = "riskTagsIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "riskTagsIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "riskTagsIdEqFilter", condition = "ID = :id"), @Filter(name = "riskTagsTagNameNInFilter", condition = "TAG_NAME not in (:tagName)"), @Filter(name = "riskTagsTagNameEqFilter", condition = "TAG_NAME = :tagName"), @Filter(name = "riskTagsTagNameNEqFilter", condition = "TAG_NAME != :tagName"), @Filter(name = "riskTagsTagNameInFilter", condition = "TAG_NAME in (:tagName)") })
@FilterDefs(value = { @FilterDef(name = "riskTagsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "riskTagsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "riskTagsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "riskTagsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "riskTagsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "riskTagsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "riskTagsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "riskTagsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "riskTagsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "riskTagsTagNameNInFilter", parameters = { @ParamDef(name = "tagName", type = String.class) }), @FilterDef(name = "riskTagsTagNameEqFilter", parameters = { @ParamDef(name = "tagName", type = String.class) }), @FilterDef(name = "riskTagsTagNameNEqFilter", parameters = { @ParamDef(name = "tagName", type = String.class) }), @FilterDef(name = "riskTagsTagNameInFilter", parameters = { @ParamDef(name = "tagName", type = String.class) }) })
public class RiskTags extends BaseEntitySaaS{

    @Basic
    private boolean deleted;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.RiskTagsMapping.class, mappedBy = "riskTags", cascade = CascadeType.MERGE)
    private Set<RiskTagsMapping> riskTagsMappings = new HashSet<>();

    @Size(max = 50)
    @Basic
    @Column(name = "TAG_NAME", nullable = false, length = 50)
    private String tagName;

    public RiskTags() {
    }

    public RiskTags(Integer id) {
        this.id = id;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Set<RiskTagsMapping> getRiskTagsMappings() {
        return riskTagsMappings;
    }

    public void setRiskTagsMappings(Set<RiskTagsMapping> riskTagsMappings) {
        this.riskTagsMappings = riskTagsMappings;
    }

    public String getTagName() {
        return tagName;
    }

    public void setTagName(String tagName) {
        this.tagName = tagName;
    }
}

package com.nouros.hrms.model;

import java.util.List;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "CLIENTS")
@Filters(value = { @Filter(name = "clientsApprovalStatusNInFilter", condition = "APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "clientsApprovalStatusEqFilter", condition = "APPROVAL_STATUS = :approvalStatus"), @Filter(name = "clientsApprovalStatusNEqFilter", condition = "APPROVAL_STATUS != :approvalStatus"), @Filter(name = "clientsApprovalStatusInFilter", condition = "APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "clientsBillingMethodNInFilter", condition = "BILLING_METHOD not in (:billingMethod)"), @Filter(name = "clientsBillingMethodEqFilter", condition = "BILLING_METHOD = :billingMethod"), @Filter(name = "clientsBillingMethodNEqFilter", condition = "BILLING_METHOD != :billingMethod"), @Filter(name = "clientsBillingMethodInFilter", condition = "BILLING_METHOD in (:billingMethod)"), @Filter(name = "clientsCityNInFilter", condition = "CITY not in (:city)"), @Filter(name = "clientsCityEqFilter", condition = "CITY = :city"), @Filter(name = "clientsCityNEqFilter", condition = "CITY != :city"), @Filter(name = "clientsCityInFilter", condition = "CITY in (:city)"), @Filter(name = "clientsClientNameNInFilter", condition = "CLIENT_NAME not in (:clientName)"), @Filter(name = "clientsClientNameEqFilter", condition = "CLIENT_NAME = :clientName"), @Filter(name = "clientsClientNameNEqFilter", condition = "CLIENT_NAME != :clientName"), @Filter(name = "clientsClientNameInFilter", condition = "CLIENT_NAME in (:clientName)"), @Filter(name = "clientsCompanySizeGtFilter", condition = "COMPANY_SIZE > :companySize"), @Filter(name = "clientsCompanySizeNInFilter", condition = "COMPANY_SIZE not in (:companySize)"), @Filter(name = "clientsCompanySizeLtEqFilter", condition = "COMPANY_SIZE <= :companySize"), @Filter(name = "clientsCompanySizeLtFilter", condition = "COMPANY_SIZE < :companySize"), @Filter(name = "clientsCompanySizeEqFilter", condition = "COMPANY_SIZE = :companySize"), @Filter(name = "clientsCompanySizeNEqFilter", condition = "COMPANY_SIZE != :companySize"), @Filter(name = "clientsCompanySizeInFilter", condition = "COMPANY_SIZE in (:companySize)"), @Filter(name = "clientsCompanySizeBwFilter", condition = "COMPANY_SIZE > :companySize_MIN  AND COMPANY_SIZE < :companySize_MAX"), @Filter(name = "clientsCompanySizeGtEqFilter", condition = "COMPANY_SIZE >= :companySize"), @Filter(name = "clientsCompanySizeEqFilter", condition = "COMPANY_SIZE = :companySize"), @Filter(name = "clientsCountryNInFilter", condition = "COUNTRY not in (:country)"), @Filter(name = "clientsCountryEqFilter", condition = "COUNTRY = :country"), @Filter(name = "clientsCountryNEqFilter", condition = "COUNTRY != :country"), @Filter(name = "clientsCountryInFilter", condition = "COUNTRY in (:country)"), @Filter(name = "clientsCurrencyNInFilter", condition = "CURRENCY not in (:currency)"), @Filter(name = "clientsCurrencyEqFilter", condition = "CURRENCY = :currency"), @Filter(name = "clientsCurrencyNEqFilter", condition = "CURRENCY != :currency"), @Filter(name = "clientsCurrencyInFilter", condition = "CURRENCY in (:currency)"), @Filter(name = "clientsDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "clientsDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "clientsDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "clientsDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "clientsEmailIdNInFilter", condition = "EMAIL_ID not in (:emailId)"), @Filter(name = "clientsEmailIdEqFilter", condition = "EMAIL_ID = :emailId"), @Filter(name = "clientsEmailIdNEqFilter", condition = "EMAIL_ID != :emailId"), @Filter(name = "clientsEmailIdInFilter", condition = "EMAIL_ID in (:emailId)"), @Filter(name = "clientsFaxNInFilter", condition = "FAX not in (:fax)"), @Filter(name = "clientsFaxEqFilter", condition = "FAX = :fax"), @Filter(name = "clientsFaxNEqFilter", condition = "FAX != :fax"), @Filter(name = "clientsFaxInFilter", condition = "FAX in (:fax)"), @Filter(name = "clientsFirstNameNInFilter", condition = "FIRST_NAME not in (:firstName)"), @Filter(name = "clientsFirstNameEqFilter", condition = "FIRST_NAME = :firstName"), @Filter(name = "clientsFirstNameNEqFilter", condition = "FIRST_NAME != :firstName"), @Filter(name = "clientsFirstNameInFilter", condition = "FIRST_NAME in (:firstName)"), @Filter(name = "clientsIdGtFilter", condition = "ID > :id"), @Filter(name = "clientsIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "clientsIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "clientsIdLtFilter", condition = "ID < :id"), @Filter(name = "clientsIdEqFilter", condition = "ID = :id"), @Filter(name = "clientsIdNEqFilter", condition = "ID != :id"), @Filter(name = "clientsIdInFilter", condition = "ID in (:id)"), @Filter(name = "clientsIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "clientsIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "clientsIdEqFilter", condition = "ID = :id"), @Filter(name = "clientsIndustryNInFilter", condition = "INDUSTRY not in (:industry)"), @Filter(name = "clientsIndustryEqFilter", condition = "INDUSTRY = :industry"), @Filter(name = "clientsIndustryNEqFilter", condition = "INDUSTRY != :industry"), @Filter(name = "clientsIndustryInFilter", condition = "INDUSTRY in (:industry)"), @Filter(name = "clientsLastNameNInFilter", condition = "LAST_NAME not in (:lastName)"), @Filter(name = "clientsLastNameEqFilter", condition = "LAST_NAME = :lastName"), @Filter(name = "clientsLastNameNEqFilter", condition = "LAST_NAME != :lastName"), @Filter(name = "clientsLastNameInFilter", condition = "LAST_NAME in (:lastName)"), @Filter(name = "clientsMobileNInFilter", condition = "MOBILE not in (:mobile)"), @Filter(name = "clientsMobileEqFilter", condition = "MOBILE = :mobile"), @Filter(name = "clientsMobileNEqFilter", condition = "MOBILE != :mobile"), @Filter(name = "clientsMobileInFilter", condition = "MOBILE in (:mobile)"), @Filter(name = "clientsPhoneNInFilter", condition = "PHONE not in (:phone)"), @Filter(name = "clientsPhoneEqFilter", condition = "PHONE = :phone"), @Filter(name = "clientsPhoneNEqFilter", condition = "PHONE != :phone"), @Filter(name = "clientsPhoneInFilter", condition = "PHONE in (:phone)"), @Filter(name = "clientsStateProvinceNInFilter", condition = "STATE_PROVINCE not in (:stateProvince)"), @Filter(name = "clientsStateProvinceEqFilter", condition = "STATE_PROVINCE = :stateProvince"), @Filter(name = "clientsStateProvinceNEqFilter", condition = "STATE_PROVINCE != :stateProvince"), @Filter(name = "clientsStateProvinceInFilter", condition = "STATE_PROVINCE in (:stateProvince)"), @Filter(name = "clientsStreetAddressNInFilter", condition = "STREET_ADDRESS not in (:streetAddress)"), @Filter(name = "clientsStreetAddressEqFilter", condition = "STREET_ADDRESS = :streetAddress"), @Filter(name = "clientsStreetAddressNEqFilter", condition = "STREET_ADDRESS != :streetAddress"), @Filter(name = "clientsStreetAddressInFilter", condition = "STREET_ADDRESS in (:streetAddress)"), @Filter(name = "clientsWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "clientsWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "clientsWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "clientsWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "clientsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "clientsWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "clientsWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "clientsWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "clientsWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "clientsWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "clientsZipcodeGtFilter", condition = "ZIPCODE > :zipcode"), @Filter(name = "clientsZipcodeNInFilter", condition = "ZIPCODE not in (:zipcode)"), @Filter(name = "clientsZipcodeLtEqFilter", condition = "ZIPCODE <= :zipcode"), @Filter(name = "clientsZipcodeLtFilter", condition = "ZIPCODE < :zipcode"), @Filter(name = "clientsZipcodeEqFilter", condition = "ZIPCODE = :zipcode"), @Filter(name = "clientsZipcodeNEqFilter", condition = "ZIPCODE != :zipcode"), @Filter(name = "clientsZipcodeInFilter", condition = "ZIPCODE in (:zipcode)"), @Filter(name = "clientsZipcodeBwFilter", condition = "ZIPCODE > :zipcode_MIN  AND ZIPCODE < :zipcode_MAX"), @Filter(name = "clientsZipcodeGtEqFilter", condition = "ZIPCODE >= :zipcode"), @Filter(name = "clientsZipcodeEqFilter", condition = "ZIPCODE = :zipcode"), @Filter(name = "clientsProcessInstanceIdNInFilter", condition = "PROCESS_INSTANCE_ID not in (:processInstanceId)"), @Filter(name = "clientsProcessInstanceIdEqFilter", condition = "PROCESS_INSTANCE_ID = :processInstanceId"), @Filter(name = "clientsProcessInstanceIdNEqFilter", condition = "PROCESS_INSTANCE_ID != :processInstanceId"), @Filter(name = "clientsProcessInstanceIdInFilter", condition = "PROCESS_INSTANCE_ID in (:processInstanceId)"), @Filter(name = "clientsWorkflowStageNInFilter", condition = "WORKFLOW_STAGE not in (:workflowStage)"), @Filter(name = "clientsWorkflowStageEqFilter", condition = "WORKFLOW_STAGE = :workflowStage"), @Filter(name = "clientsWorkflowStageNEqFilter", condition = "WORKFLOW_STAGE != :workflowStage"), @Filter(name = "clientsWorkflowStageInFilter", condition = "WORKFLOW_STAGE in (:workflowStage)"), @Filter(name = "clientsAssignedToMeFilterAll", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in(:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName or WORKFLOW_ACTION.ROLE_NAME =:roleName)"), @Filter(name = "clientsAssignedToMeFilterAgUn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"), @Filter(name = "clientsAssignedToMeFilterAgRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName)  or WORKFLOW_ACTION.ROLE_NAME =:roleName)"), @Filter(name = "clientsAssignedToMeFilterUnRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME in (:assigneeGroupName) or  WORKFLOW_ACTION.ROLE_NAME =:roleName)"), @Filter(name = "clientsAssignedToMeFilterAg", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName))"), @Filter(name = "clientsAssignedToMeFilterAu", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"), @Filter(name = "clientsAssignedToMeFilterRn", condition = "ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ROLE_NAME =:roleName)") })
@FilterDefs(value = { @FilterDef(name = "clientsAssignedToMeFilterAll", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class), @ParamDef(name = "assigneeUserName", type = String.class), @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "clientsAssignedToMeFilterAgUn", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class), @ParamDef(name = "assigneeUserName", type = String.class) }), @FilterDef(name = "clientsAssignedToMeFilterAgRn", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class), @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "clientsAssignedToMeFilterUnRn", parameters = { @ParamDef(name = "assigneeUserName", type = String.class), @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "clientsAssignedToMeFilterAg", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class) }), @FilterDef(name = "clientsAssignedToMeFilterAu", parameters = { @ParamDef(name = "assigneeUserName", type = String.class) }), @FilterDef(name = "clientsAssignedToMeFilterRn", parameters = { @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "clientsApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "clientsApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "clientsApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "clientsApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "clientsBillingMethodNInFilter", parameters = { @ParamDef(name = "billingMethod", type = String.class) }), @FilterDef(name = "clientsBillingMethodEqFilter", parameters = { @ParamDef(name = "billingMethod", type = String.class) }), @FilterDef(name = "clientsBillingMethodNEqFilter", parameters = { @ParamDef(name = "billingMethod", type = String.class) }), @FilterDef(name = "clientsBillingMethodInFilter", parameters = { @ParamDef(name = "billingMethod", type = String.class) }), @FilterDef(name = "clientsCityNInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "clientsCityEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "clientsCityNEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "clientsCityInFilter", parameters = { @ParamDef(name = "city", type = String.class) }), @FilterDef(name = "clientsClientNameNInFilter", parameters = { @ParamDef(name = "clientName", type = String.class) }), @FilterDef(name = "clientsClientNameEqFilter", parameters = { @ParamDef(name = "clientName", type = String.class) }), @FilterDef(name = "clientsClientNameNEqFilter", parameters = { @ParamDef(name = "clientName", type = String.class) }), @FilterDef(name = "clientsClientNameInFilter", parameters = { @ParamDef(name = "clientName", type = String.class) }), @FilterDef(name = "clientsCompanySizeGtFilter", parameters = { @ParamDef(name = "companySize", type = Integer.class) }), @FilterDef(name = "clientsCompanySizeNInFilter", parameters = { @ParamDef(name = "companySize", type = Integer.class) }), @FilterDef(name = "clientsCompanySizeLtEqFilter", parameters = { @ParamDef(name = "companySize", type = Integer.class) }), @FilterDef(name = "clientsCompanySizeLtFilter", parameters = { @ParamDef(name = "companySize", type = Integer.class) }), @FilterDef(name = "clientsCompanySizeEqFilter", parameters = { @ParamDef(name = "companySize", type = Integer.class) }), @FilterDef(name = "clientsCompanySizeNEqFilter", parameters = { @ParamDef(name = "companySize", type = Integer.class) }), @FilterDef(name = "clientsCompanySizeInFilter", parameters = { @ParamDef(name = "companySize", type = Integer.class) }), @FilterDef(name = "clientsCompanySizeBwFilter", parameters = { @ParamDef(name = "companySize_MIN", type = Integer.class), @ParamDef(name = "companySize_MAX", type = Integer.class) }), @FilterDef(name = "clientsCompanySizeGtEqFilter", parameters = { @ParamDef(name = "companySize", type = Integer.class) }), @FilterDef(name = "clientsCountryNInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "clientsCountryEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "clientsCountryNEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "clientsCountryInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "clientsCurrencyNInFilter", parameters = { @ParamDef(name = "currency", type = String.class) }), @FilterDef(name = "clientsCurrencyEqFilter", parameters = { @ParamDef(name = "currency", type = String.class) }), @FilterDef(name = "clientsCurrencyNEqFilter", parameters = { @ParamDef(name = "currency", type = String.class) }), @FilterDef(name = "clientsCurrencyInFilter", parameters = { @ParamDef(name = "currency", type = String.class) }), @FilterDef(name = "clientsDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "clientsDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "clientsDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "clientsDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "clientsEmailIdNInFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "clientsEmailIdEqFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "clientsEmailIdNEqFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "clientsEmailIdInFilter", parameters = { @ParamDef(name = "emailId", type = String.class) }), @FilterDef(name = "clientsFaxNInFilter", parameters = { @ParamDef(name = "fax", type = String.class) }), @FilterDef(name = "clientsFaxEqFilter", parameters = { @ParamDef(name = "fax", type = String.class) }), @FilterDef(name = "clientsFaxNEqFilter", parameters = { @ParamDef(name = "fax", type = String.class) }), @FilterDef(name = "clientsFaxInFilter", parameters = { @ParamDef(name = "fax", type = String.class) }), @FilterDef(name = "clientsFirstNameNInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "clientsFirstNameEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "clientsFirstNameNEqFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "clientsFirstNameInFilter", parameters = { @ParamDef(name = "firstName", type = String.class) }), @FilterDef(name = "clientsIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "clientsIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "clientsIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "clientsIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "clientsIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "clientsIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "clientsIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "clientsIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "clientsIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "clientsIndustryNInFilter", parameters = { @ParamDef(name = "industry", type = String.class) }), @FilterDef(name = "clientsIndustryEqFilter", parameters = { @ParamDef(name = "industry", type = String.class) }), @FilterDef(name = "clientsIndustryNEqFilter", parameters = { @ParamDef(name = "industry", type = String.class) }), @FilterDef(name = "clientsIndustryInFilter", parameters = { @ParamDef(name = "industry", type = String.class) }), @FilterDef(name = "clientsLastNameNInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "clientsLastNameEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "clientsLastNameNEqFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "clientsLastNameInFilter", parameters = { @ParamDef(name = "lastName", type = String.class) }), @FilterDef(name = "clientsMobileNInFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }), @FilterDef(name = "clientsMobileEqFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }), @FilterDef(name = "clientsMobileNEqFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }), @FilterDef(name = "clientsMobileInFilter", parameters = { @ParamDef(name = "mobile", type = String.class) }), @FilterDef(name = "clientsPhoneNInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "clientsPhoneEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "clientsPhoneNEqFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "clientsPhoneInFilter", parameters = { @ParamDef(name = "phone", type = String.class) }), @FilterDef(name = "clientsStateProvinceNInFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "clientsStateProvinceEqFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "clientsStateProvinceNEqFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "clientsStateProvinceInFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "clientsStreetAddressNInFilter", parameters = { @ParamDef(name = "streetAddress", type = String.class) }), @FilterDef(name = "clientsStreetAddressEqFilter", parameters = { @ParamDef(name = "streetAddress", type = String.class) }), @FilterDef(name = "clientsStreetAddressNEqFilter", parameters = { @ParamDef(name = "streetAddress", type = String.class) }), @FilterDef(name = "clientsStreetAddressInFilter", parameters = { @ParamDef(name = "streetAddress", type = String.class) }), @FilterDef(name = "clientsWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "clientsWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "clientsWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "clientsWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "clientsWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "clientsWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "clientsWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "clientsWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "clientsWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "clientsZipcodeGtFilter", parameters = { @ParamDef(name = "zipcode", type = Integer.class) }), @FilterDef(name = "clientsZipcodeNInFilter", parameters = { @ParamDef(name = "zipcode", type = Integer.class) }), @FilterDef(name = "clientsZipcodeLtEqFilter", parameters = { @ParamDef(name = "zipcode", type = Integer.class) }), @FilterDef(name = "clientsZipcodeLtFilter", parameters = { @ParamDef(name = "zipcode", type = Integer.class) }), @FilterDef(name = "clientsZipcodeEqFilter", parameters = { @ParamDef(name = "zipcode", type = Integer.class) }), @FilterDef(name = "clientsZipcodeNEqFilter", parameters = { @ParamDef(name = "zipcode", type = Integer.class) }), @FilterDef(name = "clientsZipcodeInFilter", parameters = { @ParamDef(name = "zipcode", type = Integer.class) }), @FilterDef(name = "clientsZipcodeBwFilter", parameters = { @ParamDef(name = "zipcode_MIN", type = Integer.class), @ParamDef(name = "zipcode_MAX", type = Integer.class) }), @FilterDef(name = "clientsZipcodeGtEqFilter", parameters = { @ParamDef(name = "zipcode", type = Integer.class) }), @FilterDef(name = "clientsProcessInstanceIdNInFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "clientsProcessInstanceIdEqFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "clientsProcessInstanceIdNEqFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "clientsProcessInstanceIdInFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "clientsWorkflowStageNInFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }), @FilterDef(name = "clientsWorkflowStageEqFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }), @FilterDef(name = "clientsWorkflowStageNEqFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }), @FilterDef(name = "clientsWorkflowStageInFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }) })
public class Clients extends BaseEntitySaaS{

    @Basic
    @Column(name = "APPROVAL_STATUS", columnDefinition = "ENUM", length = 12)
    private String approvalStatus;

    @Basic
    @Column(name = "BILLING_METHOD",  columnDefinition = "ENUM", length = 4)
    private String billingMethod;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String city;

    @Size(max = 50)
    @Basic
    @Column(name = "CLIENT_NAME", length = 50)
    private String clientName;

    @Basic
    @Column(name = "COMPANY_SIZE", columnDefinition = "INT")
    private Integer companySize;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String country;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String currency;

    @Basic
    @Column(columnDefinition = "LONGTEXT")
    private String description;

    @Size(max = 100)
    @Basic
    @Column(name = "EMAIL_ID", length = 100 , unique = true)
    private String emailId;

    @Size(max = 20)
    @Basic
    @Column(length = 20)
    private String fax;

    @Size(max = 100)
    @Basic
    @Column(name = "FIRST_NAME", length = 100)
    private String firstName;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 100)
    @Basic
    @Column(length = 100)
    private String industry;

    @Size(max = 50)
    @Basic
    @Column(name = "LAST_NAME", length = 50)
    private String lastName;

    @Size(max = 20)
    @Basic
    @Column(length = 20)
    private String mobile;

    @Size(max = 20)
    @Basic
    @Column(length = 20)
    private String phone;

    @Size(max = 50)
    @Basic
    @Column(name = "STATE_PROVINCE", length = 50)
    private String stateProvince;

    @Size(max = 100)
    @Basic
    @Column(name = "STREET_ADDRESS", length = 100)
    private String streetAddress;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    @Basic
    @Column(columnDefinition = "INT")
    private Integer zipcode;

    public Clients() {
    }

    public Clients(Integer id) {
        this.id = id;
    }

    public String getApprovalStatus() {
        return approvalStatus;
    }

    public void setApprovalStatus(String approvalStatus) {
        this.approvalStatus = approvalStatus;
    }

    public String getBillingMethod() {
        return billingMethod;
    }

    public void setBillingMethod(String billingMethod) {
        this.billingMethod = billingMethod;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getClientName() {
        return clientName;
    }

    public void setClientName(String clientName) {
        this.clientName = clientName;
    }

    public Integer getCompanySize() {
        return companySize;
    }

    public void setCompanySize(Integer companySize) {
        this.companySize = companySize;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getEmailId() {
        return emailId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public String getFax() {
        return fax;
    }

    public void setFax(String fax) {
        this.fax = fax;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getIndustry() {
        return industry;
    }

    public void setIndustry(String industry) {
        this.industry = industry;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getMobile() {
        return mobile;
    }

    public void setMobile(String mobile) {
        this.mobile = mobile;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getStateProvince() {
        return stateProvince;
    }

    public void setStateProvince(String stateProvince) {
        this.stateProvince = stateProvince;
    }

    public String getStreetAddress() {
        return streetAddress;
    }

    public void setStreetAddress(String streetAddress) {
        this.streetAddress = streetAddress;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }

    public Integer getZipcode() {
        return zipcode;
    }

    public void setZipcode(Integer zipcode) {
        this.zipcode = zipcode;
    }

    @Column(name = "PROCESS_INSTANCE_ID")
    private String processInstanceId;

    @Column(name = "WORKFLOW_STAGE")
    private String workflowStage;

    public String getProcessInstanceId() {
        return processInstanceId;
    }

    public void setProcessInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
    }

    public String getWorkflowStage() {
        return workflowStage;
    }

    public void setWorkflowStage(String workflowStage) {
        this.workflowStage = workflowStage;
    }

    public List<WorkflowActions> getActions() {
        return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class).getWorkflowActions(id, "Clients");
    }
}

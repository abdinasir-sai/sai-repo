package com.nouros.hrms.model;

import java.util.Date;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "COMPENSATORY_REQUEST_SCHEDULER")
@Filters(value = { @Filter(name = "compensatoryRequestSchedulerAttendanceDetailsNInFilter", condition = "ATTENDANCE_DETAILS not in (:attendanceDetails)"), @Filter(name = "compensatoryRequestSchedulerAttendanceDetailsEqFilter", condition = "ATTENDANCE_DETAILS = :attendanceDetails"), @Filter(name = "compensatoryRequestSchedulerAttendanceDetailsNEqFilter", condition = "ATTENDANCE_DETAILS != :attendanceDetails"), @Filter(name = "compensatoryRequestSchedulerAttendanceDetailsInFilter", condition = "ATTENDANCE_DETAILS in (:attendanceDetails)"), @Filter(name = "compensatoryRequestSchedulerDurationNInFilter", condition = "DURATION not in (:duration)"), @Filter(name = "compensatoryRequestSchedulerDurationEqFilter", condition = "DURATION = :duration"), @Filter(name = "compensatoryRequestSchedulerDurationNEqFilter", condition = "DURATION != :duration"), @Filter(name = "compensatoryRequestSchedulerDurationInFilter", condition = "DURATION in (:duration)"), @Filter(name = "compensatoryRequestSchedulerEmployeeNameNInFilter", condition = "EMPLOYEE_NAME not in (:employeeName)"), @Filter(name = "compensatoryRequestSchedulerEmployeeNameEqFilter", condition = "EMPLOYEE_NAME = :employeeName"), @Filter(name = "compensatoryRequestSchedulerEmployeeNameNEqFilter", condition = "EMPLOYEE_NAME != :employeeName"), @Filter(name = "compensatoryRequestSchedulerEmployeeNameInFilter", condition = "EMPLOYEE_NAME in (:employeeName)"), @Filter(name = "compensatoryRequestSchedulerExpiryDateGtFilter", condition = "EXPIRY_DATE > (SELECT DATE_FORMAT(:expiryDate, '%Y-%m-%d'))"), @Filter(name = "compensatoryRequestSchedulerExpiryDateLtFilter", condition = "EXPIRY_DATE < (SELECT DATE_FORMAT(:expiryDate, '%Y-%m-%d'))"), @Filter(name = "compensatoryRequestSchedulerExpiryDateBwFilter", condition = "EXPIRY_DATE >(SELECT DATE_FORMAT(:expiryDate_MIN, '%Y-%m-%d')) AND EXPIRY_DATE <(SELECT DATE_FORMAT(:expiryDate_MAX, '%Y-%m-%d'))"), @Filter(name = "compensatoryRequestSchedulerIdGtFilter", condition = "ID > :id"), @Filter(name = "compensatoryRequestSchedulerIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "compensatoryRequestSchedulerIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "compensatoryRequestSchedulerIdLtFilter", condition = "ID < :id"), @Filter(name = "compensatoryRequestSchedulerIdEqFilter", condition = "ID = :id"), @Filter(name = "compensatoryRequestSchedulerIdNEqFilter", condition = "ID != :id"), @Filter(name = "compensatoryRequestSchedulerIdInFilter", condition = "ID in (:id)"), @Filter(name = "compensatoryRequestSchedulerIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "compensatoryRequestSchedulerIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "compensatoryRequestSchedulerIdEqFilter", condition = "ID = :id"), @Filter(name = "compensatoryRequestSchedulerReasonNInFilter", condition = "REASON not in (:reason)"), @Filter(name = "compensatoryRequestSchedulerReasonEqFilter", condition = "REASON = :reason"), @Filter(name = "compensatoryRequestSchedulerReasonNEqFilter", condition = "REASON != :reason"), @Filter(name = "compensatoryRequestSchedulerReasonInFilter", condition = "REASON in (:reason)"), @Filter(name = "compensatoryRequestSchedulerUnitEqFilter", condition = "UNIT = :unit"), @Filter(name = "compensatoryRequestSchedulerUnitNEqFilter", condition = "UNIT != :unit"), @Filter(name = "compensatoryRequestSchedulerWorkedDateGtFilter", condition = "WORKED_DATE > (SELECT DATE_FORMAT(:workedDate, '%Y-%m-%d'))"), @Filter(name = "compensatoryRequestSchedulerWorkedDateLtFilter", condition = "WORKED_DATE < (SELECT DATE_FORMAT(:workedDate, '%Y-%m-%d'))"), @Filter(name = "compensatoryRequestSchedulerWorkedDateBwFilter", condition = "WORKED_DATE >(SELECT DATE_FORMAT(:workedDate_MIN, '%Y-%m-%d')) AND WORKED_DATE <(SELECT DATE_FORMAT(:workedDate_MAX, '%Y-%m-%d'))"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "compensatoryRequestSchedulerWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "compensatoryRequestSchedulerAttendanceDetailsNInFilter", parameters = { @ParamDef(name = "attendanceDetails", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerAttendanceDetailsEqFilter", parameters = { @ParamDef(name = "attendanceDetails", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerAttendanceDetailsNEqFilter", parameters = { @ParamDef(name = "attendanceDetails", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerAttendanceDetailsInFilter", parameters = { @ParamDef(name = "attendanceDetails", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerDurationNInFilter", parameters = { @ParamDef(name = "duration", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerDurationEqFilter", parameters = { @ParamDef(name = "duration", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerDurationNEqFilter", parameters = { @ParamDef(name = "duration", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerDurationInFilter", parameters = { @ParamDef(name = "duration", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerEmployeeNameNInFilter", parameters = { @ParamDef(name = "employeeName", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerEmployeeNameEqFilter", parameters = { @ParamDef(name = "employeeName", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerEmployeeNameNEqFilter", parameters = { @ParamDef(name = "employeeName", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerEmployeeNameInFilter", parameters = { @ParamDef(name = "employeeName", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerExpiryDateGtFilter", parameters = { @ParamDef(name = "expiryDate", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerExpiryDateLtFilter", parameters = { @ParamDef(name = "expiryDate", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerExpiryDateBwFilter", parameters = { @ParamDef(name = "expiryDate_MIN", type = String.class), @ParamDef(name = "expiryDate_MAX", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerReasonNInFilter", parameters = { @ParamDef(name = "reason", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerReasonEqFilter", parameters = { @ParamDef(name = "reason", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerReasonNEqFilter", parameters = { @ParamDef(name = "reason", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerReasonInFilter", parameters = { @ParamDef(name = "reason", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerUnitEqFilter", parameters = { @ParamDef(name = "unit", type = Boolean.class) }), @FilterDef(name = "compensatoryRequestSchedulerUnitNEqFilter", parameters = { @ParamDef(name = "unit", type = Boolean.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkedDateGtFilter", parameters = { @ParamDef(name = "workedDate", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkedDateLtFilter", parameters = { @ParamDef(name = "workedDate", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkedDateBwFilter", parameters = { @ParamDef(name = "workedDate_MIN", type = String.class), @ParamDef(name = "workedDate_MAX", type = String.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "compensatoryRequestSchedulerWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class CompensatoryRequestScheduler extends BaseEntitySaaS{

    @Basic
    @Column(name = "ATTENDANCE_DETAILS", columnDefinition = "LONGTEXT")
    private String attendanceDetails;

    @Basic
    @Column(columnDefinition = "ENUM", length = 8)
    private String duration;

    @Size(max = 50)
    @Basic
    @Column(name = "EMPLOYEE_NAME", length = 50)
    private String employeeName;

    @Basic
    @Column(name = "EXPIRY_DATE", length = 19)
    private Date expiryDate;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 255)
    @Basic
    private String reason;

    @Basic
    private Boolean unit;

    @Basic
    @Column(name = "WORKED_DATE", length = 19)
    private Date workedDate;

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public CompensatoryRequestScheduler() {
    }

    public CompensatoryRequestScheduler(Integer id) {
        this.id = id;
    }

    public String getAttendanceDetails() {
        return attendanceDetails;
    }

    public void setAttendanceDetails(String attendanceDetails) {
        this.attendanceDetails = attendanceDetails;
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public String getEmployeeName() {
        return employeeName;
    }

    public void setEmployeeName(String employeeName) {
        this.employeeName = employeeName;
    }

    public Date getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(Date expiryDate) {
        this.expiryDate = expiryDate;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getReason() {
        return reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    public Boolean isUnit() {
        return unit;
    }

    public void setUnit(Boolean unit) {
        this.unit = unit;
    }

    public Date getWorkedDate() {
        return workedDate;
    }

    public void setWorkedDate(Date workedDate) {
        this.workedDate = workedDate;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

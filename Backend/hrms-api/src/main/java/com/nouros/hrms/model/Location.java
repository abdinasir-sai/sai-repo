package com.nouros.hrms.model;

import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "LOCATION")
@Filters(value = { @Filter(name = "locationApprovalStatusNInFilter", condition = "APPROVAL_STATUS not in (:approvalStatus)"), @Filter(name = "locationApprovalStatusEqFilter", condition = "APPROVAL_STATUS = :approvalStatus"), @Filter(name = "locationApprovalStatusNEqFilter", condition = "APPROVAL_STATUS != :approvalStatus"), @Filter(name = "locationApprovalStatusInFilter", condition = "APPROVAL_STATUS in (:approvalStatus)"), @Filter(name = "locationCountryNInFilter", condition = "COUNTRY not in (:country)"), @Filter(name = "locationCountryEqFilter", condition = "COUNTRY = :country"), @Filter(name = "locationCountryNEqFilter", condition = "COUNTRY != :country"), @Filter(name = "locationCountryInFilter", condition = "COUNTRY in (:country)"), @Filter(name = "locationDescriptionNInFilter", condition = "DESCRIPTION not in (:description)"), @Filter(name = "locationDescriptionEqFilter", condition = "DESCRIPTION = :description"), @Filter(name = "locationDescriptionNEqFilter", condition = "DESCRIPTION != :description"), @Filter(name = "locationDescriptionInFilter", condition = "DESCRIPTION in (:description)"), @Filter(name = "locationIdGtFilter", condition = "ID > :id"), @Filter(name = "locationIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "locationIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "locationIdLtFilter", condition = "ID < :id"), @Filter(name = "locationIdEqFilter", condition = "ID = :id"), @Filter(name = "locationIdNEqFilter", condition = "ID != :id"), @Filter(name = "locationIdInFilter", condition = "ID in (:id)"), @Filter(name = "locationIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "locationIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "locationIdEqFilter", condition = "ID = :id"), @Filter(name = "locationLocationIdNInFilter", condition = "LOCATION_ID not in (:locationId)"), @Filter(name = "locationLocationIdEqFilter", condition = "LOCATION_ID = :locationId"), @Filter(name = "locationLocationIdNEqFilter", condition = "LOCATION_ID != :locationId"), @Filter(name = "locationLocationIdInFilter", condition = "LOCATION_ID in (:locationId)"), @Filter(name = "locationMailAliasNInFilter", condition = "MAIL_ALIAS not in (:mailAlias)"), @Filter(name = "locationMailAliasEqFilter", condition = "MAIL_ALIAS = :mailAlias"), @Filter(name = "locationMailAliasNEqFilter", condition = "MAIL_ALIAS != :mailAlias"), @Filter(name = "locationMailAliasInFilter", condition = "MAIL_ALIAS in (:mailAlias)"), @Filter(name = "locationNameNInFilter", condition = "NAME not in (:name)"), @Filter(name = "locationNameEqFilter", condition = "NAME = :name"), @Filter(name = "locationNameNEqFilter", condition = "NAME != :name"), @Filter(name = "locationNameInFilter", condition = "NAME in (:name)"), @Filter(name = "locationStateProvinceNInFilter", condition = "STATE_PROVINCE not in (:stateProvince)"), @Filter(name = "locationStateProvinceEqFilter", condition = "STATE_PROVINCE = :stateProvince"), @Filter(name = "locationStateProvinceNEqFilter", condition = "STATE_PROVINCE != :stateProvince"), @Filter(name = "locationStateProvinceInFilter", condition = "STATE_PROVINCE in (:stateProvince)"), @Filter(name = "locationTimeZoneNInFilter", condition = "TIME_ZONE not in (:timeZone)"), @Filter(name = "locationTimeZoneEqFilter", condition = "TIME_ZONE = :timeZone"), @Filter(name = "locationTimeZoneNEqFilter", condition = "TIME_ZONE != :timeZone"), @Filter(name = "locationTimeZoneInFilter", condition = "TIME_ZONE in (:timeZone)"), @Filter(name = "locationWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"), @Filter(name = "locationWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"), @Filter(name = "locationWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"), @Filter(name = "locationWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"), @Filter(name = "locationWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"), @Filter(name = "locationWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"), @Filter(name = "locationWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"), @Filter(name = "locationWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"), @Filter(name = "locationWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"), @Filter(name = "locationWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId") })
@FilterDefs(value = { @FilterDef(name = "locationApprovalStatusNInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "locationApprovalStatusEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "locationApprovalStatusNEqFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "locationApprovalStatusInFilter", parameters = { @ParamDef(name = "approvalStatus", type = String.class) }), @FilterDef(name = "locationCountryNInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "locationCountryEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "locationCountryNEqFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "locationCountryInFilter", parameters = { @ParamDef(name = "country", type = String.class) }), @FilterDef(name = "locationDescriptionNInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "locationDescriptionEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "locationDescriptionNEqFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "locationDescriptionInFilter", parameters = { @ParamDef(name = "description", type = String.class) }), @FilterDef(name = "locationIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "locationIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "locationIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "locationIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "locationIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "locationIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "locationIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "locationIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "locationIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "locationLocationIdNInFilter", parameters = { @ParamDef(name = "locationId", type = String.class) }), @FilterDef(name = "locationLocationIdEqFilter", parameters = { @ParamDef(name = "locationId", type = String.class) }), @FilterDef(name = "locationLocationIdNEqFilter", parameters = { @ParamDef(name = "locationId", type = String.class) }), @FilterDef(name = "locationLocationIdInFilter", parameters = { @ParamDef(name = "locationId", type = String.class) }), @FilterDef(name = "locationMailAliasNInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "locationMailAliasEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "locationMailAliasNEqFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "locationMailAliasInFilter", parameters = { @ParamDef(name = "mailAlias", type = String.class) }), @FilterDef(name = "locationNameNInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "locationNameEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "locationNameNEqFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "locationNameInFilter", parameters = { @ParamDef(name = "name", type = String.class) }), @FilterDef(name = "locationStateProvinceNInFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "locationStateProvinceEqFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "locationStateProvinceNEqFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "locationStateProvinceInFilter", parameters = { @ParamDef(name = "stateProvince", type = String.class) }), @FilterDef(name = "locationTimeZoneNInFilter", parameters = { @ParamDef(name = "timeZone", type = String.class) }), @FilterDef(name = "locationTimeZoneEqFilter", parameters = { @ParamDef(name = "timeZone", type = String.class) }), @FilterDef(name = "locationTimeZoneNEqFilter", parameters = { @ParamDef(name = "timeZone", type = String.class) }), @FilterDef(name = "locationTimeZoneInFilter", parameters = { @ParamDef(name = "timeZone", type = String.class) }), @FilterDef(name = "locationWorkspaceIdGtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "locationWorkspaceIdNInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "locationWorkspaceIdLtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "locationWorkspaceIdLtFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "locationWorkspaceIdEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "locationWorkspaceIdNEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "locationWorkspaceIdInFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }), @FilterDef(name = "locationWorkspaceIdBwFilter", parameters = { @ParamDef(name = "workspaceId_MIN", type = Integer.class), @ParamDef(name = "workspaceId_MAX", type = Integer.class) }), @FilterDef(name = "locationWorkspaceIdGtEqFilter", parameters = { @ParamDef(name = "workspaceId", type = Integer.class) }) })
public class Location extends BaseEntitySaaS{

    

    @Basic
    @Column(name = "APPROVAL_STATUS", columnDefinition = "ENUM('Pending','Approved','Reject','Under-Review','Closed','On Hold')", length = 12)
    private String approvalStatus;

    @Size(max = 50)
    @Basic
    @Column(length = 50)
    private String country;

    @Size(max = 100)
    @Basic
    @Column(length = 100)
    private String description;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.hrms.model.Employee.class, mappedBy = "location", cascade = CascadeType.MERGE)
    private Set<Employee> employees = new HashSet<>();


    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 50)
    @Basic
    @Column(name = "LOCATION_ID", length = 50)
    private String locationId;

    @Size(max = 100)
    @Basic
    @Column(name = "MAIL_ALIAS", length = 100)
    private String mailAlias;

    @Size(max = 100)
    @Basic
    @Column(length = 100)
    private String name;


    @Size(max = 50)
    @Basic
    @Column(name = "STATE_PROVINCE", length = 50)
    private String stateProvince;

    @Size(max = 50)
    @Basic
    @Column(name = "TIME_ZONE", length = 50)
    private String timeZone; 

    @Basic
    @Column(name = "WORKSPACE_ID", columnDefinition = "INT")
    private Integer workspaceId;

    public Location() {
    }

    public Location(Integer id) {
        this.id = id;
    }

    public String getApprovalStatus() {
        return approvalStatus;
    }

    public void setApprovalStatus(String approvalStatus) {
        this.approvalStatus = approvalStatus;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Set<Employee> getEmployees() {
        return employees;
    }

    public void setEmployees(Set<Employee> employees) {
        this.employees = employees;
    }


    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLocationId() {
        return locationId;
    }

    public void setLocationId(String locationId) {
        this.locationId = locationId;
    }

    public String getMailAlias() {
        return mailAlias;
    }

    public void setMailAlias(String mailAlias) {
        this.mailAlias = mailAlias;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

  
    public String getStateProvince() {
        return stateProvince;
    }

    public void setStateProvince(String stateProvince) {
        this.stateProvince = stateProvince;
    }

    public String getTimeZone() {
        return timeZone;
    }

    public void setTimeZone(String timeZone) {
        this.timeZone = timeZone;
    }

    public Integer getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(Integer workspaceId) {
        this.workspaceId = workspaceId;
    }
}

package com.nouros.hrms.model;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.enttribe.product.pii.listners.PrePersistListener;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Audited
@Table(name = "JOB_OPENING")
@Filters(value = { @Filter(name = "jobOpeningAddressNInFilter", condition = "ADDRESS not in (:address)"),
		@Filter(name = "jobOpeningAddressEqFilter", condition = "ADDRESS = :address"),
		@Filter(name = "jobOpeningAddressNEqFilter", condition = "ADDRESS != :address"),
		@Filter(name = "jobOpeningAddressInFilter", condition = "ADDRESS in (:address)"),
		@Filter(name = "jobOpeningAssignedrecruiterNInFilter", condition = "ASSIGNEDRECRUITER not in (:assignedrecruiter)"),
		@Filter(name = "jobOpeningAssignedrecruiterEqFilter", condition = "ASSIGNEDRECRUITER = :assignedrecruiter"),
		@Filter(name = "jobOpeningAssignedrecruiterNEqFilter", condition = "ASSIGNEDRECRUITER != :assignedrecruiter"),
		@Filter(name = "jobOpeningAssignedrecruiterInFilter", condition = "ASSIGNEDRECRUITER in (:assignedrecruiter)"),
		@Filter(name = "jobOpeningAttachment1NInFilter", condition = "ATTACHMENT1 not in (:attachment1)"),
		@Filter(name = "jobOpeningAttachment1EqFilter", condition = "ATTACHMENT1 = :attachment1"),
		@Filter(name = "jobOpeningAttachment1NEqFilter", condition = "ATTACHMENT1 != :attachment1"),
		@Filter(name = "jobOpeningAttachment1InFilter", condition = "ATTACHMENT1 in (:attachment1)"),
		@Filter(name = "jobOpeningAttachment2NInFilter", condition = "ATTACHMENT2 not in (:attachment2)"),
		@Filter(name = "jobOpeningAttachment2EqFilter", condition = "ATTACHMENT2 = :attachment2"),
		@Filter(name = "jobOpeningAttachment2NEqFilter", condition = "ATTACHMENT2 != :attachment2"),
		@Filter(name = "jobOpeningAttachment2InFilter", condition = "ATTACHMENT2 in (:attachment2)"),
		@Filter(name = "jobOpeningAttachment3NInFilter", condition = "ATTACHMENT3 not in (:attachment3)"),
		@Filter(name = "jobOpeningAttachment3EqFilter", condition = "ATTACHMENT3 = :attachment3"),
		@Filter(name = "jobOpeningAttachment3NEqFilter", condition = "ATTACHMENT3 != :attachment3"),
		@Filter(name = "jobOpeningAttachment3InFilter", condition = "ATTACHMENT3 in (:attachment3)"),
		@Filter(name = "jobOpeningCityNInFilter", condition = "CITY not in (:city)"),
		@Filter(name = "jobOpeningCityEqFilter", condition = "CITY = :city"),
		@Filter(name = "jobOpeningCityNEqFilter", condition = "CITY != :city"),
		@Filter(name = "jobOpeningCityInFilter", condition = "CITY in (:city)"),
		@Filter(name = "jobOpeningCountryNInFilter", condition = "COUNTRY not in (:country)"),
		@Filter(name = "jobOpeningCountryEqFilter", condition = "COUNTRY = :country"),
		@Filter(name = "jobOpeningCountryNEqFilter", condition = "COUNTRY != :country"),
		@Filter(name = "jobOpeningCountryInFilter", condition = "COUNTRY in (:country)"),
		@Filter(name = "jobOpeningDateOpenedGtFilter", condition = "DATE_OPENED > (SELECT DATE_FORMAT(:dateOpened, '%Y-%m-%d'))"),
		@Filter(name = "jobOpeningDateOpenedLtFilter", condition = "DATE_OPENED < (SELECT DATE_FORMAT(:dateOpened, '%Y-%m-%d'))"),
		@Filter(name = "jobOpeningDateOpenedBwFilter", condition = "DATE_OPENED >(SELECT DATE_FORMAT(:dateOpened_MIN, '%Y-%m-%d')) AND DATE_OPENED <(SELECT DATE_FORMAT(:dateOpened_MAX, '%Y-%m-%d'))"),
		@Filter(name = "jobOpeningDepartmentDepartmentCodeNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE not in (:departmentCode)"),
		@Filter(name = "jobOpeningDepartmentDepartmentCodeEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE = :departmentCode)"),
		@Filter(name = "jobOpeningDepartmentDepartmentCodeNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE != :departmentCode)"),
		@Filter(name = "jobOpeningDepartmentDepartmentCodeInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_CODE in (:departmentCode)"),
		@Filter(name = "jobOpeningDepartmentDepartmentLeadGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD > :departmentLead)"),
		@Filter(name = "jobOpeningDepartmentDepartmentLeadNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD not in (:departmentLead)"),
		@Filter(name = "jobOpeningDepartmentDepartmentLeadLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD <= :departmentLead)"),
		@Filter(name = "jobOpeningDepartmentDepartmentLeadLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD < :departmentLead)"),
		@Filter(name = "jobOpeningDepartmentDepartmentLeadEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD = :departmentLead)"),
		@Filter(name = "jobOpeningDepartmentDepartmentLeadNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD != :departmentLead)"),
		@Filter(name = "jobOpeningDepartmentDepartmentLeadInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD in (:departmentLead)"),
		@Filter(name = "jobOpeningDepartmentDepartmentLeadBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD > :departmentLead_MIN  AND DEPARTMENT.DEPARTMENT_LEAD < :departmentLead_MAX )"),
		@Filter(name = "jobOpeningDepartmentDepartmentLeadGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.DEPARTMENT_LEAD >= :departmentLead)"),
		@Filter(name = "jobOpeningDepartmentIdGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id)"),
		@Filter(name = "jobOpeningDepartmentIdNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID not in (:id)"),
		@Filter(name = "jobOpeningDepartmentIdLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID <= :id)"),
		@Filter(name = "jobOpeningDepartmentIdLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID < :id)"),
		@Filter(name = "jobOpeningDepartmentIdEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID = :id)"),
		@Filter(name = "jobOpeningDepartmentIdNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID != :id)"),
		@Filter(name = "jobOpeningDepartmentIdInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID in (:id)"),
		@Filter(name = "jobOpeningDepartmentIdBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID > :id_MIN  AND DEPARTMENT.ID < :id_MAX )"),
		@Filter(name = "jobOpeningDepartmentIdGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.ID >= :id)"),
		@Filter(name = "jobOpeningDepartmentParentDepartmentGtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT > :parentDepartment)"),
		@Filter(name = "jobOpeningDepartmentParentDepartmentNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT not in (:parentDepartment)"),
		@Filter(name = "jobOpeningDepartmentParentDepartmentLtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT <= :parentDepartment)"),
		@Filter(name = "jobOpeningDepartmentParentDepartmentLtFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT < :parentDepartment)"),
		@Filter(name = "jobOpeningDepartmentParentDepartmentEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT = :parentDepartment)"),
		@Filter(name = "jobOpeningDepartmentParentDepartmentNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT != :parentDepartment)"),
		@Filter(name = "jobOpeningDepartmentParentDepartmentInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT in (:parentDepartment)"),
		@Filter(name = "jobOpeningDepartmentParentDepartmentBwFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT > :parentDepartment_MIN  AND DEPARTMENT.PARENT_DEPARTMENT < :parentDepartment_MAX )"),
		@Filter(name = "jobOpeningDepartmentParentDepartmentGtEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.PARENT_DEPARTMENT >= :parentDepartment)"),
		@Filter(name = "jobOpeningDepartmentMailAliasNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS not in (:mailAlias)"),
		@Filter(name = "jobOpeningDepartmentMailAliasEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS = :mailAlias)"),
		@Filter(name = "jobOpeningDepartmentMailAliasNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS != :mailAlias)"),
		@Filter(name = "jobOpeningDepartmentMailAliasInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.MAIL_ALIAS in (:mailAlias)"),
		@Filter(name = "jobOpeningDepartmentNameNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME not in (:name)"),
		@Filter(name = "jobOpeningDepartmentNameEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME = :name)"),
		@Filter(name = "jobOpeningDepartmentNameNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME != :name)"),
		@Filter(name = "jobOpeningDepartmentNameInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.NAME in (:name)"),
		@Filter(name = "jobOpeningDepartmentApprovalStatusNInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS not in (:approvalStatus)"),
		@Filter(name = "jobOpeningDepartmentApprovalStatusEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS = :approvalStatus)"),
		@Filter(name = "jobOpeningDepartmentApprovalStatusNEqFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS != :approvalStatus)"),
		@Filter(name = "jobOpeningDepartmentApprovalStatusInFilter", condition = "DEPARTMENT_ID in (select DEPARTMENT.id from DEPARTMENT where DEPARTMENT.APPROVAL_STATUS in (:approvalStatus)"),
		@Filter(name = "jobOpeningDescriptionRequirementsNInFilter", condition = "DESCRIPTION_REQUIREMENTS not in (:descriptionRequirements)"),
		@Filter(name = "jobOpeningDescriptionRequirementsEqFilter", condition = "DESCRIPTION_REQUIREMENTS = :descriptionRequirements"),
		@Filter(name = "jobOpeningDescriptionRequirementsNEqFilter", condition = "DESCRIPTION_REQUIREMENTS != :descriptionRequirements"),
		@Filter(name = "jobOpeningDescriptionRequirementsInFilter", condition = "DESCRIPTION_REQUIREMENTS in (:descriptionRequirements)"),
		@Filter(name = "jobOpeningHiringManagerNInFilter", condition = "HIRING_MANAGER not in (:hiringManager)"),
		@Filter(name = "jobOpeningHiringManagerEqFilter", condition = "HIRING_MANAGER = :hiringManager"),
		@Filter(name = "jobOpeningHiringManagerNEqFilter", condition = "HIRING_MANAGER != :hiringManager"),
		@Filter(name = "jobOpeningHiringManagerInFilter", condition = "HIRING_MANAGER in (:hiringManager)"),
		@Filter(name = "jobOpeningIdGtFilter", condition = "ID > :id"),
		@Filter(name = "jobOpeningIdNInFilter", condition = "ID not in (:id)"),
		@Filter(name = "jobOpeningIdLtEqFilter", condition = "ID <= :id"),
		@Filter(name = "jobOpeningIdLtFilter", condition = "ID < :id"),
		@Filter(name = "jobOpeningIdEqFilter", condition = "ID = :id"),
		@Filter(name = "jobOpeningIdNEqFilter", condition = "ID != :id"),
		@Filter(name = "jobOpeningIdInFilter", condition = "ID in (:id)"),
		@Filter(name = "jobOpeningIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"),
		@Filter(name = "jobOpeningIdGtEqFilter", condition = "ID >= :id"),
		@Filter(name = "jobOpeningIdEqFilter", condition = "ID = :id"),
		@Filter(name = "jobOpeningIndustryNInFilter", condition = "INDUSTRY not in (:industry)"),
		@Filter(name = "jobOpeningIndustryEqFilter", condition = "INDUSTRY = :industry"),
		@Filter(name = "jobOpeningIndustryNEqFilter", condition = "INDUSTRY != :industry"),
		@Filter(name = "jobOpeningIndustryInFilter", condition = "INDUSTRY in (:industry)"),
		@Filter(name = "jobOpeningIsRemoteNInFilter", condition = "IS_REMOTE not in (:isRemote)"),
		@Filter(name = "jobOpeningIsRemoteEqFilter", condition = "IS_REMOTE = :isRemote"),
		@Filter(name = "jobOpeningIsRemoteNEqFilter", condition = "IS_REMOTE != :isRemote"),
		@Filter(name = "jobOpeningIsRemoteInFilter", condition = "IS_REMOTE in (:isRemote)"),
		@Filter(name = "jobOpeningJobIdNInFilter", condition = "JOB_ID not in (:jobId)"),
		@Filter(name = "jobOpeningJobIdEqFilter", condition = "JOB_ID = :jobId"),
		@Filter(name = "jobOpeningJobIdNEqFilter", condition = "JOB_ID != :jobId"),
		@Filter(name = "jobOpeningJobIdInFilter", condition = "JOB_ID in (:jobId)"),
		@Filter(name = "jobOpeningJobOpeningStatusNInFilter", condition = "JOB_OPENING_STATUS not in (:jobOpeningStatus)"),
		@Filter(name = "jobOpeningJobOpeningStatusEqFilter", condition = "JOB_OPENING_STATUS = :jobOpeningStatus"),
		@Filter(name = "jobOpeningJobOpeningStatusNEqFilter", condition = "JOB_OPENING_STATUS != :jobOpeningStatus"),
		@Filter(name = "jobOpeningJobOpeningStatusInFilter", condition = "JOB_OPENING_STATUS in (:jobOpeningStatus)"),
		@Filter(name = "jobOpeningJobTypeNInFilter", condition = "JOB_TYPE not in (:jobType)"),
		@Filter(name = "jobOpeningJobTypeEqFilter", condition = "JOB_TYPE = :jobType"),
		@Filter(name = "jobOpeningJobTypeNEqFilter", condition = "JOB_TYPE != :jobType"),
		@Filter(name = "jobOpeningJobTypeInFilter", condition = "JOB_TYPE in (:jobType)"),
		@Filter(name = "jobOpeningOpenPositionsGtFilter", condition = "OPEN_POSITIONS > :openPositions"),
		@Filter(name = "jobOpeningOpenPositionsNInFilter", condition = "OPEN_POSITIONS not in (:openPositions)"),
		@Filter(name = "jobOpeningOpenPositionsLtEqFilter", condition = "OPEN_POSITIONS <= :openPositions"),
		@Filter(name = "jobOpeningOpenPositionsLtFilter", condition = "OPEN_POSITIONS < :openPositions"),
		@Filter(name = "jobOpeningOpenPositionsEqFilter", condition = "OPEN_POSITIONS = :openPositions"),
		@Filter(name = "jobOpeningOpenPositionsNEqFilter", condition = "OPEN_POSITIONS != :openPositions"),
		@Filter(name = "jobOpeningOpenPositionsInFilter", condition = "OPEN_POSITIONS in (:openPositions)"),
		@Filter(name = "jobOpeningOpenPositionsBwFilter", condition = "OPEN_POSITIONS > :openPositions_MIN  AND OPEN_POSITIONS < :openPositions_MAX"),
		@Filter(name = "jobOpeningOpenPositionsGtEqFilter", condition = "OPEN_POSITIONS >= :openPositions"),
		@Filter(name = "jobOpeningOpenPositionsEqFilter", condition = "OPEN_POSITIONS = :openPositions"),
		@Filter(name = "jobOpeningPostalcodeNInFilter", condition = "POSTALCODE not in (:postalcode)"),
		@Filter(name = "jobOpeningPostalcodeEqFilter", condition = "POSTALCODE = :postalcode"),
		@Filter(name = "jobOpeningPostalcodeNEqFilter", condition = "POSTALCODE != :postalcode"),
		@Filter(name = "jobOpeningPostalcodeInFilter", condition = "POSTALCODE in (:postalcode)"),
		@Filter(name = "jobOpeningPostingTitleNInFilter", condition = "POSTING_TITLE not in (:postingTitle)"),
		@Filter(name = "jobOpeningPostingTitleEqFilter", condition = "POSTING_TITLE = :postingTitle"),
		@Filter(name = "jobOpeningPostingTitleNEqFilter", condition = "POSTING_TITLE != :postingTitle"),
		@Filter(name = "jobOpeningPostingTitleInFilter", condition = "POSTING_TITLE in (:postingTitle)"),
		@Filter(name = "jobOpeningProvinceNInFilter", condition = "PROVINCE not in (:province)"),
		@Filter(name = "jobOpeningProvinceEqFilter", condition = "PROVINCE = :province"),
		@Filter(name = "jobOpeningProvinceNEqFilter", condition = "PROVINCE != :province"),
		@Filter(name = "jobOpeningProvinceInFilter", condition = "PROVINCE in (:province)"),
		@Filter(name = "jobOpeningSalaryRangeNInFilter", condition = "SALARY_RANGE not in (:salaryRange)"),
		@Filter(name = "jobOpeningSalaryRangeEqFilter", condition = "SALARY_RANGE = :salaryRange"),
		@Filter(name = "jobOpeningSalaryRangeNEqFilter", condition = "SALARY_RANGE != :salaryRange"),
		@Filter(name = "jobOpeningSalaryRangeInFilter", condition = "SALARY_RANGE in (:salaryRange)"),
		@Filter(name = "jobOpeningSkillsNInFilter", condition = "SKILLS not in (:skills)"),
		@Filter(name = "jobOpeningSkillsEqFilter", condition = "SKILLS = :skills"),
		@Filter(name = "jobOpeningSkillsNEqFilter", condition = "SKILLS != :skills"),
		@Filter(name = "jobOpeningSkillsInFilter", condition = "SKILLS in (:skills)"),
		@Filter(name = "jobOpeningTargetClossingDateGtFilter", condition = "TARGET_CLOSSING_DATE > (SELECT DATE_FORMAT(:targetClossingDate, '%Y-%m-%d'))"),
		@Filter(name = "jobOpeningTargetClossingDateLtFilter", condition = "TARGET_CLOSSING_DATE < (SELECT DATE_FORMAT(:targetClossingDate, '%Y-%m-%d'))"),
		@Filter(name = "jobOpeningTargetClossingDateBwFilter", condition = "TARGET_CLOSSING_DATE >(SELECT DATE_FORMAT(:targetClossingDate_MIN, '%Y-%m-%d')) AND TARGET_CLOSSING_DATE <(SELECT DATE_FORMAT(:targetClossingDate_MAX, '%Y-%m-%d'))"),
		@Filter(name = "jobOpeningWorkExperienceNInFilter", condition = "WORK_EXPERIENCE not in (:workExperience)"),
		@Filter(name = "jobOpeningWorkExperienceEqFilter", condition = "WORK_EXPERIENCE = :workExperience"),
		@Filter(name = "jobOpeningWorkExperienceNEqFilter", condition = "WORK_EXPERIENCE != :workExperience"),
		@Filter(name = "jobOpeningWorkExperienceInFilter", condition = "WORK_EXPERIENCE in (:workExperience)"),
		@Filter(name = "jobOpeningWorkspaceIdGtFilter", condition = "WORKSPACE_ID > :workspaceId"),
		@Filter(name = "jobOpeningWorkspaceIdNInFilter", condition = "WORKSPACE_ID not in (:workspaceId)"),
		@Filter(name = "jobOpeningWorkspaceIdLtEqFilter", condition = "WORKSPACE_ID <= :workspaceId"),
		@Filter(name = "jobOpeningWorkspaceIdLtFilter", condition = "WORKSPACE_ID < :workspaceId"),
		@Filter(name = "jobOpeningWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"),
		@Filter(name = "jobOpeningWorkspaceIdNEqFilter", condition = "WORKSPACE_ID != :workspaceId"),
		@Filter(name = "jobOpeningWorkspaceIdInFilter", condition = "WORKSPACE_ID in (:workspaceId)"),
		@Filter(name = "jobOpeningWorkspaceIdBwFilter", condition = "WORKSPACE_ID > :workspaceId_MIN  AND WORKSPACE_ID < :workspaceId_MAX"),
		@Filter(name = "jobOpeningWorkspaceIdGtEqFilter", condition = "WORKSPACE_ID >= :workspaceId"),
		@Filter(name = "jobOpeningWorkspaceIdEqFilter", condition = "WORKSPACE_ID = :workspaceId"),
		@Filter(name = "jobOpeningProcessInstanceIdNInFilter", condition = "PROCESS_INSTANCE_ID not in (:processInstanceId)"),
		@Filter(name = "jobOpeningProcessInstanceIdEqFilter", condition = "PROCESS_INSTANCE_ID = :processInstanceId"),
		@Filter(name = "jobOpeningProcessInstanceIdNEqFilter", condition = "PROCESS_INSTANCE_ID != :processInstanceId"),
		@Filter(name = "jobOpeningProcessInstanceIdInFilter", condition = "PROCESS_INSTANCE_ID in (:processInstanceId)"),
		@Filter(name = "jobOpeningWorkflowStageNInFilter", condition = "WORKFLOW_STAGE not in (:workflowStage)"),
		@Filter(name = "jobOpeningWorkflowStageEqFilter", condition = "WORKFLOW_STAGE = :workflowStage"),
		@Filter(name = "jobOpeningWorkflowStageNEqFilter", condition = "WORKFLOW_STAGE != :workflowStage"),
		@Filter(name = "jobOpeningWorkflowStageInFilter", condition = "WORKFLOW_STAGE in (:workflowStage)"),
		@Filter(name = "jobOpeningAssignedToMeFilterAll", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in(:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName or WORKFLOW_ACTION.ROLE_NAME =:roleName)"),
		@Filter(name = "jobOpeningAssignedToMeFilterAgUn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"),
		@Filter(name = "jobOpeningAssignedToMeFilterAgRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName)  or WORKFLOW_ACTION.ROLE_NAME =:roleName)"),
		@Filter(name = "jobOpeningAssignedToMeFilterUnRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME in (:assigneeGroupName) or  WORKFLOW_ACTION.ROLE_NAME =:roleName)"),
		@Filter(name = "jobOpeningAssignedToMeFilterAg", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName))"),
		@Filter(name = "jobOpeningAssignedToMeFilterAu", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"),
		@Filter(name = "jobOpeningAssignedToMeFilterRn", condition = "ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ROLE_NAME =:roleName)") })
@FilterDefs(value = { @FilterDef(name = "jobOpeningAssignedToMeFilterAll", parameters = {
		@ParamDef(name = "assigneeGroupName", type = String.class),
		@ParamDef(name = "assigneeUserName", type = String.class), @ParamDef(name = "roleName", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedToMeFilterAgUn", parameters = {
				@ParamDef(name = "assigneeGroupName", type = String.class),
				@ParamDef(name = "assigneeUserName", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedToMeFilterAgRn", parameters = {
				@ParamDef(name = "assigneeGroupName", type = String.class),
				@ParamDef(name = "roleName", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedToMeFilterUnRn", parameters = {
				@ParamDef(name = "assigneeUserName", type = String.class),
				@ParamDef(name = "roleName", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedToMeFilterAg", parameters = {
				@ParamDef(name = "assigneeGroupName", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedToMeFilterAu", parameters = {
				@ParamDef(name = "assigneeUserName", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedToMeFilterRn", parameters = {
				@ParamDef(name = "roleName", type = String.class) }),
		@FilterDef(name = "jobOpeningAddressNInFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "jobOpeningAddressEqFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "jobOpeningAddressNEqFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "jobOpeningAddressInFilter", parameters = {
				@ParamDef(name = "address", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedrecruiterNInFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedrecruiterEqFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedrecruiterNEqFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "jobOpeningAssignedrecruiterInFilter", parameters = {
				@ParamDef(name = "assignedrecruiter", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment1NInFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment1EqFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment1NEqFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment1InFilter", parameters = {
				@ParamDef(name = "attachment1", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment2NInFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment2EqFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment2NEqFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment2InFilter", parameters = {
				@ParamDef(name = "attachment2", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment3NInFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment3EqFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment3NEqFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "jobOpeningAttachment3InFilter", parameters = {
				@ParamDef(name = "attachment3", type = String.class) }),
		@FilterDef(name = "jobOpeningCityNInFilter", parameters = { @ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobOpeningCityEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobOpeningCityNEqFilter", parameters = { @ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobOpeningCityInFilter", parameters = { @ParamDef(name = "city", type = String.class) }),
		@FilterDef(name = "jobOpeningCountryNInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobOpeningCountryEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobOpeningCountryNEqFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobOpeningCountryInFilter", parameters = {
				@ParamDef(name = "country", type = String.class) }),
		@FilterDef(name = "jobOpeningDateOpenedGtFilter", parameters = {
				@ParamDef(name = "dateOpened", type = String.class) }),
		@FilterDef(name = "jobOpeningDateOpenedLtFilter", parameters = {
				@ParamDef(name = "dateOpened", type = String.class) }),
		@FilterDef(name = "jobOpeningDateOpenedBwFilter", parameters = {
				@ParamDef(name = "dateOpened_MIN", type = String.class),
				@ParamDef(name = "dateOpened_MAX", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentCodeNInFilter", parameters = {
				@ParamDef(name = "departmentCode", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentCodeEqFilter", parameters = {
				@ParamDef(name = "departmentCode", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentCodeNEqFilter", parameters = {
				@ParamDef(name = "departmentCode", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentCodeInFilter", parameters = {
				@ParamDef(name = "departmentCode", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentLeadGtFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentLeadNInFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentLeadLtEqFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentLeadLtFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentLeadEqFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentLeadNEqFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentLeadInFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentLeadBwFilter", parameters = {
				@ParamDef(name = "departmentLead_MIN", type = Integer.class),
				@ParamDef(name = "departmentLead_MAX", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentDepartmentLeadGtEqFilter", parameters = {
				@ParamDef(name = "departmentLead", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentIdGtFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentIdNInFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentIdLtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentIdLtFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentIdEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentIdNEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentIdInFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentIdBwFilter", parameters = {
				@ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentIdGtEqFilter", parameters = {
				@ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentParentDepartmentGtFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentParentDepartmentNInFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentParentDepartmentLtEqFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentParentDepartmentLtFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentParentDepartmentEqFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentParentDepartmentNEqFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentParentDepartmentInFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentParentDepartmentBwFilter", parameters = {
				@ParamDef(name = "parentDepartment_MIN", type = Integer.class),
				@ParamDef(name = "parentDepartment_MAX", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentParentDepartmentGtEqFilter", parameters = {
				@ParamDef(name = "parentDepartment", type = Integer.class) }),
		@FilterDef(name = "jobOpeningDepartmentMailAliasNInFilter", parameters = {
				@ParamDef(name = "mailAlias", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentMailAliasEqFilter", parameters = {
				@ParamDef(name = "mailAlias", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentMailAliasNEqFilter", parameters = {
				@ParamDef(name = "mailAlias", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentMailAliasInFilter", parameters = {
				@ParamDef(name = "mailAlias", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentNameNInFilter", parameters = {
				@ParamDef(name = "name", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentNameEqFilter", parameters = {
				@ParamDef(name = "name", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentNameNEqFilter", parameters = {
				@ParamDef(name = "name", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentNameInFilter", parameters = {
				@ParamDef(name = "name", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentApprovalStatusNInFilter", parameters = {
				@ParamDef(name = "approvalStatus", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentApprovalStatusEqFilter", parameters = {
				@ParamDef(name = "approvalStatus", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentApprovalStatusNEqFilter", parameters = {
				@ParamDef(name = "approvalStatus", type = String.class) }),
		@FilterDef(name = "jobOpeningDepartmentApprovalStatusInFilter", parameters = {
				@ParamDef(name = "approvalStatus", type = String.class) }),
		@FilterDef(name = "jobOpeningDescriptionRequirementsNInFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "jobOpeningDescriptionRequirementsEqFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "jobOpeningDescriptionRequirementsNEqFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "jobOpeningDescriptionRequirementsInFilter", parameters = {
				@ParamDef(name = "descriptionRequirements", type = String.class) }),
		@FilterDef(name = "jobOpeningHiringManagerNInFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "jobOpeningHiringManagerEqFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "jobOpeningHiringManagerNEqFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "jobOpeningHiringManagerInFilter", parameters = {
				@ParamDef(name = "hiringManager", type = String.class) }),
		@FilterDef(name = "jobOpeningIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class),
				@ParamDef(name = "id_MAX", type = Integer.class) }),
		@FilterDef(name = "jobOpeningIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }),
		@FilterDef(name = "jobOpeningIndustryNInFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "jobOpeningIndustryEqFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "jobOpeningIndustryNEqFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "jobOpeningIndustryInFilter", parameters = {
				@ParamDef(name = "industry", type = String.class) }),
		@FilterDef(name = "jobOpeningIsRemoteNInFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "jobOpeningIsRemoteEqFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "jobOpeningIsRemoteNEqFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "jobOpeningIsRemoteInFilter", parameters = {
				@ParamDef(name = "isRemote", type = String.class) }),
		@FilterDef(name = "jobOpeningJobIdNInFilter", parameters = { @ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "jobOpeningJobIdEqFilter", parameters = { @ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "jobOpeningJobIdNEqFilter", parameters = { @ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "jobOpeningJobIdInFilter", parameters = { @ParamDef(name = "jobId", type = String.class) }),
		@FilterDef(name = "jobOpeningJobOpeningStatusNInFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "jobOpeningJobOpeningStatusEqFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "jobOpeningJobOpeningStatusNEqFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "jobOpeningJobOpeningStatusInFilter", parameters = {
				@ParamDef(name = "jobOpeningStatus", type = String.class) }),
		@FilterDef(name = "jobOpeningJobTypeNInFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "jobOpeningJobTypeEqFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "jobOpeningJobTypeNEqFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "jobOpeningJobTypeInFilter", parameters = {
				@ParamDef(name = "jobType", type = String.class) }),
		@FilterDef(name = "jobOpeningOpenPositionsGtFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobOpeningOpenPositionsNInFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobOpeningOpenPositionsLtEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobOpeningOpenPositionsLtFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobOpeningOpenPositionsEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobOpeningOpenPositionsNEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobOpeningOpenPositionsInFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobOpeningOpenPositionsBwFilter", parameters = {
				@ParamDef(name = "openPositions_MIN", type = Integer.class),
				@ParamDef(name = "openPositions_MAX", type = Integer.class) }),
		@FilterDef(name = "jobOpeningOpenPositionsGtEqFilter", parameters = {
				@ParamDef(name = "openPositions", type = Integer.class) }),
		@FilterDef(name = "jobOpeningPostalcodeNInFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "jobOpeningPostalcodeEqFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "jobOpeningPostalcodeNEqFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "jobOpeningPostalcodeInFilter", parameters = {
				@ParamDef(name = "postalcode", type = String.class) }),
		@FilterDef(name = "jobOpeningPostingTitleNInFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "jobOpeningPostingTitleEqFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "jobOpeningPostingTitleNEqFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "jobOpeningPostingTitleInFilter", parameters = {
				@ParamDef(name = "postingTitle", type = String.class) }),
		@FilterDef(name = "jobOpeningProvinceNInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobOpeningProvinceEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobOpeningProvinceNEqFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobOpeningProvinceInFilter", parameters = {
				@ParamDef(name = "province", type = String.class) }),
		@FilterDef(name = "jobOpeningSalaryRangeNInFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "jobOpeningSalaryRangeEqFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "jobOpeningSalaryRangeNEqFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "jobOpeningSalaryRangeInFilter", parameters = {
				@ParamDef(name = "salaryRange", type = String.class) }),
		@FilterDef(name = "jobOpeningSkillsNInFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "jobOpeningSkillsEqFilter", parameters = { @ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "jobOpeningSkillsNEqFilter", parameters = {
				@ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "jobOpeningSkillsInFilter", parameters = { @ParamDef(name = "skills", type = String.class) }),
		@FilterDef(name = "jobOpeningTargetClossingDateGtFilter", parameters = {
				@ParamDef(name = "targetClossingDate", type = String.class) }),
		@FilterDef(name = "jobOpeningTargetClossingDateLtFilter", parameters = {
				@ParamDef(name = "targetClossingDate", type = String.class) }),
		@FilterDef(name = "jobOpeningTargetClossingDateBwFilter", parameters = {
				@ParamDef(name = "targetClossingDate_MIN", type = String.class),
				@ParamDef(name = "targetClossingDate_MAX", type = String.class) }),
		@FilterDef(name = "jobOpeningWorkExperienceNInFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "jobOpeningWorkExperienceEqFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "jobOpeningWorkExperienceNEqFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "jobOpeningWorkExperienceInFilter", parameters = {
				@ParamDef(name = "workExperience", type = String.class) }),
		@FilterDef(name = "jobOpeningWorkspaceIdGtFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobOpeningWorkspaceIdNInFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobOpeningWorkspaceIdLtEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobOpeningWorkspaceIdLtFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobOpeningWorkspaceIdEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobOpeningWorkspaceIdNEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobOpeningWorkspaceIdInFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobOpeningWorkspaceIdBwFilter", parameters = {
				@ParamDef(name = "workspaceId_MIN", type = Integer.class),
				@ParamDef(name = "workspaceId_MAX", type = Integer.class) }),
		@FilterDef(name = "jobOpeningWorkspaceIdGtEqFilter", parameters = {
				@ParamDef(name = "workspaceId", type = Integer.class) }),
		@FilterDef(name = "jobOpeningProcessInstanceIdNInFilter", parameters = {
				@ParamDef(name = "processInstanceId", type = String.class) }),
		@FilterDef(name = "jobOpeningProcessInstanceIdEqFilter", parameters = {
				@ParamDef(name = "processInstanceId", type = String.class) }),
		@FilterDef(name = "jobOpeningProcessInstanceIdNEqFilter", parameters = {
				@ParamDef(name = "processInstanceId", type = String.class) }),
		@FilterDef(name = "jobOpeningProcessInstanceIdInFilter", parameters = {
				@ParamDef(name = "processInstanceId", type = String.class) }),
		@FilterDef(name = "jobOpeningWorkflowStageNInFilter", parameters = {
				@ParamDef(name = "workflowStage", type = String.class) }),
		@FilterDef(name = "jobOpeningWorkflowStageEqFilter", parameters = {
				@ParamDef(name = "workflowStage", type = String.class) }),
		@FilterDef(name = "jobOpeningWorkflowStageNEqFilter", parameters = {
				@ParamDef(name = "workflowStage", type = String.class) }),
		@FilterDef(name = "jobOpeningWorkflowStageInFilter", parameters = {
				@ParamDef(name = "workflowStage", type = String.class) }) })
public class JobOpening extends BaseEntitySaaS {

	@Size(max = 500)
	@Basic
	@Column(name = "ADDRESS", length = 500)
	private String address;

	@Size(max = 255)
	@Basic
	private String assignedrecruiter;

	@Size(max = 200)
	@Basic
	@Column(length = 200)
	private String attachment1;

	@Size(max = 200)
	@Basic
	@Column(length = 200)
	private String attachment2;

	@Size(max = 200)
	@Basic
	@Column(length = 200)
	private String attachment3;

	@Size(max = 255)
	@Basic
	private String city;

	@Size(max = 255)
	@Basic
	private String country;

	@Basic
	@Column(name = "DATE_OPENED", length = 19)
	private Date dateOpened;

	@Basic
	private boolean deleted;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "DEPARTMENT_ID", columnDefinition = "INT")
	private Department department;

	@Basic
	@Column(name = "DESCRIPTION_REQUIREMENTS", columnDefinition = "LONGTEXT")
	private String descriptionRequirements;

	@Basic
	@Column(name = "INTERVIEW_QUESTION", columnDefinition = "LONGTEXT")
	private String interviewQuestion;

	@Basic
	@Column(name = "PRE_QUESTIONAIRE", columnDefinition = "LONGTEXT")
	private String preQuestionaire;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "HIRING_MANAGER", columnDefinition = "INT")
	private Employee hiringManager;

	@GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
	@Id
	@Column(columnDefinition = "INT")
	private Integer id;

	@Basic
	@Column(columnDefinition = "ENUM", length = 28)
	private String industry;

	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@OneToMany(targetEntity = com.nouros.hrms.model.Interview.class, mappedBy = "jobOpening", cascade = CascadeType.MERGE)
	private Set<Interview> interviews = new HashSet<>();

	@Basic
	@Column(name = "IS_REMOTE", columnDefinition = "ENUM", length = 3)
	private String isRemote;

//	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
//	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
//	@OneToMany(targetEntity = com.nouros.hrms.model.JobApplication.class, mappedBy = "jobOpening", cascade = CascadeType.MERGE)
//	private Set<JobApplication> jobApplications = new HashSet<>();

	@Basic
	@Column(name = "JOB_ID", length = 100)
	private String jobId;

	@Basic
	@Column(name = "JOB_OPENING_STATUS", columnDefinition = "ENUM", length = 28)
	private String jobOpeningStatus;

	@Basic
	@Column(name = "JOB_TYPE", length = 7)
	private String jobType;

//	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
//	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
//	@OneToMany(targetEntity = com.nouros.hrms.model.Offers.class, mappedBy = "jobOpening", cascade = CascadeType.MERGE)
//	private Set<Offers> offers = new HashSet<>();

	@Basic
	@Column(name = "OPEN_POSITIONS", columnDefinition = "INT")
	private Integer openPositions;

	@Basic
	@Column(name = "TOTAL_POSITIONS", columnDefinition = "INT")
	private Integer totalPositions;

	@Size(max = 20)
	@Basic
	@Column(length = 20)
	private String postalcode;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "POSTING_TITLE", columnDefinition = "INT")
	private Designation postingTitle;

	@Size(max = 255)
	@Basic
	private String province;

	@Size(max = 80)
	@Basic
	@Column(name = "FROM_SALARY")
	private String fromSalary;

	@Size(max = 80)
	@Basic
	@Column(name = "END_SALARY")
	private String endSalary;

	@Size(max = 500)
	@Basic
	@Column(name = "SKILLS", length = 500)
	private String skills;

	@Basic
	@Column(name = "TARGET_CLOSING_DATE", length = 19)
	private Date targetClosingDate;

	@Basic
	@Column(name = "WORK_EXPERIENCE")
	private Double workExperience;

	@Basic
	@Column(name = "WORKSPACE_ID", columnDefinition = "INT")
	private Integer workspaceId;

	@Basic
	@Column(name = "EDUCATION_WEIGHTAGE")
	private Double educationWeightage;

	@Basic
	@Column(name = "EXPERIENCE_WEIGHTAGE")
	private Double experienceWeightage;

	@Basic
	@Column(name = "SKILLS_WEIGHTAGE")
	private Double skillsWeightage;

	@Basic
	@Column(name = "SAUDIZATION_WEIGHTAGE")
	private Double saudizationWeightage;

	@Basic
	@Column(name = "EXPERIENCE_AND_EDUCATION", columnDefinition = "LONGTEXT")
	private String experienceAndEducation;

	@Basic
	@Column(name = "CORE_CAPABILITIES", columnDefinition = "LONGTEXT")
	private String coreCapabilities;

	@Basic
	@Column(name = "RESPONSIBILITIES", columnDefinition = "LONGTEXT")
	private String responsibilities;

	@Basic
	@Column(name = "KPI", columnDefinition = "LONGTEXT")
	private String kpi;

	@Basic
	@Column(name = "ACTIVATION_DATE", length = 19)
	private Date activationDate;

	@Basic
	@Column(name = "IS_CRITICAL")
	private Boolean isCritical;

	@Basic
	@Column(name = "CAREER_WEBSITE")
	private Boolean careerWebsite;

	@Basic
	@Column(name = "HEAD_HUNTING")
	private Boolean headHunting;

	public Boolean getIsCritical() {
		return isCritical;
	}

	public void setIsCritical(Boolean isCritical) {
		this.isCritical = isCritical;
	}

	public Boolean getCareerWebsite() {
		return careerWebsite;
	}

	public void setCareerWebsite(Boolean careerWebsite) {
		this.careerWebsite = careerWebsite;
	}

	public Boolean getHeadHunting() {
		return headHunting;
	}

	public void setHeadHunting(Boolean headHunting) {
		this.headHunting = headHunting;
	}

	public JobOpening() {
	}

	public JobOpening(Integer id) {
		this.id = id;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getAssignedrecruiter() {
		return assignedrecruiter;
	}

	public void setAssignedrecruiter(String assignedrecruiter) {
		this.assignedrecruiter = assignedrecruiter;
	}

	public String getAttachment1() {
		return attachment1;
	}

	public void setAttachment1(String attachment1) {
		this.attachment1 = attachment1;
	}

	public String getAttachment2() {
		return attachment2;
	}

	public void setAttachment2(String attachment2) {
		this.attachment2 = attachment2;
	}

	public String getAttachment3() {
		return attachment3;
	}

	public void setAttachment3(String attachment3) {
		this.attachment3 = attachment3;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public Date getDateOpened() {
		return dateOpened;
	}

	public void setDateOpened(Date dateOpened) {
		this.dateOpened = dateOpened;
	}

	public boolean isDeleted() {
		return deleted;
	}

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	public String getDescriptionRequirements() {
		return descriptionRequirements;
	}

	public void setDescriptionRequirements(String descriptionRequirements) {
		this.descriptionRequirements = descriptionRequirements;
	}

	public Integer getTotalPositions() {
		return totalPositions;
	}

	public void setTotalPositions(Integer totalPositions) {
		this.totalPositions = totalPositions;
	}

	public Employee getHiringManager() {
		return hiringManager;
	}

	public void setHiringManager(Employee hiringManager) {
		this.hiringManager = hiringManager;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getIndustry() {
		return industry;
	}

	public void setIndustry(String industry) {
		this.industry = industry;
	}

	public Set<Interview> getInterviews() {
		return interviews;
	}

	public void setInterviews(Set<Interview> interviews) {
		this.interviews = interviews;
	}

	public String getIsRemote() {
		return isRemote;
	}

	public void setIsRemote(String isRemote) {
		this.isRemote = isRemote;
	}

//	public Set<JobApplication> getJobApplications() {
//		return jobApplications;
//	}
//
//	public void setJobApplications(Set<JobApplication> jobApplications) {
//		this.jobApplications = jobApplications;
//	}

	public String getJobId() {
		return jobId;
	}

	public void setJobId(String jobId) {
		this.jobId = jobId;
	}

	public String getJobOpeningStatus() {
		return jobOpeningStatus;
	}

	public void setJobOpeningStatus(String jobOpeningStatus) {
		this.jobOpeningStatus = jobOpeningStatus;
	}

	public String getJobType() {
		return jobType;
	}

	public void setJobType(String jobType) {
		this.jobType = jobType;
	}

	public String getInterviewQuestion() {
		return interviewQuestion;
	}

	public void setInterviewQuestion(String interviewQuestion) {
		this.interviewQuestion = interviewQuestion;
	}

	public String getPreQuestionaire() {
		return preQuestionaire;
	}

	public void setPreQuestionaire(String preQuestionaire) {
		this.preQuestionaire = preQuestionaire;
	}

//	public Set<Offers> getOffers() {
//		return offers;
//	}
//
//	public void setOffers(Set<Offers> offers) {
//		this.offers = offers;
//	}

	public Integer getOpenPositions() {
		return openPositions;
	}

	public void setOpenPositions(Integer openPositions) {
		this.openPositions = openPositions;
	}

	public String getPostalcode() {
		return postalcode;
	}

	public String getFromSalary() {
		return fromSalary;
	}

	public void setFromSalary(String fromSalary) {
		this.fromSalary = fromSalary;
	}

	public String getEndSalary() {
		return endSalary;
	}

	public void setEndSalary(String endSalary) {
		this.endSalary = endSalary;
	}

	public void setPostalcode(String postalcode) {
		this.postalcode = postalcode;
	}

	public Designation getPostingTitle() {
		return postingTitle;
	}

	public void setPostingTitle(Designation postingTitle) {
		this.postingTitle = postingTitle;
	}

	public Double getEducationWeightage() {
		return educationWeightage;
	}

	public void setEducationWeightage(Double educationWeightage) {
		this.educationWeightage = educationWeightage;
	}

	public Double getExperienceWeightage() {
		return experienceWeightage;
	}

	public void setExperienceWeightage(Double experienceWeightage) {
		this.experienceWeightage = experienceWeightage;
	}

	public Double getSkillsWeightage() {
		return skillsWeightage;
	}

	public void setSkillsWeightage(Double skillsWeightage) {
		this.skillsWeightage = skillsWeightage;
	}

	public Double getSaudizationWeightage() {
		return saudizationWeightage;
	}

	public void setSaudizationWeightage(Double saudizationWeightage) {
		this.saudizationWeightage = saudizationWeightage;
	}

	public String getExperienceAndEducation() {
		return experienceAndEducation;
	}

	public void setExperienceAndEducation(String experienceAndEducation) {
		this.experienceAndEducation = experienceAndEducation;
	}

	public String getCoreCapabilities() {
		return coreCapabilities;
	}

	public void setCoreCapabilities(String coreCapabilities) {
		this.coreCapabilities = coreCapabilities;
	}

	public String getProvince() {
		return province;
	}

	public void setProvince(String province) {
		this.province = province;
	}

	public String getSkills() {
		return skills;
	}

	public void setSkills(String skills) {
		this.skills = skills;
	}

	public Date getTargetClosingDate() {
		return targetClosingDate;
	}

	public void setTargetClosingDate(Date targetClosingDate) {
		this.targetClosingDate = targetClosingDate;
	}

	public Double getWorkExperience() {
		return workExperience;
	}

	public void setWorkExperience(Double workExperience) {
		this.workExperience = workExperience;
	}

	public Integer getWorkspaceId() {
		return workspaceId;
	}

	public void setWorkspaceId(Integer workspaceId) {
		this.workspaceId = workspaceId;
	}

	@Column(name = "PROCESS_INSTANCE_ID")
	private String processInstanceId;

	@Column(name = "WORKFLOW_STAGE")
	private String workflowStage;

	public String getProcessInstanceId() {
		return processInstanceId;
	}

	public void setProcessInstanceId(String processInstanceId) {
		this.processInstanceId = processInstanceId;
	}

	public String getWorkflowStage() {
		return workflowStage;
	}

	public void setWorkflowStage(String workflowStage) {
		this.workflowStage = workflowStage;
	}

	public String getResponsibilities() {
		return responsibilities;
	}

	public void setResponsibilities(String responsibilities) {
		this.responsibilities = responsibilities;
	}

	public String getKpi() {
		return kpi;
	}

	public void setKpi(String kpi) {
		this.kpi = kpi;
	}

	public Date getActivationDate() {
		return activationDate;
	}

	public void setActivationDate(Date activationDate) {
		this.activationDate = activationDate;
	}

	public List<WorkflowActions> getActions() {
		return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class)
				.getWorkflowActions(id, "JobOpening");
	}
}

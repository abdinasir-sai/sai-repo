package com.nouros.payrollmanagement.model;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;
import org.hibernate.envers.Audited;

import com.enttribe.core.generic.utils.ApplicationContextProvider;
import com.enttribe.orchestrator.utility.controller.WorkflowActionsController;
import com.enttribe.orchestrator.utility.model.WorkflowActions;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.nouros.hrms.model.BaseEntitySaaS;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */

@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Audited
@Table(name = "PAYROLL_RUN")
//@Filters(value = { @Filter(name = "payrollRunEndDateGtFilter", condition = "END_DATE > (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "payrollRunEndDateLtFilter", condition = "END_DATE < (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "payrollRunEndDateBwFilter", condition = "END_DATE >(SELECT DATE_FORMAT(:endDate_MIN, '%Y-%m-%d')) AND END_DATE <(SELECT DATE_FORMAT(:endDate_MAX, '%Y-%m-%d'))"), @Filter(name = "payrollRunIdGtFilter", condition = "ID > :id"), @Filter(name = "payrollRunIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "payrollRunIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "payrollRunIdLtFilter", condition = "ID < :id"), @Filter(name = "payrollRunIdEqFilter", condition = "ID = :id"), @Filter(name = "payrollRunIdNEqFilter", condition = "ID != :id"), @Filter(name = "payrollRunIdInFilter", condition = "ID in (:id)"), @Filter(name = "payrollRunIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "payrollRunIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "payrollRunIdEqFilter", condition = "ID = :id"), @Filter(name = "payrollRunRunDateGtFilter", condition = "RUN_DATE > (SELECT DATE_FORMAT(:runDate, '%Y-%m-%d'))"), @Filter(name = "payrollRunRunDateLtFilter", condition = "RUN_DATE < (SELECT DATE_FORMAT(:runDate, '%Y-%m-%d'))"), @Filter(name = "payrollRunRunDateBwFilter", condition = "RUN_DATE >(SELECT DATE_FORMAT(:runDate_MIN, '%Y-%m-%d')) AND RUN_DATE <(SELECT DATE_FORMAT(:runDate_MAX, '%Y-%m-%d'))"), @Filter(name = "payrollRunStartDateGtFilter", condition = "START_DATE > (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "payrollRunStartDateLtFilter", condition = "START_DATE < (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "payrollRunStartDateBwFilter", condition = "START_DATE >(SELECT DATE_FORMAT(:startDate_MIN, '%Y-%m-%d')) AND START_DATE <(SELECT DATE_FORMAT(:startDate_MAX, '%Y-%m-%d'))"), @Filter(name = "payrollRunStatusNInFilter", condition = "STATUS not in (:status)"), @Filter(name = "payrollRunStatusEqFilter", condition = "STATUS = :status"), @Filter(name = "payrollRunStatusNEqFilter", condition = "STATUS != :status"), @Filter(name = "payrollRunStatusInFilter", condition = "STATUS in (:status)"), @Filter(name = "payrollRunProcessInstanceIdNInFilter", condition = "PROCESS_INSTANCE_ID not in (:processInstanceId)"), @Filter(name = "payrollRunProcessInstanceIdEqFilter", condition = "PROCESS_INSTANCE_ID = :processInstanceId"), @Filter(name = "payrollRunProcessInstanceIdNEqFilter", condition = "PROCESS_INSTANCE_ID != :processInstanceId"), @Filter(name = "payrollRunProcessInstanceIdInFilter", condition = "PROCESS_INSTANCE_ID in (:processInstanceId)"), @Filter(name = "payrollRunWorkflowStageNInFilter", condition = "WORKFLOW_STAGE not in (:workflowStage)"), @Filter(name = "payrollRunWorkflowStageEqFilter", condition = "WORKFLOW_STAGE = :workflowStage"), @Filter(name = "payrollRunWorkflowStageNEqFilter", condition = "WORKFLOW_STAGE != :workflowStage"), @Filter(name = "payrollRunWorkflowStageInFilter", condition = "WORKFLOW_STAGE in (:workflowStage)"), @Filter(name = "payrollRunAssignedToMeFilterAll", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in(:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName or WORKFLOW_ACTION.ROLE_NAME =:roleName)"), @Filter(name = "payrollRunAssignedToMeFilterAgUn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName) or WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"), @Filter(name = "payrollRunAssignedToMeFilterAgRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName)  or WORKFLOW_ACTION.ROLE_NAME =:roleName)"), @Filter(name = "payrollRunAssignedToMeFilterUnRn", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME in (:assigneeGroupName) or  WORKFLOW_ACTION.ROLE_NAME =:roleName)"), @Filter(name = "payrollRunAssignedToMeFilterAg", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_GROUP_NAME in (:assigneeGroupName))"), @Filter(name = "payrollRunAssignedToMeFilterAu", condition = " ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ASSIGNEE_USER_NAME =:assigneeUserName )"), @Filter(name = "payrollRunAssignedToMeFilterRn", condition = "ID in( select WORKFLOW_ACTION.ENTITY_ID from WORKFLOW_ACTION where WORKFLOW_ACTION.ROLE_NAME =:roleName)") })
//@FilterDefs(value = { @FilterDef(name = "payrollRunAssignedToMeFilterAll", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class), @ParamDef(name = "assigneeUserName", type = String.class), @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "payrollRunAssignedToMeFilterAgUn", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class), @ParamDef(name = "assigneeUserName", type = String.class) }), @FilterDef(name = "payrollRunAssignedToMeFilterAgRn", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class), @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "payrollRunAssignedToMeFilterUnRn", parameters = { @ParamDef(name = "assigneeUserName", type = String.class), @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "payrollRunAssignedToMeFilterAg", parameters = { @ParamDef(name = "assigneeGroupName", type = String.class) }), @FilterDef(name = "payrollRunAssignedToMeFilterAu", parameters = { @ParamDef(name = "assigneeUserName", type = String.class) }), @FilterDef(name = "payrollRunAssignedToMeFilterRn", parameters = { @ParamDef(name = "roleName", type = String.class) }), @FilterDef(name = "payrollRunEndDateGtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "payrollRunEndDateLtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "payrollRunEndDateBwFilter", parameters = { @ParamDef(name = "endDate_MIN", type = String.class), @ParamDef(name = "endDate_MAX", type = String.class) }), @FilterDef(name = "payrollRunIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "payrollRunIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "payrollRunIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "payrollRunIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "payrollRunIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "payrollRunIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "payrollRunIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "payrollRunIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "payrollRunIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "payrollRunRunDateGtFilter", parameters = { @ParamDef(name = "runDate", type = String.class) }), @FilterDef(name = "payrollRunRunDateLtFilter", parameters = { @ParamDef(name = "runDate", type = String.class) }), @FilterDef(name = "payrollRunRunDateBwFilter", parameters = { @ParamDef(name = "runDate_MIN", type = String.class), @ParamDef(name = "runDate_MAX", type = String.class) }), @FilterDef(name = "payrollRunStartDateGtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "payrollRunStartDateLtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "payrollRunStartDateBwFilter", parameters = { @ParamDef(name = "startDate_MIN", type = String.class), @ParamDef(name = "startDate_MAX", type = String.class) }), @FilterDef(name = "payrollRunStatusNInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "payrollRunStatusEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "payrollRunStatusNEqFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "payrollRunStatusInFilter", parameters = { @ParamDef(name = "status", type = String.class) }), @FilterDef(name = "payrollRunProcessInstanceIdNInFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "payrollRunProcessInstanceIdEqFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "payrollRunProcessInstanceIdNEqFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "payrollRunProcessInstanceIdInFilter", parameters = { @ParamDef(name = "processInstanceId", type = String.class) }), @FilterDef(name = "payrollRunWorkflowStageNInFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }), @FilterDef(name = "payrollRunWorkflowStageEqFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }), @FilterDef(name = "payrollRunWorkflowStageNEqFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }), @FilterDef(name = "payrollRunWorkflowStageInFilter", parameters = { @ParamDef(name = "workflowStage", type = String.class) }) })
public class PayrollRun extends BaseEntitySaaS{

    @Basic
    @Column(name = "DELETED")
    private boolean deleted;

    @Basic
    @Column(name = "END_DATE", length = 19)
    private Date endDate;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(name = "RUN_DATE", length = 19)
    private Date runDate;

    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @OneToMany(targetEntity = com.nouros.payrollmanagement.model.EmployeeMonthlySalary.class, mappedBy = "payrollRun", cascade = CascadeType.MERGE)
    private Set<EmployeeMonthlySalary> employeeMonthlySalary = new HashSet<>();

    @Basic
    @Column(name = "START_DATE", length = 19)
    private Date startDate;
    
    @Basic
    @Column(name = "DURATION_DAY_COUNT")
    private Integer durationDayCount;

    @Basic
    @Column(name = "REFERENCE_ID")
    private String referenceId;  
    
    @Basic
    @Column(name = "REMARK1")
    private String remark1;
    
    @Basic
    @Column(name = "REMARK2")
    private String remark2;
    
    @Basic
    @Column(name = "REMARK3")
    private String remark3;
    
    @Basic
    @Column(name = "REMARK4")
    private String remark4;
    
    @Basic
    @Column(name = "TOTAL_NET_SALARY")
    private Double totalNetSalary;

    @Basic
    @Column(name = "TOTAL_LAST_MONTH_SALARY")
    private Double totalLastMonthSalary;
    
    @Basic
    @Column(name = "PAYROLL_VARIANCE")
    private Double payrollVariance;  
    
    @Basic 
    @Column(name = "BASE_PATH_FOR_WPS")
    private String basePathForWPS;
    
    @Basic 
    @Column(name = "BASE_PATH_FOR_EXCEL")
    private String basePathForExcel;
    
    @Basic 
    @Column(name = "BASE_PATH_FOR_FILE")
    private String basePathForFile;
    
    @Basic
    @Column(name = "TOTAL_STI")
    private Double totalSti;

    @Basic
    @Column(name = "TOTAL_BONUS")
    private Double totalBonus;
    
    @Basic
    @Column(name = "TOTAL_OTHER_EARNING")
    private Double totalOtherEarning;

    @Basic
    @Column(name = "TOTAL_OTHER_DEDUCTION")
    private Double totalOtherDeduction;
    
    @Basic
    @Column(name = "TOTAL_GROSS_SALARY")
    private Double totalGrossSalary;
    
    @Basic
    @Column(name = "TOTAL_ALLOWANCES")
    private Double totalAllowances;
    
    @Basic
    @Column(name = "TOTAL_BASIC_SALARY")
    private Double totalBasicSalary;

	@Basic
    @Column(name = "VARIANCE_REASON")
    private String varianceReason;
    
    @Basic
    @Column(name = "VARIANCE_ACTION" , length = 50)
    private String varianceAction;
   

	public PayrollRun() {
    }

    public PayrollRun(Integer id) {
        this.id = id;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Date getRunDate() {
        return runDate;
    }

    public void setRunDate(Date runDate) {
        this.runDate = runDate;
    }

    public Set<EmployeeMonthlySalary> getEmployeeMonthlySalary() {
        return employeeMonthlySalary;
    }

    public void setEmployeeMonthlySalary(Set<EmployeeMonthlySalary> employeeMonthlySalary) {
        this.employeeMonthlySalary = employeeMonthlySalary;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Integer getDurationDayCount() {
		return durationDayCount;
	}

	public void setDurationDayCount(Integer durationDayCount) {
		this.durationDayCount = durationDayCount;
	}

	@Column(name = "PROCESS_INSTANCE_ID")
    private String processInstanceId;

    @Column(name = "WORKFLOW_STAGE")
    private String workflowStage;
    
    @Column(name = "IS_EXCEL_FILE_GENERATE")
    private boolean isExcelFileGenerated ;

    public boolean isExcelFileGenerated() {
		return isExcelFileGenerated;
	}

	public void setExcelFileGenerated(boolean isExcelFileGenerated) {
		this.isExcelFileGenerated = isExcelFileGenerated;
	}

	public String getProcessInstanceId() {
        return processInstanceId;
    }

    public void setProcessInstanceId(String processInstanceId) {
        this.processInstanceId = processInstanceId;
    }

    public String getWorkflowStage() {
        return workflowStage;
    }

    public void setWorkflowStage(String workflowStage) {
        this.workflowStage = workflowStage;
    }

    public List<WorkflowActions> getActions() {
        return ApplicationContextProvider.getApplicationContext().getBean(WorkflowActionsController.class).getWorkflowActions(id, "PayrollRun");
    }

	public String getRemark1() {
		return remark1;
	}

	public void setRemark1(String remark1) {
		this.remark1 = remark1;
	}

	public String getRemark2() {
		return remark2;
	}

	public void setRemark2(String remark2) {
		this.remark2 = remark2;
	}

	public String getRemark3() {
		return remark3;
	}

	public void setRemark3(String remark3) {
		this.remark3 = remark3;
	}

	public String getRemark4() {
		return remark4;
	}

	public void setRemark4(String remark4) {
		this.remark4 = remark4;
	}

	public Double getTotalNetSalary() {
		return totalNetSalary;
	}

	public void setTotalNetSalary(Double totalNetSalary) {
		this.totalNetSalary = totalNetSalary;
	}

	public Double getTotalGrossSalary() {
		return totalGrossSalary;
	}

	public void setTotalGrossSalary(Double totalGrossSalary) {
		this.totalGrossSalary = totalGrossSalary;
	}

	public Double getTotalLastMonthSalary() {
		return totalLastMonthSalary;
	}

	public void setTotalLastMonthSalary(Double totalLastMonthSalary) {
		this.totalLastMonthSalary = totalLastMonthSalary;
	}

	public Double getPayrollVariance() {
		return payrollVariance;
	}

	public void setPayrollVariance(Double payrollVariance) {
		this.payrollVariance = payrollVariance;
	}

	public String getReferenceId() {
		return referenceId;
	}

	public void setReferenceId(String referenceId) {
		this.referenceId = referenceId;
	}
	
	
	public String getBasePathForWPS() {
		return basePathForWPS;
	}

	public void setBasePathForWPS(String basePathForWPS) {
		this.basePathForWPS = basePathForWPS;
	}

	public String getBasePathForExcel() {
		return basePathForExcel;
	}

	public void setBasePathForExcel(String basePathForExcel) {
		this.basePathForExcel = basePathForExcel;
	}

	public String getBasePathForFile() {
		return basePathForFile;
	}

	public void setBasePathForFile(String basePathForFile) {
		this.basePathForFile = basePathForFile;
	}

	public Double getTotalSti() {
		return totalSti;
	}

	public void setTotalSti(Double totalSti) {
		this.totalSti = totalSti;
	}

	public Double getTotalBonus() {
		return totalBonus;
	}

	public void setTotalBonus(Double totalBonus) {
		this.totalBonus = totalBonus;
	}

	public Double getTotalOtherEarning() {
		return totalOtherEarning;
	}

	public void setTotalOtherEarning(Double totalOtherEarning) {
		this.totalOtherEarning = totalOtherEarning;
	}

	public Double getTotalOtherDeduction() {
		return totalOtherDeduction;
	}

	public void setTotalOtherDeduction(Double totalOtherDeduction) {
		this.totalOtherDeduction = totalOtherDeduction;
	}

	public String getVarianceReason() {
		return varianceReason;
	}

	public void setVarianceReason(String varianceReason) {
		this.varianceReason = varianceReason;
	}
	
	public String getVarianceAction() {
		return varianceAction;
	}

	public void setVarianceAction(String varianceAction) {
		this.varianceAction = varianceAction;
	}

	public Double getTotalAllowances() {
		return totalAllowances;
	}

	public void setTotalAllowances(Double totalAllowances) {
		this.totalAllowances = totalAllowances;
	}
	public Double getTotalBasicSalary() {
		return totalBasicSalary;
	}

	public void setTotalBasicSalary(Double totalBasicSalary) {
		this.totalBasicSalary = totalBasicSalary;
	}

	
}
	
	


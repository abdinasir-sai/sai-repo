package com.nouros.payrollmanagement.model;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.nouros.hrms.model.BaseEntity;
import com.nouros.hrms.model.BaseEntitySaaS;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;
/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */

@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "GRADE_META_INFO")
@Filters(value = { @Filter(name = "gradeMetaInfoGradeNInFilter", condition = "GRADE not in (:grade)"), @Filter(name = "gradeMetaInfoGradeEqFilter", condition = "GRADE = :grade"), @Filter(name = "gradeMetaInfoGradeNEqFilter", condition = "GRADE != :grade"), @Filter(name = "gradeMetaInfoGradeInFilter", condition = "GRADE in (:grade)"), @Filter(name = "gradeMetaInfoIdGtFilter", condition = "ID > :id"), @Filter(name = "gradeMetaInfoIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "gradeMetaInfoIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "gradeMetaInfoIdLtFilter", condition = "ID < :id"), @Filter(name = "gradeMetaInfoIdEqFilter", condition = "ID = :id"), @Filter(name = "gradeMetaInfoIdNEqFilter", condition = "ID != :id"), @Filter(name = "gradeMetaInfoIdInFilter", condition = "ID in (:id)"), @Filter(name = "gradeMetaInfoIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "gradeMetaInfoIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "gradeMetaInfoIdEqFilter", condition = "ID = :id"), @Filter(name = "gradeMetaInfoMaxBasicGtFilter", condition = "MAX_BASIC > :maxBasic"), @Filter(name = "gradeMetaInfoMaxBasicNInFilter", condition = "MAX_BASIC not in (:maxBasic)"), @Filter(name = "gradeMetaInfoMaxBasicLtEqFilter", condition = "MAX_BASIC <= :maxBasic"), @Filter(name = "gradeMetaInfoMaxBasicLtFilter", condition = "MAX_BASIC < :maxBasic"), @Filter(name = "gradeMetaInfoMaxBasicEqFilter", condition = "MAX_BASIC = :maxBasic"), @Filter(name = "gradeMetaInfoMaxBasicNEqFilter", condition = "MAX_BASIC != :maxBasic"), @Filter(name = "gradeMetaInfoMaxBasicInFilter", condition = "MAX_BASIC in (:maxBasic)"), @Filter(name = "gradeMetaInfoMaxBasicBwFilter", condition = "MAX_BASIC > :maxBasic_MIN  AND MAX_BASIC < :maxBasic_MAX"), @Filter(name = "gradeMetaInfoMaxBasicGtEqFilter", condition = "MAX_BASIC >= :maxBasic"), @Filter(name = "gradeMetaInfoMaxBasicEqFilter", condition = "MAX_BASIC = :maxBasic"), @Filter(name = "gradeMetaInfoMinBasicGtFilter", condition = "MIN_BASIC > :minBasic"), @Filter(name = "gradeMetaInfoMinBasicNInFilter", condition = "MIN_BASIC not in (:minBasic)"), @Filter(name = "gradeMetaInfoMinBasicLtEqFilter", condition = "MIN_BASIC <= :minBasic"), @Filter(name = "gradeMetaInfoMinBasicLtFilter", condition = "MIN_BASIC < :minBasic"), @Filter(name = "gradeMetaInfoMinBasicEqFilter", condition = "MIN_BASIC = :minBasic"), @Filter(name = "gradeMetaInfoMinBasicNEqFilter", condition = "MIN_BASIC != :minBasic"), @Filter(name = "gradeMetaInfoMinBasicInFilter", condition = "MIN_BASIC in (:minBasic)"), @Filter(name = "gradeMetaInfoMinBasicBwFilter", condition = "MIN_BASIC > :minBasic_MIN  AND MIN_BASIC < :minBasic_MAX"), @Filter(name = "gradeMetaInfoMinBasicGtEqFilter", condition = "MIN_BASIC >= :minBasic"), @Filter(name = "gradeMetaInfoMinBasicEqFilter", condition = "MIN_BASIC = :minBasic"), @Filter(name = "gradeMetaInfoStiMultiplierGtFilter", condition = "STI_MULTIPLIER > :stiMultiplier"), @Filter(name = "gradeMetaInfoStiMultiplierNInFilter", condition = "STI_MULTIPLIER not in (:stiMultiplier)"), @Filter(name = "gradeMetaInfoStiMultiplierLtEqFilter", condition = "STI_MULTIPLIER <= :stiMultiplier"), @Filter(name = "gradeMetaInfoStiMultiplierLtFilter", condition = "STI_MULTIPLIER < :stiMultiplier"), @Filter(name = "gradeMetaInfoStiMultiplierEqFilter", condition = "STI_MULTIPLIER = :stiMultiplier"), @Filter(name = "gradeMetaInfoStiMultiplierNEqFilter", condition = "STI_MULTIPLIER != :stiMultiplier"), @Filter(name = "gradeMetaInfoStiMultiplierInFilter", condition = "STI_MULTIPLIER in (:stiMultiplier)"), @Filter(name = "gradeMetaInfoStiMultiplierBwFilter", condition = "STI_MULTIPLIER > :stiMultiplier_MIN  AND STI_MULTIPLIER < :stiMultiplier_MAX"), @Filter(name = "gradeMetaInfoStiMultiplierGtEqFilter", condition = "STI_MULTIPLIER >= :stiMultiplier"), @Filter(name = "gradeMetaInfoStiMultiplierEqFilter", condition = "STI_MULTIPLIER = :stiMultiplier") })
@FilterDefs(value = { @FilterDef(name = "gradeMetaInfoGradeNInFilter", parameters = { @ParamDef(name = "grade", type = String.class) }), @FilterDef(name = "gradeMetaInfoGradeEqFilter", parameters = { @ParamDef(name = "grade", type = String.class) }), @FilterDef(name = "gradeMetaInfoGradeNEqFilter", parameters = { @ParamDef(name = "grade", type = String.class) }), @FilterDef(name = "gradeMetaInfoGradeInFilter", parameters = { @ParamDef(name = "grade", type = String.class) }), @FilterDef(name = "gradeMetaInfoIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "gradeMetaInfoIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "gradeMetaInfoIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "gradeMetaInfoIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "gradeMetaInfoIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "gradeMetaInfoIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "gradeMetaInfoIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "gradeMetaInfoIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "gradeMetaInfoIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "gradeMetaInfoMaxBasicGtFilter", parameters = { @ParamDef(name = "maxBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMaxBasicNInFilter", parameters = { @ParamDef(name = "maxBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMaxBasicLtEqFilter", parameters = { @ParamDef(name = "maxBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMaxBasicLtFilter", parameters = { @ParamDef(name = "maxBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMaxBasicEqFilter", parameters = { @ParamDef(name = "maxBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMaxBasicNEqFilter", parameters = { @ParamDef(name = "maxBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMaxBasicInFilter", parameters = { @ParamDef(name = "maxBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMaxBasicBwFilter", parameters = { @ParamDef(name = "maxBasic_MIN", type = Double.class), @ParamDef(name = "maxBasic_MAX", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMaxBasicGtEqFilter", parameters = { @ParamDef(name = "maxBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMinBasicGtFilter", parameters = { @ParamDef(name = "minBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMinBasicNInFilter", parameters = { @ParamDef(name = "minBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMinBasicLtEqFilter", parameters = { @ParamDef(name = "minBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMinBasicLtFilter", parameters = { @ParamDef(name = "minBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMinBasicEqFilter", parameters = { @ParamDef(name = "minBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMinBasicNEqFilter", parameters = { @ParamDef(name = "minBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMinBasicInFilter", parameters = { @ParamDef(name = "minBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMinBasicBwFilter", parameters = { @ParamDef(name = "minBasic_MIN", type = Double.class), @ParamDef(name = "minBasic_MAX", type = Double.class) }), @FilterDef(name = "gradeMetaInfoMinBasicGtEqFilter", parameters = { @ParamDef(name = "minBasic", type = Double.class) }), @FilterDef(name = "gradeMetaInfoStiMultiplierGtFilter", parameters = { @ParamDef(name = "stiMultiplier", type = Double.class) }), @FilterDef(name = "gradeMetaInfoStiMultiplierNInFilter", parameters = { @ParamDef(name = "stiMultiplier", type = Double.class) }), @FilterDef(name = "gradeMetaInfoStiMultiplierLtEqFilter", parameters = { @ParamDef(name = "stiMultiplier", type = Double.class) }), @FilterDef(name = "gradeMetaInfoStiMultiplierLtFilter", parameters = { @ParamDef(name = "stiMultiplier", type = Double.class) }), @FilterDef(name = "gradeMetaInfoStiMultiplierEqFilter", parameters = { @ParamDef(name = "stiMultiplier", type = Double.class) }), @FilterDef(name = "gradeMetaInfoStiMultiplierNEqFilter", parameters = { @ParamDef(name = "stiMultiplier", type = Double.class) }), @FilterDef(name = "gradeMetaInfoStiMultiplierInFilter", parameters = { @ParamDef(name = "stiMultiplier", type = Double.class) }), @FilterDef(name = "gradeMetaInfoStiMultiplierBwFilter", parameters = { @ParamDef(name = "stiMultiplier_MIN", type = Double.class), @ParamDef(name = "stiMultiplier_MAX", type = Double.class) }), @FilterDef(name = "gradeMetaInfoStiMultiplierGtEqFilter", parameters = { @ParamDef(name = "stiMultiplier", type = Double.class) }) })
public class GradeMetaInfo extends BaseEntitySaaS{

    @Basic
    private boolean deleted;

    @Size(max = 20)
    @Basic
    @Column(length = 20)
    private String grade;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Basic
    @Column(name = "MAX_BASIC")
    private Double maxBasic;

    @Basic
    @Column(name = "MIN_BASIC")
    private Double minBasic;

    @Basic
    @Column(name = "STI_MULTIPLIER")
    private Double stiMultiplier;

    public GradeMetaInfo() {
    }

    public GradeMetaInfo(Integer id) {
        this.id = id;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public String getGrade() {
        return grade;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Double getMaxBasic() {
        return maxBasic;
    }

    public void setMaxBasic(Double maxBasic) {
        this.maxBasic = maxBasic;
    }

    public Double getMinBasic() {
        return minBasic;
    }

    public void setMinBasic(Double minBasic) {
        this.minBasic = minBasic;
    }

    public Double getStiMultiplier() {
        return stiMultiplier;
    }

    public void setStiMultiplier(Double stiMultiplier) {
        this.stiMultiplier = stiMultiplier;
    }
}

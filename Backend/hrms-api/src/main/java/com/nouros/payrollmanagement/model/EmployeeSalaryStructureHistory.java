package com.nouros.payrollmanagement.model;

import java.util.Date;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.nouros.hrms.model.BaseEntitySaaS;
import com.nouros.hrms.model.Employee;
import com.nouros.payrollmanagement.model.EmployeeSalaryStructure.EmployeeMobileType;
import com.nouros.payrollmanagement.model.EmployeeSalaryStructure.FrequencyType;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */

@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "EMPLOYEE_SALARY_STRUCTURE_HISTORY")
//@Filters(value = { @Filter(name = "employeeSalaryStructureHistoryBasicSalaryGtFilter", condition = "BASIC_SALARY > :basicSalary"), @Filter(name = "employeeSalaryStructureHistoryBasicSalaryNInFilter", condition = "BASIC_SALARY not in (:basicSalary)"), @Filter(name = "employeeSalaryStructureHistoryBasicSalaryLtEqFilter", condition = "BASIC_SALARY <= :basicSalary"), @Filter(name = "employeeSalaryStructureHistoryBasicSalaryLtFilter", condition = "BASIC_SALARY < :basicSalary"), @Filter(name = "employeeSalaryStructureHistoryBasicSalaryEqFilter", condition = "BASIC_SALARY = :basicSalary"), @Filter(name = "employeeSalaryStructureHistoryBasicSalaryNEqFilter", condition = "BASIC_SALARY != :basicSalary"), @Filter(name = "employeeSalaryStructureHistoryBasicSalaryInFilter", condition = "BASIC_SALARY in (:basicSalary)"), @Filter(name = "employeeSalaryStructureHistoryBasicSalaryBwFilter", condition = "BASIC_SALARY > :basicSalary_MIN  AND BASIC_SALARY < :basicSalary_MAX"), @Filter(name = "employeeSalaryStructureHistoryBasicSalaryGtEqFilter", condition = "BASIC_SALARY >= :basicSalary"), @Filter(name = "employeeSalaryStructureHistoryBasicSalaryEqFilter", condition = "BASIC_SALARY = :basicSalary"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsGtFilter", condition = "CRITICAL_SKILLS > :criticalSkills"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsNInFilter", condition = "CRITICAL_SKILLS not in (:criticalSkills)"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsLtEqFilter", condition = "CRITICAL_SKILLS <= :criticalSkills"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsLtFilter", condition = "CRITICAL_SKILLS < :criticalSkills"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsEqFilter", condition = "CRITICAL_SKILLS = :criticalSkills"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsNEqFilter", condition = "CRITICAL_SKILLS != :criticalSkills"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsInFilter", condition = "CRITICAL_SKILLS in (:criticalSkills)"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsBwFilter", condition = "CRITICAL_SKILLS > :criticalSkills_MIN  AND CRITICAL_SKILLS < :criticalSkills_MAX"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsGtEqFilter", condition = "CRITICAL_SKILLS >= :criticalSkills"), @Filter(name = "employeeSalaryStructureHistoryCriticalSkillsEqFilter", condition = "CRITICAL_SKILLS = :criticalSkills"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkGtFilter", condition = "EMPOLYEE_PK > :empolyeePk"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkNInFilter", condition = "EMPOLYEE_PK not in (:empolyeePk)"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkLtEqFilter", condition = "EMPOLYEE_PK <= :empolyeePk"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkLtFilter", condition = "EMPOLYEE_PK < :empolyeePk"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkEqFilter", condition = "EMPOLYEE_PK = :empolyeePk"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkNEqFilter", condition = "EMPOLYEE_PK != :empolyeePk"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkInFilter", condition = "EMPOLYEE_PK in (:empolyeePk)"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkBwFilter", condition = "EMPOLYEE_PK > :empolyeePk_MIN  AND EMPOLYEE_PK < :empolyeePk_MAX"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkGtEqFilter", condition = "EMPOLYEE_PK >= :empolyeePk"), @Filter(name = "employeeSalaryStructureHistoryEmpolyeePkEqFilter", condition = "EMPOLYEE_PK = :empolyeePk"), @Filter(name = "employeeSalaryStructureHistoryEndDateGtFilter", condition = "END_DATE > (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryEndDateLtFilter", condition = "END_DATE < (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryEndDateBwFilter", condition = "END_DATE >(SELECT DATE_FORMAT(:endDate_MIN, '%Y-%m-%d')) AND END_DATE <(SELECT DATE_FORMAT(:endDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryHraGtFilter", condition = "HRA > :hra"), @Filter(name = "employeeSalaryStructureHistoryHraNInFilter", condition = "HRA not in (:hra)"), @Filter(name = "employeeSalaryStructureHistoryHraLtEqFilter", condition = "HRA <= :hra"), @Filter(name = "employeeSalaryStructureHistoryHraLtFilter", condition = "HRA < :hra"), @Filter(name = "employeeSalaryStructureHistoryHraEqFilter", condition = "HRA = :hra"), @Filter(name = "employeeSalaryStructureHistoryHraNEqFilter", condition = "HRA != :hra"), @Filter(name = "employeeSalaryStructureHistoryHraInFilter", condition = "HRA in (:hra)"), @Filter(name = "employeeSalaryStructureHistoryHraBwFilter", condition = "HRA > :hra_MIN  AND HRA < :hra_MAX"), @Filter(name = "employeeSalaryStructureHistoryHraGtEqFilter", condition = "HRA >= :hra"), @Filter(name = "employeeSalaryStructureHistoryHraEqFilter", condition = "HRA = :hra"), @Filter(name = "employeeSalaryStructureHistoryIdGtFilter", condition = "ID > :id"), @Filter(name = "employeeSalaryStructureHistoryIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "employeeSalaryStructureHistoryIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "employeeSalaryStructureHistoryIdLtFilter", condition = "ID < :id"), @Filter(name = "employeeSalaryStructureHistoryIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeSalaryStructureHistoryIdNEqFilter", condition = "ID != :id"), @Filter(name = "employeeSalaryStructureHistoryIdInFilter", condition = "ID in (:id)"), @Filter(name = "employeeSalaryStructureHistoryIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "employeeSalaryStructureHistoryIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "employeeSalaryStructureHistoryIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeSalaryStructureHistoryLocalCurrencyNInFilter", condition = "LOCAL_CURRENCY not in (:localCurrency)"), @Filter(name = "employeeSalaryStructureHistoryLocalCurrencyEqFilter", condition = "LOCAL_CURRENCY = :localCurrency"), @Filter(name = "employeeSalaryStructureHistoryLocalCurrencyNEqFilter", condition = "LOCAL_CURRENCY != :localCurrency"), @Filter(name = "employeeSalaryStructureHistoryLocalCurrencyInFilter", condition = "LOCAL_CURRENCY in (:localCurrency)"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceGtFilter", condition = "MOBILE_ALLOWANCE > :mobileAllowance"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceNInFilter", condition = "MOBILE_ALLOWANCE not in (:mobileAllowance)"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceLtEqFilter", condition = "MOBILE_ALLOWANCE <= :mobileAllowance"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceLtFilter", condition = "MOBILE_ALLOWANCE < :mobileAllowance"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceEqFilter", condition = "MOBILE_ALLOWANCE = :mobileAllowance"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceNEqFilter", condition = "MOBILE_ALLOWANCE != :mobileAllowance"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceInFilter", condition = "MOBILE_ALLOWANCE in (:mobileAllowance)"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceBwFilter", condition = "MOBILE_ALLOWANCE > :mobileAllowance_MIN  AND MOBILE_ALLOWANCE < :mobileAllowance_MAX"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceGtEqFilter", condition = "MOBILE_ALLOWANCE >= :mobileAllowance"), @Filter(name = "employeeSalaryStructureHistoryMobileAllowanceEqFilter", condition = "MOBILE_ALLOWANCE = :mobileAllowance"), @Filter(name = "employeeSalaryStructureHistoryOverbaseGtFilter", condition = "OVERBASE > :overbase"), @Filter(name = "employeeSalaryStructureHistoryOverbaseNInFilter", condition = "OVERBASE not in (:overbase)"), @Filter(name = "employeeSalaryStructureHistoryOverbaseLtEqFilter", condition = "OVERBASE <= :overbase"), @Filter(name = "employeeSalaryStructureHistoryOverbaseLtFilter", condition = "OVERBASE < :overbase"), @Filter(name = "employeeSalaryStructureHistoryOverbaseEqFilter", condition = "OVERBASE = :overbase"), @Filter(name = "employeeSalaryStructureHistoryOverbaseNEqFilter", condition = "OVERBASE != :overbase"), @Filter(name = "employeeSalaryStructureHistoryOverbaseInFilter", condition = "OVERBASE in (:overbase)"), @Filter(name = "employeeSalaryStructureHistoryOverbaseBwFilter", condition = "OVERBASE > :overbase_MIN  AND OVERBASE < :overbase_MAX"), @Filter(name = "employeeSalaryStructureHistoryOverbaseGtEqFilter", condition = "OVERBASE >= :overbase"), @Filter(name = "employeeSalaryStructureHistoryOverbaseEqFilter", condition = "OVERBASE = :overbase"), @Filter(name = "employeeSalaryStructureHistoryOvertimeGtFilter", condition = "OVERTIME > :overtime"), @Filter(name = "employeeSalaryStructureHistoryOvertimeNInFilter", condition = "OVERTIME not in (:overtime)"), @Filter(name = "employeeSalaryStructureHistoryOvertimeLtEqFilter", condition = "OVERTIME <= :overtime"), @Filter(name = "employeeSalaryStructureHistoryOvertimeLtFilter", condition = "OVERTIME < :overtime"), @Filter(name = "employeeSalaryStructureHistoryOvertimeEqFilter", condition = "OVERTIME = :overtime"), @Filter(name = "employeeSalaryStructureHistoryOvertimeNEqFilter", condition = "OVERTIME != :overtime"), @Filter(name = "employeeSalaryStructureHistoryOvertimeInFilter", condition = "OVERTIME in (:overtime)"), @Filter(name = "employeeSalaryStructureHistoryOvertimeBwFilter", condition = "OVERTIME > :overtime_MIN  AND OVERTIME < :overtime_MAX"), @Filter(name = "employeeSalaryStructureHistoryOvertimeGtEqFilter", condition = "OVERTIME >= :overtime"), @Filter(name = "employeeSalaryStructureHistoryOvertimeEqFilter", condition = "OVERTIME = :overtime"), @Filter(name = "employeeSalaryStructureHistoryPayFrequencyNInFilter", condition = "PAY_FREQUENCY not in (:payFrequency)"), @Filter(name = "employeeSalaryStructureHistoryPayFrequencyEqFilter", condition = "PAY_FREQUENCY = :payFrequency"), @Filter(name = "employeeSalaryStructureHistoryPayFrequencyNEqFilter", condition = "PAY_FREQUENCY != :payFrequency"), @Filter(name = "employeeSalaryStructureHistoryPayFrequencyInFilter", condition = "PAY_FREQUENCY in (:payFrequency)"), @Filter(name = "employeeSalaryStructureHistoryPayRateNInFilter", condition = "PAY_RATE not in (:payRate)"), @Filter(name = "employeeSalaryStructureHistoryPayRateEqFilter", condition = "PAY_RATE = :payRate"), @Filter(name = "employeeSalaryStructureHistoryPayRateNEqFilter", condition = "PAY_RATE != :payRate"), @Filter(name = "employeeSalaryStructureHistoryPayRateInFilter", condition = "PAY_RATE in (:payRate)"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceGtFilter", condition = "RELOCATION_ALLOWANCE > :relocationAllowance"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceNInFilter", condition = "RELOCATION_ALLOWANCE not in (:relocationAllowance)"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceLtEqFilter", condition = "RELOCATION_ALLOWANCE <= :relocationAllowance"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceLtFilter", condition = "RELOCATION_ALLOWANCE < :relocationAllowance"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceEqFilter", condition = "RELOCATION_ALLOWANCE = :relocationAllowance"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceNEqFilter", condition = "RELOCATION_ALLOWANCE != :relocationAllowance"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceInFilter", condition = "RELOCATION_ALLOWANCE in (:relocationAllowance)"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceBwFilter", condition = "RELOCATION_ALLOWANCE > :relocationAllowance_MIN  AND RELOCATION_ALLOWANCE < :relocationAllowance_MAX"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceGtEqFilter", condition = "RELOCATION_ALLOWANCE >= :relocationAllowance"), @Filter(name = "employeeSalaryStructureHistoryRelocationAllowanceEqFilter", condition = "RELOCATION_ALLOWANCE = :relocationAllowance"), @Filter(name = "employeeSalaryStructureHistoryRelocationDateGtFilter", condition = "RELOCATION_DATE > (SELECT DATE_FORMAT(:relocationDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryRelocationDateLtFilter", condition = "RELOCATION_DATE < (SELECT DATE_FORMAT(:relocationDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryRelocationDateBwFilter", condition = "RELOCATION_DATE >(SELECT DATE_FORMAT(:relocationDate_MIN, '%Y-%m-%d')) AND RELOCATION_DATE <(SELECT DATE_FORMAT(:relocationDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusGtFilter", condition = "SIGN_UP_BONUS > :signUpBonus"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusNInFilter", condition = "SIGN_UP_BONUS not in (:signUpBonus)"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusLtEqFilter", condition = "SIGN_UP_BONUS <= :signUpBonus"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusLtFilter", condition = "SIGN_UP_BONUS < :signUpBonus"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusEqFilter", condition = "SIGN_UP_BONUS = :signUpBonus"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusNEqFilter", condition = "SIGN_UP_BONUS != :signUpBonus"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusInFilter", condition = "SIGN_UP_BONUS in (:signUpBonus)"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusBwFilter", condition = "SIGN_UP_BONUS > :signUpBonus_MIN  AND SIGN_UP_BONUS < :signUpBonus_MAX"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusGtEqFilter", condition = "SIGN_UP_BONUS >= :signUpBonus"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusEqFilter", condition = "SIGN_UP_BONUS = :signUpBonus"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusDateGtFilter", condition = "SIGN_UP_BONUS_DATE > (SELECT DATE_FORMAT(:signUpBonusDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusDateLtFilter", condition = "SIGN_UP_BONUS_DATE < (SELECT DATE_FORMAT(:signUpBonusDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistorySignUpBonusDateBwFilter", condition = "SIGN_UP_BONUS_DATE >(SELECT DATE_FORMAT(:signUpBonusDate_MIN, '%Y-%m-%d')) AND SIGN_UP_BONUS_DATE <(SELECT DATE_FORMAT(:signUpBonusDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryStartDateGtFilter", condition = "START_DATE > (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryStartDateLtFilter", condition = "START_DATE < (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryStartDateBwFilter", condition = "START_DATE >(SELECT DATE_FORMAT(:startDate_MIN, '%Y-%m-%d')) AND START_DATE <(SELECT DATE_FORMAT(:startDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryStiGtFilter", condition = "STI > :sti"), @Filter(name = "employeeSalaryStructureHistoryStiNInFilter", condition = "STI not in (:sti)"), @Filter(name = "employeeSalaryStructureHistoryStiLtEqFilter", condition = "STI <= :sti"), @Filter(name = "employeeSalaryStructureHistoryStiLtFilter", condition = "STI < :sti"), @Filter(name = "employeeSalaryStructureHistoryStiEqFilter", condition = "STI = :sti"), @Filter(name = "employeeSalaryStructureHistoryStiNEqFilter", condition = "STI != :sti"), @Filter(name = "employeeSalaryStructureHistoryStiInFilter", condition = "STI in (:sti)"), @Filter(name = "employeeSalaryStructureHistoryStiBwFilter", condition = "STI > :sti_MIN  AND STI < :sti_MAX"), @Filter(name = "employeeSalaryStructureHistoryStiGtEqFilter", condition = "STI >= :sti"), @Filter(name = "employeeSalaryStructureHistoryStiEqFilter", condition = "STI = :sti"), @Filter(name = "employeeSalaryStructureHistoryStiDateGtFilter", condition = "STI_DATE > (SELECT DATE_FORMAT(:stiDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryStiDateLtFilter", condition = "STI_DATE < (SELECT DATE_FORMAT(:stiDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryStiDateBwFilter", condition = "STI_DATE >(SELECT DATE_FORMAT(:stiDate_MIN, '%Y-%m-%d')) AND STI_DATE <(SELECT DATE_FORMAT(:stiDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHistoryTaGtFilter", condition = "TA > :ta"), @Filter(name = "employeeSalaryStructureHistoryTaNInFilter", condition = "TA not in (:ta)"), @Filter(name = "employeeSalaryStructureHistoryTaLtEqFilter", condition = "TA <= :ta"), @Filter(name = "employeeSalaryStructureHistoryTaLtFilter", condition = "TA < :ta"), @Filter(name = "employeeSalaryStructureHistoryTaEqFilter", condition = "TA = :ta"), @Filter(name = "employeeSalaryStructureHistoryTaNEqFilter", condition = "TA != :ta"), @Filter(name = "employeeSalaryStructureHistoryTaInFilter", condition = "TA in (:ta)"), @Filter(name = "employeeSalaryStructureHistoryTaBwFilter", condition = "TA > :ta_MIN  AND TA < :ta_MAX"), @Filter(name = "employeeSalaryStructureHistoryTaGtEqFilter", condition = "TA >= :ta"), @Filter(name = "employeeSalaryStructureHistoryTaEqFilter", condition = "TA = :ta") })
//@FilterDefs(value = { @FilterDef(name = "employeeSalaryStructureHistoryBasicSalaryGtFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryBasicSalaryNInFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryBasicSalaryLtEqFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryBasicSalaryLtFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryBasicSalaryEqFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryBasicSalaryNEqFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryBasicSalaryInFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryBasicSalaryBwFilter", parameters = { @ParamDef(name = "basicSalary_MIN", type = Double.class), @ParamDef(name = "basicSalary_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryBasicSalaryGtEqFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryCriticalSkillsGtFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryCriticalSkillsNInFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryCriticalSkillsLtEqFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryCriticalSkillsLtFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryCriticalSkillsEqFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryCriticalSkillsNEqFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryCriticalSkillsInFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryCriticalSkillsBwFilter", parameters = { @ParamDef(name = "criticalSkills_MIN", type = Double.class), @ParamDef(name = "criticalSkills_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryCriticalSkillsGtEqFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEmpolyeePkGtFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEmpolyeePkNInFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEmpolyeePkLtEqFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEmpolyeePkLtFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEmpolyeePkEqFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEmpolyeePkNEqFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEmpolyeePkInFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEmpolyeePkBwFilter", parameters = { @ParamDef(name = "empolyeePk_MIN", type = Integer.class), @ParamDef(name = "empolyeePk_MAX", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEmpolyeePkGtEqFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEndDateGtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEndDateLtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryEndDateBwFilter", parameters = { @ParamDef(name = "endDate_MIN", type = String.class), @ParamDef(name = "endDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryHraGtFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryHraNInFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryHraLtEqFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryHraLtFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryHraEqFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryHraNEqFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryHraInFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryHraBwFilter", parameters = { @ParamDef(name = "hra_MIN", type = Double.class), @ParamDef(name = "hra_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryHraGtEqFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureHistoryLocalCurrencyNInFilter", parameters = { @ParamDef(name = "localCurrency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryLocalCurrencyEqFilter", parameters = { @ParamDef(name = "localCurrency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryLocalCurrencyNEqFilter", parameters = { @ParamDef(name = "localCurrency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryLocalCurrencyInFilter", parameters = { @ParamDef(name = "localCurrency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryMobileAllowanceGtFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryMobileAllowanceNInFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryMobileAllowanceLtEqFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryMobileAllowanceLtFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryMobileAllowanceEqFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryMobileAllowanceNEqFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryMobileAllowanceInFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryMobileAllowanceBwFilter", parameters = { @ParamDef(name = "mobileAllowance_MIN", type = Double.class), @ParamDef(name = "mobileAllowance_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryMobileAllowanceGtEqFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOverbaseGtFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOverbaseNInFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOverbaseLtEqFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOverbaseLtFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOverbaseEqFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOverbaseNEqFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOverbaseInFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOverbaseBwFilter", parameters = { @ParamDef(name = "overbase_MIN", type = Double.class), @ParamDef(name = "overbase_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOverbaseGtEqFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOvertimeGtFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOvertimeNInFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOvertimeLtEqFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOvertimeLtFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOvertimeEqFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOvertimeNEqFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOvertimeInFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOvertimeBwFilter", parameters = { @ParamDef(name = "overtime_MIN", type = Double.class), @ParamDef(name = "overtime_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryOvertimeGtEqFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryPayFrequencyNInFilter", parameters = { @ParamDef(name = "payFrequency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryPayFrequencyEqFilter", parameters = { @ParamDef(name = "payFrequency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryPayFrequencyNEqFilter", parameters = { @ParamDef(name = "payFrequency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryPayFrequencyInFilter", parameters = { @ParamDef(name = "payFrequency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryPayRateNInFilter", parameters = { @ParamDef(name = "payRate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryPayRateEqFilter", parameters = { @ParamDef(name = "payRate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryPayRateNEqFilter", parameters = { @ParamDef(name = "payRate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryPayRateInFilter", parameters = { @ParamDef(name = "payRate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationAllowanceGtFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationAllowanceNInFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationAllowanceLtEqFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationAllowanceLtFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationAllowanceEqFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationAllowanceNEqFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationAllowanceInFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationAllowanceBwFilter", parameters = { @ParamDef(name = "relocationAllowance_MIN", type = Double.class), @ParamDef(name = "relocationAllowance_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationAllowanceGtEqFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationDateGtFilter", parameters = { @ParamDef(name = "relocationDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationDateLtFilter", parameters = { @ParamDef(name = "relocationDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryRelocationDateBwFilter", parameters = { @ParamDef(name = "relocationDate_MIN", type = String.class), @ParamDef(name = "relocationDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusGtFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusNInFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusLtEqFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusLtFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusEqFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusNEqFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusInFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusBwFilter", parameters = { @ParamDef(name = "signUpBonus_MIN", type = Double.class), @ParamDef(name = "signUpBonus_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusGtEqFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusDateGtFilter", parameters = { @ParamDef(name = "signUpBonusDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusDateLtFilter", parameters = { @ParamDef(name = "signUpBonusDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistorySignUpBonusDateBwFilter", parameters = { @ParamDef(name = "signUpBonusDate_MIN", type = String.class), @ParamDef(name = "signUpBonusDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStartDateGtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStartDateLtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStartDateBwFilter", parameters = { @ParamDef(name = "startDate_MIN", type = String.class), @ParamDef(name = "startDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiGtFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiNInFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiLtEqFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiLtFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiEqFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiNEqFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiInFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiBwFilter", parameters = { @ParamDef(name = "sti_MIN", type = Double.class), @ParamDef(name = "sti_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiGtEqFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiDateGtFilter", parameters = { @ParamDef(name = "stiDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiDateLtFilter", parameters = { @ParamDef(name = "stiDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryStiDateBwFilter", parameters = { @ParamDef(name = "stiDate_MIN", type = String.class), @ParamDef(name = "stiDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHistoryTaGtFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryTaNInFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryTaLtEqFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryTaLtFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryTaEqFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryTaNEqFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryTaInFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryTaBwFilter", parameters = { @ParamDef(name = "ta_MIN", type = Double.class), @ParamDef(name = "ta_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHistoryTaGtEqFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }) })
@Filters( value = {
@Filter(name = "employeeSalaryStructureHistoryEmployeeUseridPkInFilter", condition = "EMPLOYEE_PK IN (select e.ID FROM EMPLOYEE e WHERE e.USERID_PK=:useridPk)"),
@Filter(name = "employeeSalaryStructureHistoryEmployeeDepartmentInFilter", condition = "EMPLOYEE_PK IN ( SELECT e.ID FROM EMPLOYEE e where e.DEPARTMENT_ID IN (SELECT d.ID FROM DEPARTMENT d WHERE d.NAME IN ( :department)))"),
@Filter(name = "employeeSalaryStructureHistoryEmployeeFullNameInFilter", condition = "EMPLOYEE_PK IN (select e.ID FROM EMPLOYEE e WHERE e.FULL_NAME = :fullName)")})
@FilterDefs(value = {
@FilterDef(name = "employeeSalaryStructureHistoryEmployeeUseridPkInFilter", parameters = @ParamDef(name = "useridPk", type = Integer.class)),
@FilterDef(name = "employeeSalaryStructureHistoryEmployeeDepartmentInFilter", parameters = @ParamDef(name = "department", type = String.class)),
@FilterDef(name = "employeeSalaryStructureHistoryEmployeeFullNameInFilter", parameters = @ParamDef(name = "fullName", type = String.class))})
public class EmployeeSalaryStructureHistory extends BaseEntitySaaS{

    @Basic
    @Column(name = "BASIC_SALARY")
    private Double basicSalary;

    @Basic
    @Column(name = "CRITICAL_SKILLS")
    private Double criticalSkills;

    @Basic
    @Column(name = "DELETED")
    private boolean deleted;

    
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "EMPLOYEE_PK", columnDefinition = "INT")
    private Employee employee;

    @Basic
    @Column(name = "END_DATE", length = 19)
    private Date endDate;

    @Basic
    private Double hra;

    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 10)
    @Basic
    @Column(name = "LOCAL_CURRENCY", length = 10)
    private String localCurrency;

    @Basic
    @Column(name = "MOBILE_ALLOWANCE")
    private Double mobileAllowance;

    @Basic
    private Double overbase;

    @Basic
    private Double overtime;
   
    @Basic
    @Column(name = "PAY_FREQUENCY")
    @Enumerated(EnumType.STRING)
    private FrequencyType payFrequency;

    
    @Basic
    @Column(name = "PAY_RATE")
    private Double payRate;

    @Basic
    @Column(name = "EMPLOYEE_MOBILE_FLAG")
    @Enumerated(EnumType.STRING)
    private EmployeeMobileType employeeMobileFlag;

    @Basic
    @Column(name = "NEGO_PCT_OVERBASE")
    private Double negoPctOverbase ;

    @Basic
    @Column(name = "NEGO_PCT_CRITICAL")
    private Double negoPctCritical;
    
    @Basic
    @Column(name = "GROSS_SALARY")
    private Double grossSalary;
    
    @Basic
    @Column(name = "RELOCATION_ALLOWANCE")
    private Double relocationAllowance;

    @Basic
    @Column(name = "RELOCATION_DATE", length = 19)
    private Date relocationDate;

    @Basic
    @Column(name = "SIGN_UP_BONUS")
    private Double signUpBonus;

    @Basic
    @Column(name = "SIGN_UP_BONUS_DATE", length = 19)
    private Date signUpBonusDate;

    @Basic
    @Column(name = "START_DATE", length = 19)
    private Date startDate;

    @Basic
    private Double sti;

    @Basic
    @Column(name = "STI_DATE", length = 19)
    private Date stiDate;

    @Basic
    private Double ta;
    
    
    @Basic
    @Column(name = "YEARLY_BASIC_SALARY")
    private Double yearlyBasicSalary;
    
    @Basic
    @Column(name = "YEARLY_CRITICAL_SKILLS")
    private Double yearlyCriticalSkills;
    
    @Basic
    @Column(name = "YEARLY_OVERBASE")
    private Double yearlyOverbase;
    
    @Basic
    @Column(name = "YEARLY_HRA")
    private Double yearlyHra;
    
    @Basic
    @Column(name = "YEARLY_TA")
    private Double yearlyTa;
    
    @Basic
    @Column(name = "YEARLY_MOBILE_ALLOWANCE")
    private Double yearlyMobileAllowance;
    
    @Basic
    @Column(name = "YEARLY_GROSS_SALARY")
    private Double yearlyGrossSalary;
    
    
    @Basic
	@Column(name = "BOARD_MEMBER_AMOUNT")
	private Double boardMemberAmount;

    public Double getBoardMemberAmount() {
		return boardMemberAmount;
	}

	public void setBoardMemberAmount(Double boardMemberAmount) {
		this.boardMemberAmount = boardMemberAmount;
	}

	public EmployeeSalaryStructureHistory() {
    }

    public EmployeeSalaryStructureHistory(Integer id) {
        this.id = id;
    }

    public Double getBasicSalary() {
        return basicSalary;
    }

    public void setBasicSalary(Double basicSalary) {
        this.basicSalary = basicSalary;
    }

    public Double getCriticalSkills() {
        return criticalSkills;
    }

    public void setCriticalSkills(Double criticalSkills) {
        this.criticalSkills = criticalSkills;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Employee getEmployee() {
        return employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public Double getHra() {
        return hra;
    }

    public void setHra(Double hra) {
        this.hra = hra;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLocalCurrency() {
        return localCurrency;
    }

    public void setLocalCurrency(String localCurrency) {
        this.localCurrency = localCurrency;
    }

    public Double getMobileAllowance() {
        return mobileAllowance;
    }

    public void setMobileAllowance(Double mobileAllowance) {
        this.mobileAllowance = mobileAllowance;
    }

    public Double getOverbase() {
        return overbase;
    }

    public void setOverbase(Double overbase) {
        this.overbase = overbase;
    }

    public Double getOvertime() {
        return overtime;
    }

    public void setOvertime(Double overtime) {
        this.overtime = overtime;
    }

    public FrequencyType getPayFrequency() {
        return payFrequency;
    }

    public void setPayFrequency(FrequencyType payFrequency) {
        this.payFrequency = payFrequency;
    }

    public Double getPayRate() {
        return payRate;
    }

    public void setPayRate(Double payRate) {
        this.payRate = payRate;
    }

    public Double getRelocationAllowance() {
        return relocationAllowance;
    }

    public void setRelocationAllowance(Double relocationAllowance) {
        this.relocationAllowance = relocationAllowance;
    }

    public Date getRelocationDate() {
        return relocationDate;
    }

    public void setRelocationDate(Date relocationDate) {
        this.relocationDate = relocationDate;
    }

    public Double getSignUpBonus() {
        return signUpBonus;
    }

    public void setSignUpBonus(Double signUpBonus) {
        this.signUpBonus = signUpBonus;
    }

    public Date getSignUpBonusDate() {
        return signUpBonusDate;
    }

    public void setSignUpBonusDate(Date signUpBonusDate) {
        this.signUpBonusDate = signUpBonusDate;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Double getSti() {
        return sti;
    }

    public void setSti(Double sti) {
        this.sti = sti;
    }

    public Date getStiDate() {
        return stiDate;
    }

    public void setStiDate(Date stiDate) {
        this.stiDate = stiDate;
    }

    public Double getTa() {
        return ta;
    }

    public void setTa(Double ta) {
        this.ta = ta;
    }

	public Double getNegoPctOverbase() {
		return negoPctOverbase;
	}

	public void setNegoPctOverbase(Double negoPctOverbase) {
		this.negoPctOverbase = negoPctOverbase;
	}

	public Double getNegoPctCritical() {
		return negoPctCritical;
	}

	public void setNegoPctCritical(Double negoPctCritical) {
		this.negoPctCritical = negoPctCritical;
	}

	public EmployeeMobileType getEmployeeMobileFlag() {
		return employeeMobileFlag;
	}

	public void setEmployeeMobileFlag(EmployeeMobileType employeeMobileFlag) {
		this.employeeMobileFlag = employeeMobileFlag;
	}

	public Double getGrossSalary() {
		return grossSalary;
	}

	public void setGrossSalary(Double grossSalary) {
		this.grossSalary = grossSalary;
	}

	public Double getYearlyBasicSalary() {
		return yearlyBasicSalary;
	}

	public void setYearlyBasicSalary(Double yearlyBasicSalary) {
		this.yearlyBasicSalary = yearlyBasicSalary;
	}

	public Double getYearlyCriticalSkills() {
		return yearlyCriticalSkills;
	}

	public void setYearlyCriticalSkills(Double yearlyCriticalSkills) {
		this.yearlyCriticalSkills = yearlyCriticalSkills;
	}

	public Double getYearlyHra() {
		return yearlyHra;
	}

	public void setYearlyHra(Double yearlyHra) {
		this.yearlyHra = yearlyHra;
	}

	public Double getYearlyTa() {
		return yearlyTa;
	}

	public void setYearlyTa(Double yearlyTa) {
		this.yearlyTa = yearlyTa;
	}

	public Double getYearlyMobileAllowance() {
		return yearlyMobileAllowance;
	}

	public void setYearlyMobileAllowance(Double yearlyMobileAllowance) {
		this.yearlyMobileAllowance = yearlyMobileAllowance;
	}

	public Double getYearlyGrossSalary() {
		return yearlyGrossSalary;
	}

	public void setYearlyGrossSalary(Double yearlyGrossSalary) {
		this.yearlyGrossSalary = yearlyGrossSalary;
	}

	public Double getYearlyOverbase() {
		return yearlyOverbase;
	}

	public void setYearlyOverbase(Double yearlyOverbase) {
		this.yearlyOverbase = yearlyOverbase;
	}
	

    
}

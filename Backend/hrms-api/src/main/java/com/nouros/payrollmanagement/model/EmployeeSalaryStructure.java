package com.nouros.payrollmanagement.model;

import java.util.Date;

import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.nouros.hrms.model.BaseEntitySaaS;
import com.nouros.hrms.model.Employee;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;
/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */

@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })
@Entity
@Table(name = "EMPLOYEE_SALARY_STRUCTURE")
//@Filters(value = { @Filter(name = "employeeSalaryStructureBasicSalaryGtFilter", condition = "BASIC_SALARY > :basicSalary"), @Filter(name = "employeeSalaryStructureBasicSalaryNInFilter", condition = "BASIC_SALARY not in (:basicSalary)"), @Filter(name = "employeeSalaryStructureBasicSalaryLtEqFilter", condition = "BASIC_SALARY <= :basicSalary"), @Filter(name = "employeeSalaryStructureBasicSalaryLtFilter", condition = "BASIC_SALARY < :basicSalary"), @Filter(name = "employeeSalaryStructureBasicSalaryEqFilter", condition = "BASIC_SALARY = :basicSalary"), @Filter(name = "employeeSalaryStructureBasicSalaryNEqFilter", condition = "BASIC_SALARY != :basicSalary"), @Filter(name = "employeeSalaryStructureBasicSalaryInFilter", condition = "BASIC_SALARY in (:basicSalary)"), @Filter(name = "employeeSalaryStructureBasicSalaryBwFilter", condition = "BASIC_SALARY > :basicSalary_MIN  AND BASIC_SALARY < :basicSalary_MAX"), @Filter(name = "employeeSalaryStructureBasicSalaryGtEqFilter", condition = "BASIC_SALARY >= :basicSalary"), @Filter(name = "employeeSalaryStructureBasicSalaryEqFilter", condition = "BASIC_SALARY = :basicSalary"), @Filter(name = "employeeSalaryStructureCriticalSkillsGtFilter", condition = "CRITICAL_SKILLS > :criticalSkills"), @Filter(name = "employeeSalaryStructureCriticalSkillsNInFilter", condition = "CRITICAL_SKILLS not in (:criticalSkills)"), @Filter(name = "employeeSalaryStructureCriticalSkillsLtEqFilter", condition = "CRITICAL_SKILLS <= :criticalSkills"), @Filter(name = "employeeSalaryStructureCriticalSkillsLtFilter", condition = "CRITICAL_SKILLS < :criticalSkills"), @Filter(name = "employeeSalaryStructureCriticalSkillsEqFilter", condition = "CRITICAL_SKILLS = :criticalSkills"), @Filter(name = "employeeSalaryStructureCriticalSkillsNEqFilter", condition = "CRITICAL_SKILLS != :criticalSkills"), @Filter(name = "employeeSalaryStructureCriticalSkillsInFilter", condition = "CRITICAL_SKILLS in (:criticalSkills)"), @Filter(name = "employeeSalaryStructureCriticalSkillsBwFilter", condition = "CRITICAL_SKILLS > :criticalSkills_MIN  AND CRITICAL_SKILLS < :criticalSkills_MAX"), @Filter(name = "employeeSalaryStructureCriticalSkillsGtEqFilter", condition = "CRITICAL_SKILLS >= :criticalSkills"), @Filter(name = "employeeSalaryStructureCriticalSkillsEqFilter", condition = "CRITICAL_SKILLS = :criticalSkills"), @Filter(name = "employeeSalaryStructureEmployeePkGtFilter", condition = "EMPLOYEE_PK > :empolyeePk"), @Filter(name = "employeeSalaryStructureEmployeePkNInFilter", condition = "EMPOLYEE_PK not in (:empolyeePk)"), @Filter(name = "employeeSalaryStructureEmpolyeePkLtEqFilter", condition = "EMPOLYEE_PK <= :empolyeePk"), @Filter(name = "employeeSalaryStructureEmpolyeePkLtFilter", condition = "EMPOLYEE_PK < :empolyeePk"), @Filter(name = "employeeSalaryStructureEmpolyeePkEqFilter", condition = "EMPOLYEE_PK = :empolyeePk"), @Filter(name = "employeeSalaryStructureEmpolyeePkNEqFilter", condition = "EMPOLYEE_PK != :empolyeePk"), @Filter(name = "employeeSalaryStructureEmpolyeePkInFilter", condition = "EMPOLYEE_PK in (:empolyeePk)"), @Filter(name = "employeeSalaryStructureEmpolyeePkBwFilter", condition = "EMPOLYEE_PK > :empolyeePk_MIN  AND EMPOLYEE_PK < :empolyeePk_MAX"), @Filter(name = "employeeSalaryStructureEmpolyeePkGtEqFilter", condition = "EMPOLYEE_PK >= :empolyeePk"), @Filter(name = "employeeSalaryStructureEmpolyeePkEqFilter", condition = "EMPOLYEE_PK = :empolyeePk"), @Filter(name = "employeeSalaryStructureEndDateGtFilter", condition = "END_DATE > (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureEndDateLtFilter", condition = "END_DATE < (SELECT DATE_FORMAT(:endDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureEndDateBwFilter", condition = "END_DATE >(SELECT DATE_FORMAT(:endDate_MIN, '%Y-%m-%d')) AND END_DATE <(SELECT DATE_FORMAT(:endDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureHraGtFilter", condition = "HRA > :hra"), @Filter(name = "employeeSalaryStructureHraNInFilter", condition = "HRA not in (:hra)"), @Filter(name = "employeeSalaryStructureHraLtEqFilter", condition = "HRA <= :hra"), @Filter(name = "employeeSalaryStructureHraLtFilter", condition = "HRA < :hra"), @Filter(name = "employeeSalaryStructureHraEqFilter", condition = "HRA = :hra"), @Filter(name = "employeeSalaryStructureHraNEqFilter", condition = "HRA != :hra"), @Filter(name = "employeeSalaryStructureHraInFilter", condition = "HRA in (:hra)"), @Filter(name = "employeeSalaryStructureHraBwFilter", condition = "HRA > :hra_MIN  AND HRA < :hra_MAX"), @Filter(name = "employeeSalaryStructureHraGtEqFilter", condition = "HRA >= :hra"), @Filter(name = "employeeSalaryStructureHraEqFilter", condition = "HRA = :hra"), @Filter(name = "employeeSalaryStructureIdGtFilter", condition = "ID > :id"), @Filter(name = "employeeSalaryStructureIdNInFilter", condition = "ID not in (:id)"), @Filter(name = "employeeSalaryStructureIdLtEqFilter", condition = "ID <= :id"), @Filter(name = "employeeSalaryStructureIdLtFilter", condition = "ID < :id"), @Filter(name = "employeeSalaryStructureIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeSalaryStructureIdNEqFilter", condition = "ID != :id"), @Filter(name = "employeeSalaryStructureIdInFilter", condition = "ID in (:id)"), @Filter(name = "employeeSalaryStructureIdBwFilter", condition = "ID > :id_MIN  AND ID < :id_MAX"), @Filter(name = "employeeSalaryStructureIdGtEqFilter", condition = "ID >= :id"), @Filter(name = "employeeSalaryStructureIdEqFilter", condition = "ID = :id"), @Filter(name = "employeeSalaryStructureLocalCurrencyNInFilter", condition = "LOCAL_CURRENCY not in (:localCurrency)"), @Filter(name = "employeeSalaryStructureLocalCurrencyEqFilter", condition = "LOCAL_CURRENCY = :localCurrency"), @Filter(name = "employeeSalaryStructureLocalCurrencyNEqFilter", condition = "LOCAL_CURRENCY != :localCurrency"), @Filter(name = "employeeSalaryStructureLocalCurrencyInFilter", condition = "LOCAL_CURRENCY in (:localCurrency)"), @Filter(name = "employeeSalaryStructureMobileAllowanceGtFilter", condition = "MOBILE_ALLOWANCE > :mobileAllowance"), @Filter(name = "employeeSalaryStructureMobileAllowanceNInFilter", condition = "MOBILE_ALLOWANCE not in (:mobileAllowance)"), @Filter(name = "employeeSalaryStructureMobileAllowanceLtEqFilter", condition = "MOBILE_ALLOWANCE <= :mobileAllowance"), @Filter(name = "employeeSalaryStructureMobileAllowanceLtFilter", condition = "MOBILE_ALLOWANCE < :mobileAllowance"), @Filter(name = "employeeSalaryStructureMobileAllowanceEqFilter", condition = "MOBILE_ALLOWANCE = :mobileAllowance"), @Filter(name = "employeeSalaryStructureMobileAllowanceNEqFilter", condition = "MOBILE_ALLOWANCE != :mobileAllowance"), @Filter(name = "employeeSalaryStructureMobileAllowanceInFilter", condition = "MOBILE_ALLOWANCE in (:mobileAllowance)"), @Filter(name = "employeeSalaryStructureMobileAllowanceBwFilter", condition = "MOBILE_ALLOWANCE > :mobileAllowance_MIN  AND MOBILE_ALLOWANCE < :mobileAllowance_MAX"), @Filter(name = "employeeSalaryStructureMobileAllowanceGtEqFilter", condition = "MOBILE_ALLOWANCE >= :mobileAllowance"), @Filter(name = "employeeSalaryStructureMobileAllowanceEqFilter", condition = "MOBILE_ALLOWANCE = :mobileAllowance"), @Filter(name = "employeeSalaryStructureOverbaseGtFilter", condition = "OVERBASE > :overbase"), @Filter(name = "employeeSalaryStructureOverbaseNInFilter", condition = "OVERBASE not in (:overbase)"), @Filter(name = "employeeSalaryStructureOverbaseLtEqFilter", condition = "OVERBASE <= :overbase"), @Filter(name = "employeeSalaryStructureOverbaseLtFilter", condition = "OVERBASE < :overbase"), @Filter(name = "employeeSalaryStructureOverbaseEqFilter", condition = "OVERBASE = :overbase"), @Filter(name = "employeeSalaryStructureOverbaseNEqFilter", condition = "OVERBASE != :overbase"), @Filter(name = "employeeSalaryStructureOverbaseInFilter", condition = "OVERBASE in (:overbase)"), @Filter(name = "employeeSalaryStructureOverbaseBwFilter", condition = "OVERBASE > :overbase_MIN  AND OVERBASE < :overbase_MAX"), @Filter(name = "employeeSalaryStructureOverbaseGtEqFilter", condition = "OVERBASE >= :overbase"), @Filter(name = "employeeSalaryStructureOverbaseEqFilter", condition = "OVERBASE = :overbase"), @Filter(name = "employeeSalaryStructureOvertimeGtFilter", condition = "OVERTIME > :overtime"), @Filter(name = "employeeSalaryStructureOvertimeNInFilter", condition = "OVERTIME not in (:overtime)"), @Filter(name = "employeeSalaryStructureOvertimeLtEqFilter", condition = "OVERTIME <= :overtime"), @Filter(name = "employeeSalaryStructureOvertimeLtFilter", condition = "OVERTIME < :overtime"), @Filter(name = "employeeSalaryStructureOvertimeEqFilter", condition = "OVERTIME = :overtime"), @Filter(name = "employeeSalaryStructureOvertimeNEqFilter", condition = "OVERTIME != :overtime"), @Filter(name = "employeeSalaryStructureOvertimeInFilter", condition = "OVERTIME in (:overtime)"), @Filter(name = "employeeSalaryStructureOvertimeBwFilter", condition = "OVERTIME > :overtime_MIN  AND OVERTIME < :overtime_MAX"), @Filter(name = "employeeSalaryStructureOvertimeGtEqFilter", condition = "OVERTIME >= :overtime"), @Filter(name = "employeeSalaryStructureOvertimeEqFilter", condition = "OVERTIME = :overtime"), @Filter(name = "employeeSalaryStructurePayFrequencyNInFilter", condition = "PAY_FREQUENCY not in (:payFrequency)"), @Filter(name = "employeeSalaryStructurePayFrequencyEqFilter", condition = "PAY_FREQUENCY = :payFrequency"), @Filter(name = "employeeSalaryStructurePayFrequencyNEqFilter", condition = "PAY_FREQUENCY != :payFrequency"), @Filter(name = "employeeSalaryStructurePayFrequencyInFilter", condition = "PAY_FREQUENCY in (:payFrequency)"), @Filter(name = "employeeSalaryStructurePayRateNInFilter", condition = "PAY_RATE not in (:payRate)"), @Filter(name = "employeeSalaryStructurePayRateEqFilter", condition = "PAY_RATE = :payRate"), @Filter(name = "employeeSalaryStructurePayRateNEqFilter", condition = "PAY_RATE != :payRate"), @Filter(name = "employeeSalaryStructurePayRateInFilter", condition = "PAY_RATE in (:payRate)"), @Filter(name = "employeeSalaryStructureRelocationAllowanceGtFilter", condition = "RELOCATION_ALLOWANCE > :relocationAllowance"), @Filter(name = "employeeSalaryStructureRelocationAllowanceNInFilter", condition = "RELOCATION_ALLOWANCE not in (:relocationAllowance)"), @Filter(name = "employeeSalaryStructureRelocationAllowanceLtEqFilter", condition = "RELOCATION_ALLOWANCE <= :relocationAllowance"), @Filter(name = "employeeSalaryStructureRelocationAllowanceLtFilter", condition = "RELOCATION_ALLOWANCE < :relocationAllowance"), @Filter(name = "employeeSalaryStructureRelocationAllowanceEqFilter", condition = "RELOCATION_ALLOWANCE = :relocationAllowance"), @Filter(name = "employeeSalaryStructureRelocationAllowanceNEqFilter", condition = "RELOCATION_ALLOWANCE != :relocationAllowance"), @Filter(name = "employeeSalaryStructureRelocationAllowanceInFilter", condition = "RELOCATION_ALLOWANCE in (:relocationAllowance)"), @Filter(name = "employeeSalaryStructureRelocationAllowanceBwFilter", condition = "RELOCATION_ALLOWANCE > :relocationAllowance_MIN  AND RELOCATION_ALLOWANCE < :relocationAllowance_MAX"), @Filter(name = "employeeSalaryStructureRelocationAllowanceGtEqFilter", condition = "RELOCATION_ALLOWANCE >= :relocationAllowance"), @Filter(name = "employeeSalaryStructureRelocationAllowanceEqFilter", condition = "RELOCATION_ALLOWANCE = :relocationAllowance"), @Filter(name = "employeeSalaryStructureRelocationAllowanceDateGtFilter", condition = "RELOCATION_ALLOWANCE_DATE > (SELECT DATE_FORMAT(:relocationAllowanceDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureRelocationAllowanceDateLtFilter", condition = "RELOCATION_ALLOWANCE_DATE < (SELECT DATE_FORMAT(:relocationAllowanceDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureRelocationAllowanceDateBwFilter", condition = "RELOCATION_ALLOWANCE_DATE >(SELECT DATE_FORMAT(:relocationAllowanceDate_MIN, '%Y-%m-%d')) AND RELOCATION_ALLOWANCE_DATE <(SELECT DATE_FORMAT(:relocationAllowanceDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureSignUpBonusGtFilter", condition = "SIGN_UP_BONUS > :signUpBonus"), @Filter(name = "employeeSalaryStructureSignUpBonusNInFilter", condition = "SIGN_UP_BONUS not in (:signUpBonus)"), @Filter(name = "employeeSalaryStructureSignUpBonusLtEqFilter", condition = "SIGN_UP_BONUS <= :signUpBonus"), @Filter(name = "employeeSalaryStructureSignUpBonusLtFilter", condition = "SIGN_UP_BONUS < :signUpBonus"), @Filter(name = "employeeSalaryStructureSignUpBonusEqFilter", condition = "SIGN_UP_BONUS = :signUpBonus"), @Filter(name = "employeeSalaryStructureSignUpBonusNEqFilter", condition = "SIGN_UP_BONUS != :signUpBonus"), @Filter(name = "employeeSalaryStructureSignUpBonusInFilter", condition = "SIGN_UP_BONUS in (:signUpBonus)"), @Filter(name = "employeeSalaryStructureSignUpBonusBwFilter", condition = "SIGN_UP_BONUS > :signUpBonus_MIN  AND SIGN_UP_BONUS < :signUpBonus_MAX"), @Filter(name = "employeeSalaryStructureSignUpBonusGtEqFilter", condition = "SIGN_UP_BONUS >= :signUpBonus"), @Filter(name = "employeeSalaryStructureSignUpBonusEqFilter", condition = "SIGN_UP_BONUS = :signUpBonus"), @Filter(name = "employeeSalaryStructureSignUpBonusDateGtFilter", condition = "SIGN_UP_BONUS_DATE > (SELECT DATE_FORMAT(:signUpBonusDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureSignUpBonusDateLtFilter", condition = "SIGN_UP_BONUS_DATE < (SELECT DATE_FORMAT(:signUpBonusDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureSignUpBonusDateBwFilter", condition = "SIGN_UP_BONUS_DATE >(SELECT DATE_FORMAT(:signUpBonusDate_MIN, '%Y-%m-%d')) AND SIGN_UP_BONUS_DATE <(SELECT DATE_FORMAT(:signUpBonusDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureStartDateGtFilter", condition = "START_DATE > (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureStartDateLtFilter", condition = "START_DATE < (SELECT DATE_FORMAT(:startDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureStartDateBwFilter", condition = "START_DATE >(SELECT DATE_FORMAT(:startDate_MIN, '%Y-%m-%d')) AND START_DATE <(SELECT DATE_FORMAT(:startDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureStiGtFilter", condition = "STI > :sti"), @Filter(name = "employeeSalaryStructureStiNInFilter", condition = "STI not in (:sti)"), @Filter(name = "employeeSalaryStructureStiLtEqFilter", condition = "STI <= :sti"), @Filter(name = "employeeSalaryStructureStiLtFilter", condition = "STI < :sti"), @Filter(name = "employeeSalaryStructureStiEqFilter", condition = "STI = :sti"), @Filter(name = "employeeSalaryStructureStiNEqFilter", condition = "STI != :sti"), @Filter(name = "employeeSalaryStructureStiInFilter", condition = "STI in (:sti)"), @Filter(name = "employeeSalaryStructureStiBwFilter", condition = "STI > :sti_MIN  AND STI < :sti_MAX"), @Filter(name = "employeeSalaryStructureStiGtEqFilter", condition = "STI >= :sti"), @Filter(name = "employeeSalaryStructureStiEqFilter", condition = "STI = :sti"), @Filter(name = "employeeSalaryStructureStiDateGtFilter", condition = "STI_DATE > (SELECT DATE_FORMAT(:stiDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureStiDateLtFilter", condition = "STI_DATE < (SELECT DATE_FORMAT(:stiDate, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureStiDateBwFilter", condition = "STI_DATE >(SELECT DATE_FORMAT(:stiDate_MIN, '%Y-%m-%d')) AND STI_DATE <(SELECT DATE_FORMAT(:stiDate_MAX, '%Y-%m-%d'))"), @Filter(name = "employeeSalaryStructureTaGtFilter", condition = "TA > :ta"), @Filter(name = "employeeSalaryStructureTaNInFilter", condition = "TA not in (:ta)"), @Filter(name = "employeeSalaryStructureTaLtEqFilter", condition = "TA <= :ta"), @Filter(name = "employeeSalaryStructureTaLtFilter", condition = "TA < :ta"), @Filter(name = "employeeSalaryStructureTaEqFilter", condition = "TA = :ta"), @Filter(name = "employeeSalaryStructureTaNEqFilter", condition = "TA != :ta"), @Filter(name = "employeeSalaryStructureTaInFilter", condition = "TA in (:ta)"), @Filter(name = "employeeSalaryStructureTaBwFilter", condition = "TA > :ta_MIN  AND TA < :ta_MAX"), @Filter(name = "employeeSalaryStructureTaGtEqFilter", condition = "TA >= :ta"), @Filter(name = "employeeSalaryStructureTaEqFilter", condition = "TA = :ta") })
//@FilterDefs(value = { @FilterDef(name = "employeeSalaryStructureBasicSalaryGtFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureBasicSalaryNInFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureBasicSalaryLtEqFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureBasicSalaryLtFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureBasicSalaryEqFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureBasicSalaryNEqFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureBasicSalaryInFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureBasicSalaryBwFilter", parameters = { @ParamDef(name = "basicSalary_MIN", type = Double.class), @ParamDef(name = "basicSalary_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureBasicSalaryGtEqFilter", parameters = { @ParamDef(name = "basicSalary", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureCriticalSkillsGtFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureCriticalSkillsNInFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureCriticalSkillsLtEqFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureCriticalSkillsLtFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureCriticalSkillsEqFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureCriticalSkillsNEqFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureCriticalSkillsInFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureCriticalSkillsBwFilter", parameters = { @ParamDef(name = "criticalSkills_MIN", type = Double.class), @ParamDef(name = "criticalSkills_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureCriticalSkillsGtEqFilter", parameters = { @ParamDef(name = "criticalSkills", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureEmpolyeePkGtFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureEmpolyeePkNInFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureEmpolyeePkLtEqFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureEmpolyeePkLtFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureEmpolyeePkEqFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureEmpolyeePkNEqFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureEmpolyeePkInFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureEmpolyeePkBwFilter", parameters = { @ParamDef(name = "empolyeePk_MIN", type = Integer.class), @ParamDef(name = "empolyeePk_MAX", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureEmpolyeePkGtEqFilter", parameters = { @ParamDef(name = "empolyeePk", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureEndDateGtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureEndDateLtFilter", parameters = { @ParamDef(name = "endDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureEndDateBwFilter", parameters = { @ParamDef(name = "endDate_MIN", type = String.class), @ParamDef(name = "endDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureHraGtFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHraNInFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHraLtEqFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHraLtFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHraEqFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHraNEqFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHraInFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHraBwFilter", parameters = { @ParamDef(name = "hra_MIN", type = Double.class), @ParamDef(name = "hra_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureHraGtEqFilter", parameters = { @ParamDef(name = "hra", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureIdGtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureIdNInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureIdLtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureIdLtFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureIdEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureIdNEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureIdInFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureIdBwFilter", parameters = { @ParamDef(name = "id_MIN", type = Integer.class), @ParamDef(name = "id_MAX", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureIdGtEqFilter", parameters = { @ParamDef(name = "id", type = Integer.class) }), @FilterDef(name = "employeeSalaryStructureLocalCurrencyNInFilter", parameters = { @ParamDef(name = "localCurrency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureLocalCurrencyEqFilter", parameters = { @ParamDef(name = "localCurrency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureLocalCurrencyNEqFilter", parameters = { @ParamDef(name = "localCurrency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureLocalCurrencyInFilter", parameters = { @ParamDef(name = "localCurrency", type = String.class) }), @FilterDef(name = "employeeSalaryStructureMobileAllowanceGtFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureMobileAllowanceNInFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureMobileAllowanceLtEqFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureMobileAllowanceLtFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureMobileAllowanceEqFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureMobileAllowanceNEqFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureMobileAllowanceInFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureMobileAllowanceBwFilter", parameters = { @ParamDef(name = "mobileAllowance_MIN", type = Double.class), @ParamDef(name = "mobileAllowance_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureMobileAllowanceGtEqFilter", parameters = { @ParamDef(name = "mobileAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOverbaseGtFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOverbaseNInFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOverbaseLtEqFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOverbaseLtFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOverbaseEqFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOverbaseNEqFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOverbaseInFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOverbaseBwFilter", parameters = { @ParamDef(name = "overbase_MIN", type = Double.class), @ParamDef(name = "overbase_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOverbaseGtEqFilter", parameters = { @ParamDef(name = "overbase", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOvertimeGtFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOvertimeNInFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOvertimeLtEqFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOvertimeLtFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOvertimeEqFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOvertimeNEqFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOvertimeInFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOvertimeBwFilter", parameters = { @ParamDef(name = "overtime_MIN", type = Double.class), @ParamDef(name = "overtime_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureOvertimeGtEqFilter", parameters = { @ParamDef(name = "overtime", type = Double.class) }), @FilterDef(name = "employeeSalaryStructurePayFrequencyNInFilter", parameters = { @ParamDef(name = "payFrequency", type = String.class) }), @FilterDef(name = "employeeSalaryStructurePayFrequencyEqFilter", parameters = { @ParamDef(name = "payFrequency", type = String.class) }), @FilterDef(name = "employeeSalaryStructurePayFrequencyNEqFilter", parameters = { @ParamDef(name = "payFrequency", type = String.class) }), @FilterDef(name = "employeeSalaryStructurePayFrequencyInFilter", parameters = { @ParamDef(name = "payFrequency", type = String.class) }), @FilterDef(name = "employeeSalaryStructurePayRateNInFilter", parameters = { @ParamDef(name = "payRate", type = String.class) }), @FilterDef(name = "employeeSalaryStructurePayRateEqFilter", parameters = { @ParamDef(name = "payRate", type = String.class) }), @FilterDef(name = "employeeSalaryStructurePayRateNEqFilter", parameters = { @ParamDef(name = "payRate", type = String.class) }), @FilterDef(name = "employeeSalaryStructurePayRateInFilter", parameters = { @ParamDef(name = "payRate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceGtFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceNInFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceLtEqFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceLtFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceEqFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceNEqFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceInFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceBwFilter", parameters = { @ParamDef(name = "relocationAllowance_MIN", type = Double.class), @ParamDef(name = "relocationAllowance_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceGtEqFilter", parameters = { @ParamDef(name = "relocationAllowance", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceDateGtFilter", parameters = { @ParamDef(name = "relocationAllowanceDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceDateLtFilter", parameters = { @ParamDef(name = "relocationAllowanceDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureRelocationAllowanceDateBwFilter", parameters = { @ParamDef(name = "relocationAllowanceDate_MIN", type = String.class), @ParamDef(name = "relocationAllowanceDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusGtFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusNInFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusLtEqFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusLtFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusEqFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusNEqFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusInFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusBwFilter", parameters = { @ParamDef(name = "signUpBonus_MIN", type = Double.class), @ParamDef(name = "signUpBonus_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusGtEqFilter", parameters = { @ParamDef(name = "signUpBonus", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusDateGtFilter", parameters = { @ParamDef(name = "signUpBonusDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusDateLtFilter", parameters = { @ParamDef(name = "signUpBonusDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureSignUpBonusDateBwFilter", parameters = { @ParamDef(name = "signUpBonusDate_MIN", type = String.class), @ParamDef(name = "signUpBonusDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureStartDateGtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureStartDateLtFilter", parameters = { @ParamDef(name = "startDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureStartDateBwFilter", parameters = { @ParamDef(name = "startDate_MIN", type = String.class), @ParamDef(name = "startDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureStiGtFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureStiNInFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureStiLtEqFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureStiLtFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureStiEqFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureStiNEqFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureStiInFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureStiBwFilter", parameters = { @ParamDef(name = "sti_MIN", type = Double.class), @ParamDef(name = "sti_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureStiGtEqFilter", parameters = { @ParamDef(name = "sti", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureStiDateGtFilter", parameters = { @ParamDef(name = "stiDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureStiDateLtFilter", parameters = { @ParamDef(name = "stiDate", type = String.class) }), @FilterDef(name = "employeeSalaryStructureStiDateBwFilter", parameters = { @ParamDef(name = "stiDate_MIN", type = String.class), @ParamDef(name = "stiDate_MAX", type = String.class) }), @FilterDef(name = "employeeSalaryStructureTaGtFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureTaNInFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureTaLtEqFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureTaLtFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureTaEqFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureTaNEqFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureTaInFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureTaBwFilter", parameters = { @ParamDef(name = "ta_MIN", type = Double.class), @ParamDef(name = "ta_MAX", type = Double.class) }), @FilterDef(name = "employeeSalaryStructureTaGtEqFilter", parameters = { @ParamDef(name = "ta", type = Double.class) }) })
@Filters( value = {
@Filter(name = "employeeSalaryStructureEmployeeUseridPkInFilter", condition = "EMPLOYEE_PK IN (select e.ID FROM EMPLOYEE e WHERE e.USERID_PK=:useridPk)"),
@Filter(name = "employeeSalaryStructureEmployeeDepartmentInFilter", condition = "EMPLOYEE_PK IN ( SELECT e.ID FROM EMPLOYEE e where e.DEPARTMENT_ID IN (SELECT d.ID FROM DEPARTMENT d WHERE d.NAME IN ( :department)))"),
@Filter(name = "employeeSalaryStructureEmployeeFullNameInFilter", condition = "EMPLOYEE_PK IN (select e.ID FROM EMPLOYEE e WHERE e.FULL_NAME = :fullName)")})
@FilterDefs(value = {
@FilterDef(name = "employeeSalaryStructureEmployeeUseridPkInFilter", parameters = @ParamDef(name = "useridPk", type = Integer.class)),
@FilterDef(name = "employeeSalaryStructureEmployeeDepartmentInFilter", parameters = @ParamDef(name = "department", type = String.class)),
@FilterDef(name = "employeeSalaryStructureEmployeeFullNameInFilter", parameters = @ParamDef(name = "fullName", type = String.class))})
public class EmployeeSalaryStructure extends BaseEntitySaaS{

    @Basic
    @Column(name = "BASIC_SALARY")
    private Double basicSalary;

    @Basic
    @Column(name = "CRITICAL_SKILLS")
    private Double criticalSkills;

    @Basic
    @Column(name = "DELETED")
    private boolean deleted;
    
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "EMPLOYEE_PK", columnDefinition = "INT")
    private Employee employee;

    @Basic
    @Column(name = "END_DATE", length = 19)
    private Date endDate;

    @Basic
    @Column(name = "HRA")
    private Double hra;


    @GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    @Id
    @Column(columnDefinition = "INT")
    private Integer id;

    @Size(max = 10)
    @Basic
    @Column(name = "LOCAL_CURRENCY")
    private String localCurrency;

    @Basic
    @Column(name = "MOBILE_ALLOWANCE")
    private Double mobileAllowance;

    @Basic
    @Column(name = "OVERBASE")
    private Double overbase;

    @Basic
    @Column(name = "OVERTIME")
    private Double overtime;
    
    @Basic
    @Column(name = "GROSS_SALARY")
    private Double grossSalary;
    
    public enum FrequencyType {
    	MONTHLY,HOURLY,WEEKLY
    }
    
   public enum EmployeeMobileType{
	   EMPLOYEE_MOBILE_PLAN,COMPANY_MOBILE_PLAN,COMPANY_MOBILE
   }
    
    @Basic
    @Column(name = "PAY_FREQUENCY")
    @Enumerated(EnumType.STRING)
    private FrequencyType payFrequency;

    @Basic
    @Column(name = "EMPLOYEE_MOBILE_FLAG")
    @Enumerated(EnumType.STRING)
    private EmployeeMobileType employeeMobileFlag;
    
    @Basic
    @Column(name = "PAY_RATE")
    private Double  payRate;

    @Basic
    @Column(name = "RELOCATION_ALLOWANCE")
    private Double relocationAllowance;

    @Basic
    @Column(name = "RELOCATION_ALLOWANCE_DATE", length = 19)
    private Date relocationAllowanceDate;

    @Basic
    @Column(name = "SIGN_UP_BONUS")
    private Double signUpBonus;

    @Basic
    @Column(name = "NEGO_PCT_OVERBASE")
    private Double negoPctOverbase ;

    @Basic
    @Column(name = "NEGO_PCT_CRITICAL")
    private Double negoPctCritical;
    

    @Basic
    @Column(name = "SIGN_UP_BONUS_DATE", length = 19)
    private Date signUpBonusDate;

    @Basic
    @Column(name = "START_DATE", length = 19)
    private Date startDate;

    @Basic
    @Column(name = "STI")
    private Double sti;

    @Basic
    @Column(name = "STI_DATE", length = 19)
    private Date stiDate;

    @Basic
    @Column(name = "TA")
    private Double ta;

    @Basic
    @Column(name = "YEARLY_BASIC_SALARY")
    private Double yearlyBasicSalary;
    
    @Basic
    @Column(name = "YEARLY_OVERBASE")
    private Double yearlyOverbase;
    
    @Basic
    @Column(name = "YEARLY_CRITICAL_SKILLS")
    private Double yearlyCriticalSkills;
    
    @Basic
    @Column(name = "YEARLY_HRA")
    private Double yearlyHra;
    
    @Basic
    @Column(name = "YEARLY_TA")
    private Double yearlyTa;
    
    @Basic
    @Column(name = "YEARLY_MOBILE_ALLOWANCE")
    private Double yearlyMobileAllowance;
   
    @Basic
    @Column(name = "YEARLY_GROSS_SALARY")
    private Double yearlyGrossSalary;
   
    @Basic
	@Column(name = "BOARD_MEMBER_AMOUNT")
    private Double boardMemberAmount;

    
    public EmployeeSalaryStructure() {
    }

    public EmployeeSalaryStructure(Integer id) {
        this.id = id;
    }

    public Double getBasicSalary() {
        return basicSalary;
    }

    public void setBasicSalary(Double basicSalary) {
        this.basicSalary = basicSalary;
    }

    public Double getCriticalSkills() {
        return criticalSkills;
    }

    public void setCriticalSkills(Double criticalSkills) {
        this.criticalSkills = criticalSkills;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Employee getEmployee() {
        return employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }


    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public Double getHra() {
        return hra;
    }

    public void setHra(Double hra) {
        this.hra = hra;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLocalCurrency() {
        return localCurrency;
    }

    public void setLocalCurrency(String localCurrency) {
        this.localCurrency = localCurrency;
    }

    public Double getMobileAllowance() {
        return mobileAllowance;
    }

    public void setMobileAllowance(Double mobileAllowance) {
        this.mobileAllowance = mobileAllowance;
    }

    public Double getOverbase() {
        return overbase;
    }

    public void setOverbase(Double overbase) {
        this.overbase = overbase;
    }

    public Double getOvertime() {
        return overtime;
    }

    public void setOvertime(Double overtime) {
        this.overtime = overtime;
    }

    public FrequencyType getPayFrequency() {
        return payFrequency;
    }

    public void setPayFrequency(FrequencyType payFrequency) {
        this.payFrequency = payFrequency;
    }

    public Double getPayRate() {
        return payRate;
    }

    public void setPayRate(Double payRate) {
        this.payRate = payRate;
    }

    public Double getRelocationAllowance() {
        return relocationAllowance;
    }

    public void setRelocationAllowance(Double relocationAllowance) {
        this.relocationAllowance = relocationAllowance;
    }

    public Date getRelocationAllowanceDate() {
        return relocationAllowanceDate;
    }

    public void setRelocationAllowanceDate(Date relocationAllowanceDate) {
        this.relocationAllowanceDate = relocationAllowanceDate;
    }

    public Double getSignUpBonus() {
        return signUpBonus;
    }

    public void setSignUpBonus(Double signUpBonus) {
        this.signUpBonus = signUpBonus;
    }

    public Date getSignUpBonusDate() {
        return signUpBonusDate;
    }

    public void setSignUpBonusDate(Date signUpBonusDate) {
        this.signUpBonusDate = signUpBonusDate;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Double getSti() {
        return sti;
    }

    public void setSti(Double sti) {
        this.sti = sti;
    }

    public Date getStiDate() {
        return stiDate;
    }

    public void setStiDate(Date stiDate) {
        this.stiDate = stiDate;
    }

    public Double getTa() {
        return ta;
    }

    public void setTa(Double ta) {
        this.ta = ta;
    }

	public Double getNegoPctOverbase() {
		return negoPctOverbase;
	}

	public void setNegoPctOverbase(Double negoPctOverbase) {
		this.negoPctOverbase = negoPctOverbase;
	}

	public Double getNegoPctCritical() {
		return negoPctCritical;
	}

	public void setNegoPctCritical(Double negoPctCritical) {
		this.negoPctCritical = negoPctCritical;
	}

	public EmployeeMobileType getEmployeeMobileFlag() {
		return employeeMobileFlag;
	}

	public void setEmployeeMobileFlag(EmployeeMobileType employeeMobileFlag) {
		this.employeeMobileFlag = employeeMobileFlag;
	}

	public Double getGrossSalary() {
		return grossSalary;
	}

	public void setGrossSalary(Double grossSalary) {
		this.grossSalary = grossSalary;
	}

	public Double getYearlyBasicSalary() {
		return yearlyBasicSalary;
	}

	public void setYearlyBasicSalary(Double yearlyBasicSalary) {
		this.yearlyBasicSalary = yearlyBasicSalary;
	}

	public Double getYearlyCriticalSkills() {
		return yearlyCriticalSkills;
	}

	public void setYearlyCriticalSkills(Double yearlyCriticalSkills) {
		this.yearlyCriticalSkills = yearlyCriticalSkills;
	}

	public Double getYearlyHra() {
		return yearlyHra;
	}

	public void setYearlyHra(Double yearlyHra) {
		this.yearlyHra = yearlyHra;
	}

	public Double getYearlyTa() {
		return yearlyTa;
	}

	public void setYearlyTa(Double yearlyTa) {
		this.yearlyTa = yearlyTa;
	}

	public Double getYearlyMobileAllowance() {
		return yearlyMobileAllowance;
	}

	public void setYearlyMobileAllowance(Double yearlyMobileAllowance) {
		this.yearlyMobileAllowance = yearlyMobileAllowance;
	}

	public Double getYearlyGrossSalary() {
		return yearlyGrossSalary;
	}

	public void setYearlyGrossSalary(Double yearlyGrossSalary) {
		this.yearlyGrossSalary = yearlyGrossSalary;
	}

	public Double getYearlyOverbase() {
		return yearlyOverbase;
	}

	public void setYearlyOverbase(Double yearlyOverbase) {
		this.yearlyOverbase = yearlyOverbase;
	}
	
	
	public Double getBonus() {
		return this.sti+this.signUpBonus+this.relocationAllowance;
	}


	public Double setBonus(Double bonus) {
		return null;
	}

	public Double getBoardMemberAmount() {
		return boardMemberAmount;
	}

	public void setBoardMemberAmount(Double boardMemberAmount) {
		this.boardMemberAmount = boardMemberAmount;
	}

	
    
}
